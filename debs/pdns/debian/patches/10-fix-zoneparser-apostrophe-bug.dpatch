#! /bin/sh /usr/share/dpatch/dpatch-run
## 10-fix-zoneparser-apostrophe-bug.dpatch by  <mark@mint.knams.wikimedia.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad pdns-2.9.21~/pdns/zoneparser-tng.cc pdns-2.9.21/pdns/zoneparser-tng.cc
--- pdns-2.9.21~/pdns/zoneparser-tng.cc	2007-06-24 15:00:24.000000000 +0000
+++ pdns-2.9.21/pdns/zoneparser-tng.cc	2007-06-25 18:20:34.000000000 +0000
@@ -40,14 +40,16 @@
   FILE *fp=fopen(fname.c_str(), "r");
   if(!fp)
     throw runtime_error("Unable to open file '"+fname+"': "+stringerror());
-  d_fps.push(fp);
+
+  filestate fs(fp, fname);
+  d_filestates.push(fs);
 }
 
 ZoneParserTNG::~ZoneParserTNG()
 {
-  while(!d_fps.empty()) {
-    fclose(d_fps.top());
-    d_fps.pop();
+  while(!d_filestates.empty()) {
+    fclose(d_filestates.top().d_fp);
+    d_filestates.pop();
   }
 }
 
@@ -56,7 +58,23 @@
   return string(line.c_str() + range.first, range.second - range.first);
 }
 
-static unsigned int makeTTLFromZone(const string& str)
+static bool isTimeSpec(const string& nextpart)
+{
+  if(nextpart.empty())
+    return false;
+  for(string::const_iterator iter = nextpart.begin(); iter != nextpart.end(); ++iter) {
+    if(isdigit(*iter))
+      continue;
+    if(iter+1 != nextpart.end())
+      return false;
+    char c=tolower(*iter);
+    return (c=='m' || c=='h' || c=='d' || c=='w' || c=='y');
+  }
+  return true;
+}
+
+
+unsigned int ZoneParserTNG::makeTTLFromZone(const string& str)
 {
   if(str.empty())
     return 0;
@@ -80,8 +98,11 @@
     case 'Y': // ? :-)
       val*=3600*24*365;
       break;
+
     default:
-      throw ZoneParserTNG::exception("Unable to parse time specification '"+str+"'");
+      throw ZoneParserTNG::exception("Unable to parse time specification '"+str+"' on line "+
+				     lexical_cast<string>(d_filestates.top().d_lineno)+" of file '"+
+				     d_filestates.top().d_filename+"'");
     }
   return val;
 }
@@ -198,6 +219,7 @@
 }
 
 
+
 bool ZoneParserTNG::get(DNSResourceRecord& rr) 
 {
  retry:;
@@ -214,8 +236,8 @@
 
   if(d_line[0]=='$') { 
     string command=makeString(d_line, parts[0]);
-    if(command=="$TTL" && parts.size() > 1)
-      d_defaultttl=makeTTLFromZone(makeString(d_line,parts[1]));
+    if(iequals(command,"$TTL") && parts.size() > 1)
+      d_defaultttl=makeTTLFromZone(trim_right_copy_if(makeString(d_line, parts[1]), is_any_of(";")));
     else if(iequals(command,"$INCLUDE") && parts.size() > 1) {
       string fname=unquotify(makeString(d_line, parts[1]));
       if(!fname.empty() && fname[0]!='/' && !d_reldir.empty())
@@ -239,7 +261,8 @@
       goto retry;
     }
     else
-      throw exception("Can't parse zone line '"+d_line+"'");
+      throw exception("Can't parse zone line '"+d_line+"' on line "+lexical_cast<string>(d_filestates.top().d_lineno)+
+		      " of file '"+d_filestates.top().d_filename);
     goto retry;
   }
 
@@ -284,7 +307,7 @@
       // cout<<"Ignoring 'IN'\n";
       continue;
     }
-    if(!haveTTL && !haveQTYPE && all(nextpart, is_digit())) {
+    if(!haveTTL && !haveQTYPE && isTimeSpec(nextpart)) {
       rr.ttl=makeTTLFromZone(nextpart);
       haveTTL=true;
       // cout<<"ttl is probably: "<<rr.ttl<<endl;
@@ -300,7 +323,10 @@
       continue;
     }
     catch(...) {
-      throw runtime_error("Parsing zone content line: '"+nextpart+"' doesn't look like a qtype, stopping loop");
+      throw runtime_error("Parsing zone content on line "+
+			  lexical_cast<string>(d_filestates.top().d_lineno)+
+			  " of file '"+d_filestates.top().d_filename+"': '"+nextpart+
+			  "' doesn't look like a qtype, stopping loop");
     }
   }
   if(!haveQTYPE) 
@@ -309,6 +335,7 @@
   rr.content=d_line.substr(range.first);
 
   chopComment(rr.content);
+  trim(rr.content);
 
   if(equals(rr.content, "@"))
     rr.content=d_zonename;
@@ -364,14 +391,15 @@
 
 bool ZoneParserTNG::getLine()
 {
-  while(!d_fps.empty()) {
+  while(!d_filestates.empty()) {
     char buffer[1024];
-    if(fgets(buffer, 1024, d_fps.top())) {
+    if(fgets(buffer, 1024, d_filestates.top().d_fp)) {
+      d_filestates.top().d_lineno++;
       d_line=buffer;
       return true;
     }
-    fclose(d_fps.top());
-    d_fps.pop();
+    fclose(d_filestates.top().d_fp);
+    d_filestates.pop();
   }
   return false;
 }
diff -urNad pdns-2.9.21~/pdns/zoneparser-tng.hh pdns-2.9.21/pdns/zoneparser-tng.hh
--- pdns-2.9.21~/pdns/zoneparser-tng.hh	2007-06-24 15:00:24.000000000 +0000
+++ pdns-2.9.21/pdns/zoneparser-tng.hh	2007-06-25 18:23:34.000000000 +0000
@@ -39,7 +39,7 @@
   bool getLine();
   bool getTemplateLine();
   void stackFile(const std::string& fname);
-  stack<FILE *> d_fps;
+  unsigned makeTTLFromZone(const std::string& str);
   string d_reldir;
   string d_line;
   string d_prevqname;
@@ -48,6 +48,14 @@
   uint32_t d_templatecounter, d_templatestop, d_templatestep;
   string d_templateline;
   parts_t d_templateparts;
+
+  struct filestate {
+    filestate(FILE* fp, string filename) : d_fp(fp), d_filename(filename), d_lineno(0){}
+    FILE *d_fp;
+    string d_filename;
+    int d_lineno;
+  };
+  stack<filestate> d_filestates;
 };
 
 #endif
