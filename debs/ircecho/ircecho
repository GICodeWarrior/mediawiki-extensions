#! /usr/bin/env python
#
# stdin -> IRC echo bot, with optional file input support.
#
# Written by Kate Turner <kate.turner@gmail.com>, source is in the public domain.
# Modified by Ryan Lane <rlane@wikimedia.org> for watching and taking input for files.
# Changes are also public domain.

import sys
import pyinotify
import threading
from optparse import OptionParser
sys.path.append('/usr/ircecho/lib')
from ircbot import SingleServerIRCBot

class EchoReader(threading.Thread):
	def __init__(self, infile=''):
		threading.Thread.__init__(self)
		self.infile = infile

	def run(self):
		if self.infile:
			print "Using infile"
			self.f = open(self.infile)
			# Seek to the end of the file
			self.f.seek(0,2)
			wm = pyinotify.WatchManager()
			notifier = pyinotify.Notifier(wm)
			mask = pyinotify.IN_MODIFY | pyinotify.IN_CREATE
			wdd = wm.watch_transient_file(self.infile, mask, EventHandler)
			notifier.loop()
		else:
			while True:
				try:
					s = raw_input()
					# this throws an exception if not connected.
					self.bot.connection.privmsg(self.chans, s)
				except EOFError:
					# Once the input is finished, the bot should exit
					break;
				except Exception:
					pass

class EchoBot(SingleServerIRCBot):
	def __init__(self, chans, nickname, server):
		print "*** Connecting to IRC server %s..." % server
		SingleServerIRCBot.__init__(self, [(server, 6667)], nickname, "IRC echo bot")
		self.chans = chans

	def on_nicknameinuse(self, c, e):
		c.nick(c.get_nickname() + "_")

	def on_welcome(self, c, e):
		print "*** Connected"
		for chan in [self.chans]:
			c.join(chan)

class EventHandler(pyinotify.ProcessEvent):
	def process_IN_MODIFY(self, event):
		s = reader.f.read()
		bot.connection.privmsg(bot.chans, s)

	def process_IN_CREATE(self, event):
		try:
			print "Reopening file"
			reader.f = open(reader.infile)
		except IOError:
			print "Failed to reopen file"
			pass

parser = OptionParser(conflict_handler="resolve")
parser.set_usage("ircecho [--infile=<filename>] <channel> <nickname> <server>")
parser.add_option("--infile", dest="infile", help="Read input from the specific file instead of from stdin")
(options, args) = parser.parse_args()
chans = args[0]
nickname = args[1]
server = args[2]
global bot
bot = EchoBot(chans, nickname, server)
global reader
reader = EchoReader(options.infile)
reader.start()
bot.start()
