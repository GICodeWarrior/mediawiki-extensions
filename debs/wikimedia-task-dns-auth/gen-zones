#!/usr/bin/python
#
# Generates zonefiles from zonetemplates
# Written on 2005/06/19 by Mark Bergsma <mark@nedworks.org>

import os
import sys

templatedir = '/etc/powerdns/templates'
zonedir = '/etc/powerdns/zones'
langlist = '/etc/powerdns/langlist-cnames'
domainmaplist = '/etc/powerdns/domain-maplist'
dblist = '/etc/powerdns/dblist-cnames'

header = '''; WARNING!
; Do NOT edit this file directly! It's generated by genzones
; Instead, edit the corresponding template in ../templates/
; See [[wikidev:DNS]] for documentation of the entire DNS setup.

'''

substs = {}

def fillsubsts():
	import time
	
	global substs, langlist, domainmaplist

	# domainmaplist is a file with format:
	#   <var>:<domainname>
	# For instance:
	#   $langlist_wikimedia:wikimedia-lb.wikimedia.org.
	domainlist = {}
	domainmap = open(domainmaplist)
	lineno=0
	for map in domainmap.readlines():
		lineno = lineno + 1
		map = map.strip()
		# skip blank lines and comments
		if not map or map.startswith("#"):
			continue
		try:
			var, value = map.split(':')
		except ValueError, e:
			print "Syntax error in %s at line %s: %s.  Quitting." % (domainmaplist, lineno, e)
			sys.exit(1)
		domainlist[var.strip()] = value.strip()

	# All substs[var] in this loop contain a list of CNAMES to the geodns record for
	# all language subdomains
	for var, value in domainlist.iteritems():
		list = open(langlist).read()
		list = list.replace('$cnamedomain', value)
		substs[var] = list

	substs['$toolserverdbs'] = open(dblist).read()

	# $serial contains a SOA serial nr in the form YYYYMMDDHH
	# This means that two zonechanges within the same hour could
	# have the same SOA serial, but it doesn't matter because
	# we're not using AXFR
	substs['$serial'] = time.strftime('%Y%m%d%H', time.gmtime())


if __name__ == '__main__':
	fillsubsts()

	for file in os.listdir(templatedir):
		filepath = os.path.join(templatedir, file)
		zonefilepath = os.path.join(zonedir, file) 

		# Only process regular files and symlinks
		if not os.path.isfile(filepath): continue

		# Check file modification time
		try:
			if (os.path.getmtime(filepath) <= os.path.getmtime(zonefilepath)
				and os.path.getmtime(langlist) <= os.path.getmtime(zonefilepath)):
				continue
		except OSError:
			pass

		print 'Processing zone', file

		# Read the entire file in a string
		template = open(filepath).read()

		# Do substitutions
		substs['$zonename'] = file
		for var, value in substs.iteritems():
			template = template.replace(var, value)

		# Write zonefile
		open(zonefilepath, 'w').write(header + template)
