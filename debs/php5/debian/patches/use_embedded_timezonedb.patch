diff -Naur php-5.2.4.orig/ext/date/lib/parse_tz.c php-5.2.4/ext/date/lib/parse_tz.c
--- php-5.2.4.orig/ext/date/lib/parse_tz.c	2007-01-25 14:38:45.000000000 +0000
+++ php-5.2.4/ext/date/lib/parse_tz.c	2008-10-22 13:04:09.000000000 +0000
@@ -20,6 +20,16 @@
 
 #include "timelib.h"
 
+#ifdef HAVE_SYSTEM_TZDATA
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <limits.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "php_scandir.h"
+#endif
+
 #include <stdio.h>
 
 #ifdef HAVE_LOCALE_H
@@ -31,7 +41,10 @@
 #else
 #include <strings.h>
 #endif
+
+#ifndef HAVE_SYSTEM_TZDATA
 #include "timezonedb.h"
+#endif
 
 #ifdef WORDS_BIGENDIAN
 #define timelib_conv_int(l) (l)
@@ -196,6 +209,195 @@
 	}
 }
 
+#ifdef HAVE_SYSTEM_TZDATA
+
+#ifdef HAVE_SYSTEM_TZDATA_PREFIX
+#define ZONEINFO_PREFIX HAVE_SYSTEM_TZDATA_PREFIX
+#else
+#define ZONEINFO_PREFIX "/usr/share/zoneinfo"
+#endif
+
+static const timelib_tzdb *timezonedb_system = NULL;
+
+/* Filter out some non-tzdata files and the posix/right databases, if
+ * present. */
+static int index_filter(const struct dirent *ent)
+{
+	return strcmp(ent->d_name, ".") != 0
+		&& strcmp(ent->d_name, "..") != 0
+		&& strcmp(ent->d_name, "posix") != 0
+		&& strcmp(ent->d_name, "posixrules") != 0
+		&& strcmp(ent->d_name, "right") != 0
+		&& strstr(ent->d_name, ".tab") == NULL;
+}
+
+/* Create the zone identifier index by trawling the filesystem. */
+static void create_zone_index(timelib_tzdb *db)
+{
+	size_t dirstack_size,  dirstack_top;
+	size_t index_size, index_next;
+	timelib_tzdb_index_entry *db_index;
+	char **dirstack;
+
+	/* LIFO stack to hold directory entres to scan; each slot is a
+	 * directory name relative to the zoneinfo prefix. */
+	dirstack_size = 32;
+	dirstack = malloc(dirstack_size * sizeof *dirstack);
+	dirstack_top = 1;
+	dirstack[0] = strdup("");
+	
+	/* Index array. */
+	index_size = 64;
+	db_index = malloc(index_size * sizeof *db_index);
+	index_next = 0;
+
+	do {
+		struct dirent **ents;
+		char name[PATH_MAX], *top;
+		int count;
+
+		/* Pop the top stack entry, and iterate through its contents. */
+		top = dirstack[--dirstack_top];
+		snprintf(name, sizeof name, ZONEINFO_PREFIX "/%s", top);
+
+		count = php_scandir(name, &ents, index_filter, php_alphasort);
+
+		while (count > 0) {
+			struct stat st;
+			const char *leaf = ents[count - 1]->d_name;
+
+			snprintf(name, sizeof name, ZONEINFO_PREFIX "/%s/%s", 
+				 top, leaf);
+			
+			if (strlen(name) && stat(name, &st) == 0) {
+				/* Name, relative to the zoneinfo prefix. */
+				const char *root = top;
+
+				if (root[0] == '/') root++;
+
+				snprintf(name, sizeof name, "%s%s%s", root, 
+					 *root ? "/": "", leaf);
+
+				if (S_ISDIR(st.st_mode)) {
+					if (dirstack_top == dirstack_size) {
+						dirstack_size *= 2;
+						dirstack = realloc(dirstack, 
+								   dirstack_size * sizeof *dirstack);
+					}
+					dirstack[dirstack_top++] = strdup(name);
+				}
+				else {
+					if (index_next == index_size) {
+						index_size *= 2;
+						db_index = realloc(db_index,
+								   index_size * sizeof *db_index);
+					}
+
+					db_index[index_next].id = strdup(name);
+					db_index[index_next++].pos = 0;
+				}
+			}
+
+			free(ents[--count]);
+		}
+		
+		free(ents);
+		free(top);
+	} while (dirstack_top);
+
+	db->index = db_index;
+	db->index_size = index_next;
+
+	free(dirstack);
+}
+
+/* Return the mmap()ed tzfile if found, else NULL.  On success, the
+ * length of the mapped data is placed in *length. */
+static char *map_tzfile(const char *timezone, size_t *length)
+{
+	char fname[PATH_MAX];
+	struct stat st;
+	char *p;
+	int fd;
+	
+	if (strstr(timezone, "..") != NULL) {
+		return NULL;
+	}
+
+	snprintf(fname, sizeof fname, ZONEINFO_PREFIX "/%s", timezone);
+	
+	fd = open(fname, O_RDONLY);
+	if (fd == -1) {
+		return NULL;
+	} else if (fstat(fd, &st) != 0 || st.st_size < 21) {
+		close(fd);
+		return NULL;
+	}
+
+	*length = st.st_size;
+	p = mmap(NULL, st.st_size, PROT_READ, MAP_SHARED, fd, 0);
+	close(fd);
+	
+	return p != MAP_FAILED ? p : NULL;
+}
+
+const timelib_tzdb *timelib_builtin_db(void)
+{
+	if (timezonedb_system == NULL) {
+		timelib_tzdb *tmp = malloc(sizeof *tmp);
+
+		tmp->version = "0.system";
+		tmp->data = NULL;
+		create_zone_index(tmp);
+		timezonedb_system = tmp;
+	}
+			
+	return timezonedb_system;
+}
+
+const timelib_tzdb_index_entry *timelib_timezone_builtin_identifiers_list(int *count)
+{
+	*count = timezonedb_system->index_size;
+	return timezonedb_system->index;
+}
+
+int timelib_timezone_id_is_valid(char *timezone, const timelib_tzdb *tzdb)
+{
+	char fname[PATH_MAX];
+
+	if (strstr(timezone, "..") != NULL) {
+		return 0;
+	}
+	
+	snprintf(fname, sizeof fname, ZONEINFO_PREFIX "/%s", timezone);
+
+	return access(fname, R_OK) == 0 ? 1 : 0;
+}
+
+timelib_tzinfo *timelib_parse_tzfile(char *timezone, const timelib_tzdb *tzdb)
+{
+	char *tzf, *orig;
+	timelib_tzinfo *tmp;
+	size_t len;
+
+	orig = map_tzfile(timezone, &len);
+	if (orig == NULL) {
+		return NULL;
+	}
+
+	tmp = timelib_tzinfo_ctor(timezone);
+
+	tzf = orig + 20;
+	read_header(&tzf, tmp);
+	read_transistions(&tzf, tmp);
+	read_types(&tzf, tmp);
+
+	munmap(orig, len);
+
+	return tmp;
+}
+#else /* !HAVE_SYSTEM_TZDATA */
+
 static int seek_to_tz_position(const unsigned char **tzf, char *timezone, const timelib_tzdb *tzdb)
 {
 	int left = 0, right = tzdb->index_size - 1;
@@ -269,6 +471,7 @@
 
 	return tmp;
 }
+#endif
 
 static ttinfo* fetch_timezone_offset(timelib_tzinfo *tz, timelib_sll ts, timelib_sll *transition_time)
 {
diff -Naur php-5.2.4.orig/ext/date/lib/parse_tz.c.orig php-5.2.4/ext/date/lib/parse_tz.c.orig
--- php-5.2.4.orig/ext/date/lib/parse_tz.c.orig	1970-01-01 00:00:00.000000000 +0000
+++ php-5.2.4/ext/date/lib/parse_tz.c.orig	2007-01-25 14:38:45.000000000 +0000
@@ -0,0 +1,395 @@
+/*
+   +----------------------------------------------------------------------+
+   | PHP Version 5                                                        |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1997-2007 The PHP Group                                |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.php.net/license/3_01.txt                                  |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Authors: Derick Rethans <derick@derickrethans.nl>                    |
+   +----------------------------------------------------------------------+
+ */
+
+/* $Id: parse_tz.c,v 1.20.2.6.2.12 2007/01/25 14:38:45 tony2001 Exp $ */
+
+#include "timelib.h"
+
+#include <stdio.h>
+
+#ifdef HAVE_LOCALE_H
+#include <locale.h>
+#endif
+
+#ifdef HAVE_STRING_H
+#include <string.h>
+#else
+#include <strings.h>
+#endif
+#include "timezonedb.h"
+
+#ifdef WORDS_BIGENDIAN
+#define timelib_conv_int(l) (l)
+#else
+#define timelib_conv_int(l) ((l & 0x000000ff) << 24) + ((l & 0x0000ff00) << 8) + ((l & 0x00ff0000) >> 8) + ((l & 0xff000000) >> 24)
+#endif
+
+static void read_header(char **tzf, timelib_tzinfo *tz)
+{
+	uint32_t buffer[6];
+
+	memcpy(&buffer, *tzf, sizeof(buffer));
+	tz->ttisgmtcnt = timelib_conv_int(buffer[0]);
+	tz->ttisstdcnt = timelib_conv_int(buffer[1]);
+	tz->leapcnt    = timelib_conv_int(buffer[2]);
+	tz->timecnt    = timelib_conv_int(buffer[3]);
+	tz->typecnt    = timelib_conv_int(buffer[4]);
+	tz->charcnt    = timelib_conv_int(buffer[5]);
+	*tzf += sizeof(buffer);
+}
+
+static void read_transistions(char **tzf, timelib_tzinfo *tz)
+{
+	int32_t *buffer = NULL;
+	uint32_t i;
+	unsigned char *cbuffer = NULL;
+
+	if (tz->timecnt) {
+		buffer = (int32_t*) malloc(tz->timecnt * sizeof(int32_t));
+		if (!buffer) {
+			return;
+		}
+		memcpy(buffer, *tzf, sizeof(int32_t) * tz->timecnt);
+		*tzf += (sizeof(int32_t) * tz->timecnt);
+		for (i = 0; i < tz->timecnt; i++) {
+			buffer[i] = timelib_conv_int(buffer[i]);
+		}
+
+		cbuffer = (unsigned char*) malloc(tz->timecnt * sizeof(unsigned char));
+		if (!cbuffer) {
+			return;
+		}
+		memcpy(cbuffer, *tzf, sizeof(unsigned char) * tz->timecnt);
+		*tzf += sizeof(unsigned char) * tz->timecnt;
+	}
+	
+	tz->trans = buffer;
+	tz->trans_idx = cbuffer;
+}
+
+static void read_types(char **tzf, timelib_tzinfo *tz)
+{
+	unsigned char *buffer;
+	int32_t *leap_buffer;
+	unsigned int i, j;
+
+	buffer = (unsigned char*) malloc(tz->typecnt * sizeof(unsigned char) * 6);
+	if (!buffer) {
+		return;
+	}
+	memcpy(buffer, *tzf, sizeof(unsigned char) * 6 * tz->typecnt);
+	*tzf += sizeof(unsigned char) * 6 * tz->typecnt;
+
+	tz->type = (ttinfo*) malloc(tz->typecnt * sizeof(struct ttinfo));
+	if (!tz->type) {
+		return;
+	}
+
+	for (i = 0; i < tz->typecnt; i++) {
+		j = i * 6;
+		tz->type[i].offset = (buffer[j] * 16777216) + (buffer[j + 1] * 65536) + (buffer[j + 2] * 256) + buffer[j + 3];
+		tz->type[i].isdst = buffer[j + 4];
+		tz->type[i].abbr_idx = buffer[j + 5];
+	}
+	free(buffer);
+
+	tz->timezone_abbr = (char*) malloc(tz->charcnt);
+	if (!tz->timezone_abbr) {
+		return;
+	}
+	memcpy(tz->timezone_abbr, *tzf, sizeof(char) * tz->charcnt);
+	*tzf += sizeof(char) * tz->charcnt;
+
+	leap_buffer = (int32_t *) malloc(tz->leapcnt * 2 * sizeof(int32_t));
+	if (!leap_buffer) {
+		return;
+	}
+	memcpy(leap_buffer, *tzf, sizeof(int32_t) * tz->leapcnt * 2);
+	*tzf += sizeof(int32_t) * tz->leapcnt * 2;
+
+	tz->leap_times = (tlinfo*) malloc(tz->leapcnt * sizeof(tlinfo));
+	if (!tz->leap_times) {
+		return;
+	}
+	for (i = 0; i < tz->leapcnt; i++) {
+		tz->leap_times[i].trans = timelib_conv_int(leap_buffer[i * 2]);
+		tz->leap_times[i].offset = timelib_conv_int(leap_buffer[i * 2 + 1]);
+	}
+	free(leap_buffer);
+	
+	buffer = (unsigned char*) malloc(tz->ttisstdcnt * sizeof(unsigned char));
+	if (!buffer) {
+		return;
+	}
+	memcpy(buffer, *tzf, sizeof(unsigned char) * tz->ttisstdcnt);
+	*tzf += sizeof(unsigned char) * tz->ttisstdcnt;
+
+	for (i = 0; i < tz->ttisstdcnt; i++) {
+		tz->type[i].isstdcnt = buffer[i];
+	}
+	free(buffer);
+
+	buffer = (unsigned char*) malloc(tz->ttisgmtcnt * sizeof(unsigned char));
+	if (!buffer) {
+		return;
+	}
+	memcpy(buffer, *tzf, sizeof(unsigned char) * tz->ttisgmtcnt);
+	*tzf += sizeof(unsigned char) * tz->ttisgmtcnt;
+
+	for (i = 0; i < tz->ttisgmtcnt; i++) {
+		tz->type[i].isgmtcnt = buffer[i];
+	}
+	free(buffer);
+}
+
+void timelib_dump_tzinfo(timelib_tzinfo *tz)
+{
+	uint32_t i;
+
+	printf("UTC/Local count:   %lu\n", (unsigned long) tz->ttisgmtcnt);
+	printf("Std/Wall count:    %lu\n", (unsigned long) tz->ttisstdcnt);
+	printf("Leap.sec. count:   %lu\n", (unsigned long) tz->leapcnt);
+	printf("Trans. count:      %lu\n", (unsigned long) tz->timecnt);
+	printf("Local types count: %lu\n", (unsigned long) tz->typecnt);
+	printf("Zone Abbr. count:  %lu\n", (unsigned long) tz->charcnt);
+
+	printf ("%8s (%12s) = %3d [%5ld %1d %3d '%s' (%d,%d)]\n",
+		"", "", 0,
+		(long int) tz->type[0].offset,
+		tz->type[0].isdst,
+		tz->type[0].abbr_idx,
+		&tz->timezone_abbr[tz->type[0].abbr_idx],
+		tz->type[0].isstdcnt,
+		tz->type[0].isgmtcnt
+		);
+	for (i = 0; i < tz->timecnt; i++) {
+		printf ("%08X (%12d) = %3d [%5ld %1d %3d '%s' (%d,%d)]\n",
+			tz->trans[i], tz->trans[i], tz->trans_idx[i],
+			(long int) tz->type[tz->trans_idx[i]].offset,
+			tz->type[tz->trans_idx[i]].isdst,
+			tz->type[tz->trans_idx[i]].abbr_idx,
+			&tz->timezone_abbr[tz->type[tz->trans_idx[i]].abbr_idx],
+			tz->type[tz->trans_idx[i]].isstdcnt,
+			tz->type[tz->trans_idx[i]].isgmtcnt
+			);
+	}
+	for (i = 0; i < tz->leapcnt; i++) {
+		printf ("%08X (%12ld) = %d\n",
+			tz->leap_times[i].trans,
+			(long) tz->leap_times[i].trans,
+			tz->leap_times[i].offset);
+	}
+}
+
+static int seek_to_tz_position(const unsigned char **tzf, char *timezone, const timelib_tzdb *tzdb)
+{
+	int left = 0, right = tzdb->index_size - 1;
+#ifdef HAVE_SETLOCALE
+	char *cur_locale = NULL, *tmp;
+
+	tmp = setlocale(LC_CTYPE, NULL);
+	if (tmp) {
+		cur_locale = strdup(tmp);
+	}
+	setlocale(LC_CTYPE, "C");
+#endif	
+
+	do {
+		int mid = ((unsigned)left + right) >> 1;
+		int cmp = strcasecmp(timezone, tzdb->index[mid].id);
+
+		if (cmp < 0) {
+			right = mid - 1;
+		} else if (cmp > 0) {
+			left = mid + 1;
+		} else { /* (cmp == 0) */
+			(*tzf) = &(tzdb->data[tzdb->index[mid].pos + 20]);
+#ifdef HAVE_SETLOCALE
+			setlocale(LC_CTYPE, cur_locale);
+			if (cur_locale) free(cur_locale);
+#endif	
+			return 1;
+		}
+
+	} while (left <= right);
+
+#ifdef HAVE_SETLOCALE
+	setlocale(LC_CTYPE, cur_locale);
+	if (cur_locale) free(cur_locale);
+#endif	
+	return 0;
+}
+
+const timelib_tzdb *timelib_builtin_db(void)
+{
+	return &timezonedb_builtin;
+}
+
+const timelib_tzdb_index_entry *timelib_timezone_builtin_identifiers_list(int *count)
+{
+	*count = sizeof(timezonedb_idx_builtin) / sizeof(*timezonedb_idx_builtin);
+	return timezonedb_idx_builtin;
+}
+
+int timelib_timezone_id_is_valid(char *timezone, const timelib_tzdb *tzdb)
+{
+	const unsigned char *tzf;
+	return (seek_to_tz_position(&tzf, timezone, tzdb));
+}
+
+timelib_tzinfo *timelib_parse_tzfile(char *timezone, const timelib_tzdb *tzdb)
+{
+	const unsigned char *tzf;
+	timelib_tzinfo *tmp;
+
+	if (seek_to_tz_position(&tzf, timezone, tzdb)) {
+		tmp = timelib_tzinfo_ctor(timezone);
+
+		read_header((char**) &tzf, tmp);
+		read_transistions((char**) &tzf, tmp);
+		read_types((char**) &tzf, tmp);
+	} else {
+		tmp = NULL;
+	}
+
+	return tmp;
+}
+
+static ttinfo* fetch_timezone_offset(timelib_tzinfo *tz, timelib_sll ts, timelib_sll *transition_time)
+{
+	uint32_t i;
+
+	/* If there is no transistion time, we pick the first one, if that doesn't
+	 * exist we return NULL */
+	if (!tz->timecnt || !tz->trans) {
+		*transition_time = 0;
+		if (tz->typecnt == 1) {
+			return &(tz->type[0]);
+		}
+		return NULL;
+	}
+
+	/* If the TS is lower than the first transistion time, then we scan over
+	 * all the transistion times to find the first non-DST one, or the first
+	 * one in case there are only DST entries. Not sure which smartass came up
+	 * with this idea in the first though :) */
+	if (ts < tz->trans[0]) {
+		uint32_t j;
+
+		*transition_time = 0;
+		j = 0;
+		while (j < tz->timecnt && tz->type[j].isdst) {
+			++j;
+		}
+		if (j == tz->timecnt) {
+			j = 0;
+		}
+		return &(tz->type[j]);
+	}
+
+	/* In all other cases we loop through the available transtion times to find
+	 * the correct entry */
+	for (i = 0; i < tz->timecnt; i++) {
+		if (ts < tz->trans[i]) {
+			*transition_time = tz->trans[i - 1];
+			return &(tz->type[tz->trans_idx[i - 1]]);
+		}
+	}
+	*transition_time = tz->trans[tz->timecnt - 1];
+	return &(tz->type[tz->trans_idx[tz->timecnt - 1]]);
+}
+
+static tlinfo* fetch_leaptime_offset(timelib_tzinfo *tz, timelib_sll ts)
+{
+	int i;
+
+	if (!tz->leapcnt || !tz->leap_times) {
+		return NULL;
+	}
+
+	for (i = tz->leapcnt - 1; i > 0; i--) {
+		if (ts > tz->leap_times[i].trans) {
+			return &(tz->leap_times[i]);
+		}
+	}
+	return NULL;
+}
+
+int timelib_timestamp_is_in_dst(timelib_sll ts, timelib_tzinfo *tz)
+{
+	ttinfo *to;
+	timelib_sll dummy;
+	
+	if ((to = fetch_timezone_offset(tz, ts, &dummy))) {
+		return to->isdst;
+	}
+	return -1;
+}
+
+timelib_time_offset *timelib_get_time_zone_info(timelib_sll ts, timelib_tzinfo *tz)
+{
+	ttinfo *to;
+	tlinfo *tl;
+	int32_t offset = 0, leap_secs = 0;
+	char *abbr;
+	timelib_time_offset *tmp = timelib_time_offset_ctor();
+	timelib_sll                transistion_time;
+
+	if ((to = fetch_timezone_offset(tz, ts, &transistion_time))) {
+		offset = to->offset;
+		abbr = &(tz->timezone_abbr[to->abbr_idx]);
+		tmp->is_dst = to->isdst;
+		tmp->transistion_time = transistion_time;
+	} else {
+		offset = 0;
+		abbr = tz->timezone_abbr;
+		tmp->is_dst = 0;
+		tmp->transistion_time = 0;
+	}
+
+	if ((tl = fetch_leaptime_offset(tz, ts))) {
+		leap_secs = -tl->offset;
+	}
+
+	tmp->offset = offset;
+	tmp->leap_secs = leap_secs;
+	tmp->abbr = abbr ? strdup(abbr) : strdup("GMT");
+
+	return tmp;
+}
+
+timelib_sll timelib_get_current_offset(timelib_time *t)
+{
+	timelib_time_offset *gmt_offset;
+	timelib_sll retval;
+			
+	switch (t->zone_type) {
+		case TIMELIB_ZONETYPE_ABBR:
+		case TIMELIB_ZONETYPE_OFFSET:
+			return t->z * 60;
+			
+		case TIMELIB_ZONETYPE_ID:
+			gmt_offset = timelib_get_time_zone_info(t->sse, t->tz_info);
+			retval = gmt_offset->offset;
+			timelib_time_offset_dtor(gmt_offset);
+			return retval;
+
+		default:
+			return 0;
+	}
+}
diff -Naur php-5.2.4.orig/ext/date/lib/timelib.m4 php-5.2.4/ext/date/lib/timelib.m4
--- php-5.2.4.orig/ext/date/lib/timelib.m4	2005-07-03 23:30:52.000000000 +0000
+++ php-5.2.4/ext/date/lib/timelib.m4	2008-10-22 13:04:09.000000000 +0000
@@ -78,3 +78,17 @@
 
 dnl Check for strtoll, atoll
 AC_CHECK_FUNCS(strtoll atoll strftime)
+
+PHP_ARG_WITH(system-tzdata, for use of system timezone data,
+[  --with-system-tzdata[=DIR]      to specify use of system timezone data],
+no, no)
+
+if test "$PHP_SYSTEM_TZDATA" != "no"; then
+   AC_DEFINE(HAVE_SYSTEM_TZDATA, 1, [Define if system timezone data is used])
+
+   if test "$PHP_SYSTEM_TZDATA" != "yes"; then
+      AC_DEFINE_UNQUOTED(HAVE_SYSTEM_TZDATA_PREFIX, "$PHP_SYSTEM_TZDATA",
+                         [Define for location of system timezone data])
+   fi
+fi
+
