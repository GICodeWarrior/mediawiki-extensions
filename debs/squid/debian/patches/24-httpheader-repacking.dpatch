#! /bin/sh /usr/share/dpatch/dpatch-run
## 24-httpheader-repacking.dpatch by  <mark@wikimedia.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad squid-2.6.16~/src/HttpHeader.c squid-2.6.16/src/HttpHeader.c
--- squid-2.6.16~/src/HttpHeader.c	2007-11-19 10:55:57.000000000 +0000
+++ squid-2.6.16/src/HttpHeader.c	2007-11-19 10:58:57.000000000 +0000
@@ -141,6 +141,8 @@
 };
 static HttpHeaderFieldInfo *Headers = NULL;
 
+static void httpHeaderPrint(const HttpHeader *hdr);
+
 /*
  * headers with field values defined as #(values) in HTTP/1.1
  * Headers that are currently not recognized, are commented out.
@@ -380,12 +382,32 @@
     }
 }
 
+static void
+httpHeaderRepack(HttpHeader *hdr)
+{
+    HttpHeaderPos dp = HttpHeaderInitPos;
+    HttpHeaderPos pos = HttpHeaderInitPos;
+
+    /* XXX breaks layering for now! */
+    dp = 0; pos = 0;
+    while (dp < hdr->entries.count) {
+        for (; dp < hdr->entries.count && hdr->entries.items[dp] == NULL; dp++);
+        assert(dp < hdr->entries.count);
+        hdr->entries.items[pos] = hdr->entries.items[dp];
+        if (dp != pos)
+            hdr->entries.items[dp] = NULL;
+        pos++; dp++;
+    }
+    hdr->entries.count = pos;
+}
+
 /* use fresh entries to replace old ones */
 void
 httpHeaderUpdate(HttpHeader * old, const HttpHeader * fresh, const HttpHeaderMask * denied_mask)
 {
     const HttpHeaderEntry *e;
     HttpHeaderPos pos = HttpHeaderInitPos;
+
     assert(old && fresh);
     assert(old != fresh);
     debug(55, 7) ("updating hdr: %p <- %p\n", old, fresh);
@@ -400,6 +422,10 @@
 	    httpHeaderDelByName(old, strBuf(e->name));
 	httpHeaderAddEntry(old, httpHeaderEntryClone(e));
     }
+
+    /* And now, repack the array to "fill in the holes" */
+    /* XXX breaks layering for now! */
+    httpHeaderRepack(old);
 }
 
 /* just handy in parsing: resets and returns false */
@@ -1412,3 +1438,16 @@
     assert(id >= 0 && id < HDR_ENUM_END);
     return strBuf(Headers[id].name);
 }
+
+static void
+httpHeaderPrint(const HttpHeader *hdr)
+{
+	HttpHeaderEntry *he;
+	HttpHeaderPos i = HttpHeaderInitPos;
+
+	debug(1, 1) ("httpHeaderPrint: %p\n", hdr);
+	while ((he = httpHeaderGetEntry(hdr, &i))) {
+		debug(2, 1) ("  (%d): %s: %s\n", i, strBuf(he->name), strBuf(he->value));
+	}
+	debug(1, 1) ("httpHeaderPrint: array size %d\n", hdr->entries.count);
+}
