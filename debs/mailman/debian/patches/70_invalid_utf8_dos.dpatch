#! /bin/sh /usr/share/dpatch/dpatch-run
## 70_invalid_utf8_dos.dpatch by  <lionel@mamane.lu>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Avoid DOS if attachement filename is invalid Unicode string

@DPATCH@
diff -urNad mailman-2.1.6~/Mailman/Handlers/Scrubber.py mailman-2.1.6/Mailman/Handlers/Scrubber.py
--- mailman-2.1.6~/Mailman/Handlers/Scrubber.py	2005-12-10 12:42:44.595235636 +0100
+++ mailman-2.1.6/Mailman/Handlers/Scrubber.py	2005-12-10 12:43:13.992109519 +0100
@@ -300,7 +300,10 @@
             finally:
                 os.umask(omask)
             desc = part.get('content-description', _('not available'))
-            filename = part.get_filename(_('not available'))
+            try:
+                filename = part.get_filename(_('not available'))
+            except UnicodeDecodeError:
+                filename = _('not available')
             filename = Utils.oneline(filename, lcset)
             del part['content-type']
             del part['content-transfer-encoding']
@@ -410,7 +413,10 @@
     ctype = msg.get_content_type()
     # i18n file name is encoded
     lcset = Utils.GetCharSet(mlist.preferred_language)
-    filename = Utils.oneline(msg.get_filename(''), lcset)
+    try:
+        filename = Utils.oneline(msg.get_filename(''), lcset)
+    except UnicodeDecodeError:
+        filename = ''
     fnext = os.path.splitext(filename)[1]
     # For safety, we should confirm this is valid ext for content-type
     # but we can use fnext if we introduce fnext filtering
@@ -436,7 +442,10 @@
     try:
         # Now base the filename on what's in the attachment, uniquifying it if
         # necessary.
-        filename = msg.get_filename()
+        try:
+            filename = msg.get_filename()
+        except UnicodeDecodeError:
+            filename = None
         if not filename or mm_cfg.SCRUBBER_DONT_USE_ATTACHMENT_FILENAME:
             filebase = 'attachment'
         else:
