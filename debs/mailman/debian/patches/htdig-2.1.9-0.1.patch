Index: mailman-2.1.9/INSTALL.htdig-mm
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/INSTALL.htdig-mm	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,1558 @@
+Mailman Patch #444884 (Mailman-htdig integration) Installation Details
+----------------------------------------------------------------------
+ 
+
+The information below is also available in the INSTALL.htdig-mm.html file which
+is installed by this patch. 
+
+Table of Contents
+----------------
+ 
+
+*	Patch identification 
+*	Prerequisites 
+*	Current version 
+*	Changes introduced by this patch version 
+
+
+*	Introduction 
+*	Installing and Building Mailman with this patch 
+*	What is Installed by the Patch 
+*	Configuration of Mailman-htdig Integration 
+*	Health Warning on the packet! 
+*	Starting from Scratch (Again) 
+*	General 
+*	Permissions Considerations 
+*	htdig 
+*	Apache 
+
+
+*	Local htdig Configuration 
+*	Remote htdig Configuration 
+*	Upgrading an Existing Standard Mailman Installation 
+*	Changing from local to remote htdig or vice versa 
+*	Coping with htdig Upgrades 
+*	Changing the Addressing Scheme of your web_page_url 
+
+
+*	Operational Information 
+*	Notes and Warnings 
+*	Archive security problems resolved by htdig-2.1.3-0.2 patch 
+*	Private archive security problem prior to htdig-2.1.1-0.2.patch version 
+*	Maintaining archive security with htdig-2.1.1-0.2.patch version and later 
+*	Upgrading to htdig-2.1.1-0.2.patch or later from an earlier patch version 
+*	Redhat 7.1 and 7.2 installations 
+*	Apache/htdig issues 
+
+
+*	Contributors 
+*	History 
+*	Compatibility 
+*	Changes 
+
+
+*	Appendices 
+*	Appendix 1 -Technique for htdigging when Mailman's DEFAULT_URL uses the
+https scheme 
+
+
+
+
+Patch Identification 
+----------------
+
+Different versions of this patch are available for different versions of
+Mailman. There may be different versions of this patch for any given version of
+Mailman, typically as a results of MM version specific improvements or
+corrections of bugs in the patched code. The names of patch files for this patch
+are structured as follows: 
+
+
+    htdig-<MM-version-no>-<patch-version-no>.patch[.gz]
+ 
+
+Thus, for instance, patch file htdig-2.1.4-0.1.patch is patch version 0.1 for
+application to MM version 2.1.4 source code. 
+
+The <patch-version-no> is reset to 0.1 for the first patch version applicable to
+each new version of Mailman. 
+
+The .gz suffix, if present, says that the patch file has been compressed using
+gzip. 
+
+As a general rule, you should use the highest patch version number for the MM
+version you are installing. 
+
+Current Version 
+----------------
+
+The current version of this patch is for Mailman 2.1.7: 
+Mailman 2.1.7 	- 	htdig-2.1.7-0.1.patch 
+
+Be sure to read the notes in the cCanges section below about the patch version 
+you are going to use.
+
+Patches for previous versions of Mailman are frozen at the highest revision
+level they reached while those previous versions of MM were current. 
+
+Information about older Mailman and patch versions is given in the history
+section below. 
+
+Changes introduced by this patch version 
+----------------
+
+The following changes are introduced by version 0.1 of this patch: 
+
+*  Updated patch for MM 2.1.9 compatibility.
+*  The frequency with which extra languages are being supported by Mailman 
+   exceed my capacity to cope. From htdig-2.1.9-0.1.patch on only the English 
+   language (default) templates are guaranteed to have been patched. The 
+   following files in a language's default template directory should be checked
+   and if necessary modified per the changes made to the en language templates 
+   after  installation of this patch if that other language is used:
+                    
+       templates/<lang>/archidxfoot.html
+       templates/<lang>/archidxhead.html
+       templates/<lang>/archtoc.html
+       templates/<lang>/archtocentry.html
+       templates/<lang>/archtocnombox.html
+       templates/<lang>/article.html
+
+Prerequisites [ toc ]
+----------------
+
+A working Htdig installation
+----------------
+
+You must have a working installation of htdig with htsearch available and
+installed on either the machine on which you are running Mailman or on another
+machine which has access to Mailman list archives via NFS or some similarly
+competent network file sharing scheme. 
+
+Regardless of how you configure things to provide Mailman's Web UI, if its gives
+normal operation of the /mailman/private CGI script for providing access to
+private list archives, it should also support access to htdig search results via
+the /mailman/mmsearch and /mailman/htdig CGI scripts. 
+
+Warning: This patch has been tested with HTdig 3.1.6 and no testing has been
+done with the Beta versions of HTdig 3.2 at the time of writing. You may or may
+not encounter problems/issues not described here if you use HTdig 3.2 beta or
+stable releases. 
+
+Other Mailman patches
+---------------- 
+
+Prior to installing this patch you may also need to install the other MM
+patches. This will depend on the version of Mailman and the version of this
+patch you are dealing with. For version 0.3 of this patch for MM 2.1.3 the
+latest version of patch #444879, indexing-2.1.3-x.y.patch , is required. It is
+available from: 
+
+*
+http://sourceforge.net/tracker/index.php?func=detail&aid=444879&group_id=103&
+atid=300103 
+*	http://www.openinfo.co.uk/mailman/patches/444879/index.html 
+
+
+For any other version of this patch details of its prerequisites are in the
+version of INSTALL.htdig-mm file which is installed by that patch. 
+
+Introduction 
+----------------
+
+This integration enables use of the htdig (http://www.htdig.org) search engine
+for searching mail list archives produced by pipermail, Mailman's built-in
+archiver. 
+
+You can use htdig without applying these patches to Mailman but you may find it
+awkward to achieve some of the features offered by this patch. 
+
+The main features of the patch are: 
+
+1.	per list search facility with a search form on each list's TOC page. 
+2.	maintenance of privacy of private archives. The user has to establish their
+credentials via the normal private archive access mechanism before any access
+via htdig is allowed. 
+3.	
+
+a common base URL for both public and private archive access via htsearch
+results. This means that htdig indices are unaffected by changing an archive
+from private to public and vice versa. All access to archives via htdig is
+controlled by wrapped CGI scripts called htdig.py and mmsearch.py. 
+
+Note that Mailman's attachment scrubber creates a problem when it extracts
+attachments from messages as they are being archived because it embeds absolute
+URLs to what it has extracted in the archived messages. This can only be fixed
+by running $prefix/bin/arch to rebuild the list's archive from its mbox file
+after changing its archive from private to public or vices versa. This problem
+is generic and unrelated to the use of this patch. One way resolving it is by
+use the Mailman-MHonArc integration patch #???????? available from 
+*	TBA 
+*	http://www.openinfo.co.uk/mailman/patches/mhonarc/index.html 
+
+
+4.	a choice of running htdig on the machine running Mailman (aka local htdig)
+or running htdig on another machine which has access to Mailman's archives via
+NFS or some similarly competent network file sharing scheme (aka remote htdig). 
+5.	cron activated scripts and crontab entry to run htdig regularly to maintain
+the per list search indices. 
+6.	automatic creation, deletion and maintenance of htdig configuration files
+and such. Beyond installing htdig and telling Mailman where it is via mm_cfg you
+do not have to do much other setup. 
+7.	htdig search related web page elements are retrieved from the
+$prefix/templates/ directory hierarchy so that site, virtual host, list and
+language tailoring of them can be done. 
+
+
+Installing and Building Mailman with this patch 
+----------------
+
+Create your Mailman build directory in the normal way. 
+
+You can apply the patch to either a fresh expansion of the Mailman source
+distribution or the one you used to build a currently working Mailman
+installation. 
+
+Execute the following command in the Mailman build directory: 
+
+
+    patch -p1 < path-to-htdig-2.m.n-x.y.patch
+ 
+
+Follow the configure and make procedures for regular Mailman as given in the
+$build/INSTALL file. 
+
+Then follow the Mailman-htdig configuration instructions given below. 
+
+What is Installed by the Patch 
+----------------
+The patch amends:
+ 
+
+$build/INSTALL 
+
+Adds a reference to this file to the standard installation notes. 
+
+$prefix/bin/check_perms 
+
+To set the permissions for access to $prefix/archive/private/<listname>/htdig/
+subdirectories to 2770. This prevents access by 'other', as a security measure. 
+
+$prefix/Mailman/Archiver/HyperArch.py 
+
+The changes in this file set up the per list htdig stuff such as config files
+and adds the search forms to the list TOC pages. 
+
+$prefix/Mailman/Queue/ArchRunner.py 
+
+The changes in this file rewrite a list's TOC page if, when archiving a new
+message for the list, the update time of the list's TOC page are after the last
+time that rundig was last run. This is is only of relevance when one of the
+remote_nightly_htdig series of cron scripts (see below) is being used. 
+
+The only deficiency with this approach is that if no message is sent to the list
+after rundig is run for the list the TOC page is not rewritten to reflect that
+rundig was run. 
+
+$prefix/Mailman/Cgi/private.py 
+
+There is a security hole in the released Mailman code via which private.py will
+serve files such as a list's archive pipermail.pck and files in the list's
+archive database sub-directory. This hole also allows access to the list's
+archive htdig sub-directory. Fixes for this are applied. As htdig.py (see below)
+is based on private.py the same security fix has been incorporated into it. 
+
+$build/Mailman/Defaults.py.in 
+
+Adds the default configuration variables needed to support the mailman-htdig
+integration 
+
+$build/cron/crontab.in.in 
+
+Adds the nightly_htdig cron script to the default crontab 
+
+$build/configure 
+$build/configure.in 
+$build/Makefile.in 
+$build/cron/Makefile.in 
+$build/src/Makefile.in 
+$build/bin/Makefile.in 
+
+Changes to configuration and Makefiles used for installing Mailman 
+
+
+
+The patch adds:
+ 
+
+$build/INSTALL.htdig-mm and $build/INSTALL.htdig-mm.html 
+
+These contain the material you are reading. 
+
+$prefix/cgi-bin/htdig 
+$prefix/Mailman/Cgi/htdig.py 
+
+these are a CGI script and its wrapper, which is always on the path of URLs
+returned from searches of htdig indices. The script provides secure access to
+such URLs in the same way that the $prefix/cgi-bin/private and
+$prefix/Mailman/Cgi/private.py. Both htdig.py and private.py ensures private
+archives are kept private, applying the same criteria for permitting access.
+Additionally, htdig.py delivers material from public archives without demanding
+any authentication. 
+
+$prefix/cgi-bin/mmsearch 
+$prefix/Mailman/Cgi/mmsearch.py 
+
+these are a CGI script and its wrapper. The script acts as a security wrapper
+for htdig's htsearch CGI script. It will only run htsearch if the user is
+authorized to access a list's archive. it applies the same criteria as
+$prefix/Mailman/Cgi/private.py. In the case of local htdig operation, this
+script runs htsearch as a sub-process and returns its results. In the case of
+remote htdig operation mmsearch runs htsearch on the remote machine via one or
+other of the CGI scripts remote_mmsearch and remote-mmsearch. 
+
+$prefix/Mailman/Cgi/remote_mmsearch 
+$prefix/Mailman/Cgi/remote-mmsearch 
+
+these are companion scripts of mmsearch for use with remote htdig operation.
+They are run by mmsearch via HTTP requests, and in turn run htsearch as a sub
+process, returning the results it delivers. 
+
+$prefix/bin/blow_away_htdig 
+
+this is a utility script for removing per list htdig data, e.g. the config file
+and indices/db files. This is necessary when: 
+a.	ceasing use of the Mailman-htdig integration 
+b.	moving from local to remote htdig or vice-versa 
+c.	upgrading to a version of htdig which has an incompatible index/db file
+format 
+d.	changing the addressing scheme (http versus https) in the web_page_url
+configuration variable of a list 
+e.	reconstructing per-list htdig configuration files after upgrading to
+htdig-2.1.1-0.2.patch or later from an earlier patch version, and prior to
+running nightly_htdig 
+
+
+$prefix/cron/nightly_htdig 
+$prefix/cron/remote_nightly_htdig 
+$prefix/cron/remote_nightly_htdig_noshare 
+$prefix/cron/remote_nightly_htdig.pl 
+
+These scripts all do the same thing; they can be installed as a cron task and
+run regularly to invoke htdig's rundig script to update mailing list search
+indices. Only one of these scripts is used, the choice of which depending on
+your system configuration. 
+
+nightly_htdig is used where Mailman and htdig run on the same system. 
+
+the remote_... scripts are used where Mailman and htdig live on different
+systems. You choose which one suits your needs best: 
+
+remote_nightly_htdig uses the same python files on both systems, that is the
+same .py and .pyc files are accessed, and it hence depends on compatible
+bytecode between the Mailman system and htdig system. It also accesses Mailman
+data files and depends on compatibility of data files contents, for example
+pickled Python values. This should work OK if the same version of python is
+being run on both systems even where the systems are not heterogeneous, for
+example one is Sun/Solaris and the other is PC/Linux. 
+
+remote_nightly_htdig_noshare shares no Python files between the two systems.
+While it is still written in Python it acquires information from the file system
+using directory listings and stat operations. 
+
+remote_nightly_htdig.pl is a rewrite of remote_nightly_htdig_noshare in Perl. It
+is for use where the htdig system does not have Python available on it: in which
+case, shame on you. 
+
+$prefix/templates/en/TOC_htsearch.html 
+$prefix/templates/en/htdig_access_error.html 
+$prefix/templates/en/htdig_auth_failure.html 
+$prefix/templates/en/htdig_conf.txt 
+
+These are English language templates special to the htdig integration: 
+
+TOC_htsearch.html 
+the HTML of the search form that is embedded in a list's archive TOC page. 
+htdig_access_error.html 
+HTML page returned by mmsearch.py in the event of an access error for a page
+access. 
+htdig_auth_failure.html 
+HTML page returned by mmsearch.py in the event of an authentication error for a
+page access. 
+htdig_conf.txt 
+template for the per-list htdig.conf files generated by the patched code. 
+
+
+Configuration of Mailman-htdig Integration 
+----------------
+
+Configuration of the Mailman-htdig integration is carried out on the Mailman
+side. While you must have to hand some information about your htdig
+installation, you should not have to tinker much with htdig for the integration
+to work. 
+
+Most of the configuration of the integration is done by values assigned to
+python variables in either $prefix/Mailman/Defaults.py or
+$prefix/Mailman/mm_cfg.py. 
+
+If you opt to run htdig on a different machine or under a different HTTP server
+to the one running the HTTP server which provides Mailman's Web UI you will also
+have to edit whichever of the patch's three htdig related cron scripts you opt
+to run (remote_nightly_htdig, remote_nightly_htdig_noshare, or
+remote_nightly_htdig.pl) to add a small amount of configuration information. 
+
+Health Warning on the packet! 
+----------------
+
+Be careful when editing configuration information in $prefix/Mailman/mm_cg.py:
+the only Mailman config file you should be editing. Check, double check and then
+recheck before going ahead. If you get either variable names or their values
+wrong a lot of confusion in the operation of both Mailman and htdig can result. 
+
+You (and others supporting you) can spend hours trying to identify problems and
+looking for non-existent bugs as a consequence of such editing errors. Expect to
+find errors in these instructions; compensate for them and tell me when you do
+(r.barrett at openinfo.co.uk). 
+
+Also do read the htdig documentation, release notes etc. This patch integrates a
+working htdig with htsearch available. These notes are about Mailman and
+integrating it with that working htdig. It is up to you to sort out the htdig
+end of things. 
+
+Starting from Scratch (Again) 
+----------------
+
+This is getting ahead of things but some of you may already be asking "What if
+I've already been using an older version of this patch and want to start
+afresh?", or "I want to change from local to remote htdig or vice versa?" 
+
+In these cases your friend will be the $prefix/bin/blow_away_htdig script. It
+removes existing htdig related stuff out of your Mailman installation to the
+extent that it was added by this patch and added to by the normal operation of
+pipermail and nightly_htdig. With that removed and a revised Mailman
+configuration, the patched code will start rebuilding the htdig data. 
+
+But before you get carried away with blow_away_htdig, read the rest of these
+notes. 
+
+General 
+----------------
+
+This patch adds a number of default variables to the file
+$prefix/Mailman/Defaults.py that affect operation of the Mailman-htdig
+integration. These are in addition to the standard Mailman defaults in that
+file. If, in the light of what is said below, you decide any of these are
+incorrect, you can override them in $prefix/Mailman/mm_cfg.py [NOT IN
+Defaults.py! See the comments in Defaults.py for why]. 
+
+By default the Mailman-htdig integration is NOT ENABLED by the installation of
+this patch; the default value of the USE_HTDIG variable in Defaults.py turns off
+the operation of the integration. You have to actively override that default in
+mm_cfg.py to turn on operation of the integration. 
+
+Once a list is created, changing most of these variables will have either no
+effect or a bad effect. You will need to run $prefix/bin/blow_away_htdig script
+and/or $prefix/bin/arch to rebuild the archive pages if you make significant
+changes to the Mailman-htdig integration configuration variables. 
+
+The install process will not overwrite an existing mm_cfg.py file so you can
+freely make changes to this file. If you are re-installing a later version of
+this patch you may have to change what is already configured in the existing
+file and, if necessary, add extra configuration variables to it. 
+
+Most of the Mailman-htdig control variables default to sensible values which you
+will not need to change, especially if you are using local htdig. The semantics
+of most variables apply to both local and remote htdig operation but with some
+the values assigned will depend on whether htdig is viewing things from the same
+or a remote machine. 
+
+The first two variables control what is indexed by htdig. The values assigned
+are both embedded in the HTML generated by pipermail in the list archives and
+added. Changing the values of these variables will mean that all previously
+generated HTML pages in list archives will be out of date and you will probably
+want to rebuild existing archives using $prefix/bin/arch: 
+
+ARCHIVE_INDEXING_ENABLE 
+
+Defines a string telling htdig that it should look at the following material
+when building it indices. 
+
+
+    Default: ARCHIVE_INDEXING_ENABLE = '<!--/htdig_noindex-->'
+ 
+ARCHIVE_INDEXING_DISABLE 
+
+Defines a string telling htdig that it not should not look at the following
+material when building it indices. 
+
+
+    Default: ARCHIVE_INDEXING_DISABLE = '<!--htdig_noindex-->'
+ 
+USE_HTDIG 
+
+Semantics: 0 - don't use integrated htdig, 1 - use it 
+
+Turns Mailman-htdig integration on or off. 
+
+
+    Defaults: USE_HTDIG = 0
+
+
+Notes: 
+1.	when USE_HTDIG is turned on the patched code in Mailman will start adding
+htdig stuff for any archiving-enabled mail lists as new posts for eachlist are
+handled by Mailman. Until a new post is made after enabling with USE_HTDIG an
+existing mail list's archive will not be htdig searchable. When the new post is
+handled: 
+a.	the list's personalised htdig config file is created 
+b.	necessary links to the htdig config file are created 
+c.	a search form is added to the TOC page for the list 
+
+
+Even with this done, htdig searches only become available when htdig indices are
+constructed. This is done when one or other of the patch's htdig related cron
+scripts are run (nightly_htdig, remote_nightly_htdig,
+remote_nightly_htdig_noshare, or remote_nightly_htdig.pl, depending on how you
+configure your system). These can be run from the command line ahead of their
+scheduled cron time to get htdig searches operational. 
+
+2.	Turning USE_HTDIG off will not remove htdig indices or search forms from
+existing archive-enabled lists. It will however stop htdig features from being
+added to newly created lists. If you want to eliminate htdig from your existing
+lists then use the $prefix/bin/blow_away_htdig script. 
+
+
+
+HTDIG_FILES_URL 
+
+This is the URL of the directory containing various HTML and Graphics files
+installed by htdig; files such as buttonr.gif, buttonl.gif and button1-10.gif.
+The URL must end with a '/'. 
+
+
+    Default: HTDIG_FILES_URL = '/htdig/'
+ 
+
+The default assumes the HTTP servers providing access to htdig and to Mailman's
+web UI are on the same machine and a symbolic link called 'htdig' has been put
+into your HTTP server's top level HTML directory which points to the directory
+your htdig install has put the actual files into; this link is often to
+/usr/share/htdig. This value will depend on your htdig installation decisions
+and HTTP server's configuration files (typically /etc/httpd/httpd.conf on a late
+model Apache installation) i.e the Alias through which the link to the htdig
+files are reached. 
+
+HTDIG_CONF_LINK_DIR 
+
+This is the name of a directory in which links to list specific htdig config
+files are placed. 
+
+
+    Default: HTDIG_CONF_LINK_DIR = os.path.join(VAR_PREFIX, 'archives', 'htdig')
+ 
+
+The VAR_PREFIX of the default is resolved to an actual file system path when
+when Mailman's 'make install' is run. The 'os.path.join' creates a full file
+system path by gluing together the three pieces when Mailman is run. This
+definition puts the directory alongside the default PUBLIC_ARCHIVE_FILE_DIR and
+PRIVATE_ARCHIVE_FILE_DIR. Unless you are changing the value of these variables
+you probably do not want to change HTDIG_CONF_LINK_DIR. 
+
+HTDIG_RUNDIG_PATH 
+
+This is the path in your file system to the rundig shell script that is
+installed as part of htdig. This tells one or other of the patch's htdig related
+cron scripts (nightly_htdig and remote_nightly_htdig) where to find rundig in
+order that they can execute it. 
+
+
+    Default: HTDIG_RUNDIG_PATH = '/usr/local/bin/rundig'
+ 
+HTDIG_HTSEARCH_PATH 
+
+This is the file path to the htsearch program in the htdig package. 
+
+
+    Default: HTDIG_HTSEARCH_PATH = '/usr/local/bin/rundig'
+ 
+
+This value will depend on your htdig installation decisions. This path is used
+by either the mmsearch CGI script (for local htdig) or the
+remote_mmsearch/remote-mmsearch CGI script (for remote htdig) to execute
+htsearch as a sub-process. 
+
+HTDIG_EXCLUDED_URLS 
+
+See htdig's configuration file documentation. The value of this MM variable is
+inserted into per-list htdig.conf files when they are created as the value of an
+htdig excluded_urls directive. But if an exclusion in this value would prevent
+indexing of URLs for accessing the htdig.py cgi wrapper then that exclusion is
+omitted from that per-list htdig.conf file. 
+
+
+    Default: HTDIG_EXCLUDED_URLS = '/cgi-bin/ .cgi'
+
+
+Note: these are the same as the htdig 3.1.6 default values. 
+
+REMOTE_HTDIG 
+
+Semantics: 0 - htdig runs on local machine, 1 -on remote machine 
+
+Says whether htdig going to be run on the same machine as Mailman or on another
+machine. 
+
+
+    Default: REMOTE_HTDIG = 0
+ 
+REMOTE_PRIVATE_ARCHIVE_FILE_DIR 
+
+Only relevant if REMOTE_HTDIG = 1. It is the file system path to the directory
+in which Mailman stores private archives, as seen by the machine running htdig. 
+
+
+    Default: REMOTE_PRIVATE_ARCHIVE_FILE_DIR = os.path.join(VAR_PREFIX, 
+                                              'archives', 'private')
+ 
+
+The VAR_PREFIX of the default is resolved to an actual file system path when
+when Mailman's 'make install' is run. The 'os.path.join' creates a full file
+system path by gluing together the three pieces when Mailman is run. If you
+assign a value to this in mm_cfg.py, just put the relevant explicit file system
+path in. 
+
+REMOTE_MMSEARCH_URL 
+
+Only relevant if REMOTE_HTDIG = 1. It is the URL on the htdig machine through
+which whichever of the the remote_mmsearch/remote-mmsearch CGI scripts you have
+opted to use can be reached via an HTTP request. 
+
+
+    Default: REMOTE_MMSEARCH_URL = '/cgi-bin/remote-mmsearch'
+ 
+HTDIG_STRICT_FILE_PERM 
+
+Semantics: 0 - 'other' access allowed, 1 - 'other' access denied 
+
+Says whether 'other' has access permissions for per-list
+$prefix/private/archives/<listname>/htdig/ directories. For local htdig
+operation such access is not required and is a security hole if allowd. Such
+access may be needed if remote htdig is used; see notes on "Apache".
+$prefix/bin/check_perms should be run after changing the value of this variable
+in mm_cfg.py to update access permissions of existing directories. 
+
+
+    Defaults: HTDIG_STRICT_FILE_PERM = 1
+
+
+HTDIG_EXTRAS 
+
+You can assign a string value to this config variable and that string will be
+included in all of your site's list specific htdig configuration files when they
+are created. The value of the string can be any attribute declarations as
+defined at http://www.htdig.org/confindex.html. 
+
+Be cautious in what you do with this. Most sites will not need to use this at
+all. But if you have some idiosyncratic htdig installation it might help
+overcome problems in integrating with Mailman. If you think you need to use it I
+suggest: 
+a.	You try creating a test list without assigning a value to HTDIG_EXTRAS in
+$prefix/Mailman/mm_cfg.py 
+b.	Enable archiving for that test list. 
+c.	Send a message to the test list so that its archive is created together with
+its htdig configuration file. 
+d.	Review the content of the list's htdig conf file in
+$prefix/archives/private/<listname>/htdig/<listname>.conf. 
+e.	You will see where the default value of HTDIG_EXTRAS from
+$prefix/Mailman/Defaults.py has been inserted. This value is onlyan htdig
+comment and does nothing. 
+f.	Consider whether what you will assign to HTDIG_EXTRAS in
+$prefix/Mailman/mm_cfg.py will make sense in the context of the rest of the
+htdig conf file's contents. 
+
+
+
+
+Permissions Considerations 
+----------------
+
+htdig 
+----------------
+
+Python scripts added by this patch (nightly_htdig and its relatives) run the
+htdig rundig script identified by HTDIG_RUNDIG_PATH to build search indices for
+Mailman archives. Code added by this patch generates per-list htdig
+configuration files which are passed as a parameter to the rundig script. These
+configuration files identify a list specific directory
+($prefix/archives/private/lt;listname>/htdig) in which list specific data files
+generated by and used by htdig are to be placed. 
+
+However, the rundig script identified by HTDIG_RUNDIG_PATH may attempt to
+generate some files in htdig's COMMON_DIR when it is first run by nightly_htdig;
+the files concerned are likely to be root2word.db, word2root.db, synonyms.db and
+possibly some others generated by htidg's htfuzzy program. The standard rundig
+script generates these files selectively if they do not already exist. Depending
+on how you have installed htdig and how the rundig script is first run, there
+may be a permissions problem when nightly_hdig executes rundig under the mailman
+UID if it tries to generate these files. 
+
+You may need to either give the mailman UID write permission over htdig's
+COMMON_DIR or, before the nightly_htdig script is first run, run htdig's htfuzzy
+executable with a sufficiently privileged UID in the manner that the rundig
+script would run htfuzzy, to create any necessary files in COMMON_DIR. 
+
+See htdig's documentation for further information on this topic. 
+
+Apache 
+----------------
+
+When remote_mmsearch or remote-mmsearch scripts are used as part of a remote
+htdig strategy you may encounter a file permissions problem. This is because
+these scripts, which in turn execute htsearch as a sub-process, will be run with
+UID and GID of the remote Apache server. 
+
+By default, the permissions of the per-list
+$prefix/private/archives/<listname>/htdig/ directories only allow access for the
+mailman UID and GID and hence the remotely executed htsearch will be unable to
+access them. 
+
+If this problem is encounterd, then you will have to use the
+HTDIG_STRICT_FILE_PERM configuration variable to say "open up the permissions"
+before running $prefix/bin/check_perms. You can then use a RewriteRule or
+similar in the Apache server's httpd.conf file to restrict access to
+$prefix/private/archives/<listname>/htdig/ directories via the web server. 
+
+Local htdig Configuration 
+----------------
+
+This configuration is for when you are running Mailman, htdig, the HTTP server
+used to provide Mailman's web UI and htdig's htsearch CGI script, on the same
+machine. 
+
+You will need to: 
+
+a.	If different to the default value, add the definition of HTDIG_RUNDIG_PATH
+to file $prefix/Mailman/mm_cfg.py. 
+b.	If different to the default value, add the definition of HTDIG_HTSEARCH_PATH
+to file $prefix/Mailman/mm_cfg.py. 
+c.	Add the definition of USE_HTDIG with the value 1 to
+$prefix/Mailman/mm_cfg.py. 
+
+
+
+        USE_HTDIG = 1
+ 
+
+If necessary you can override the values of any of the other configuration
+variables in file $prefix/Mailman/mm_cfg.py. 
+
+In particular you might need to change the HTDIG_FILES_URL variable from its
+default. This URL can be just the path i.e. absolute URL on the same server as
+that which serves Mailman's Web UI, or a full URL identifying the scheme (http),
+server, server port and path, for example
+http://mailer.yourdomain.tld:8080/htdig/ 
+
+Remote htdig Configuration 
+----------------
+
+This configuration is for when you are running htdig and an HTTP server
+providing access to htsearch via remote_mmsearch or remote-mmsearch on a
+different machine to that is running Mailman. 
+
+For this configuration to work, htdig's programs, both those run from command
+lines such as rundig and those run via CGI such as htsearch, must be able to see
+Mailman archives through NFS. In the examples below we'll assume that
+/mnt/mailman-archives on the htdig machine maps to $prefix/mailman/archives on
+the Mailman machine. 
+
+You should also arrange for he mailman UID and its GID to be common to both
+machines. Remember that when rundig is called on the htdig machine to produce
+search indices for each list it will be trying to write those files via NFS in
+Mailman's archive area and will thus need to run with an appropriate identity
+and permissions. 
+
+The differences between the local and remote configuration are: 
+
+1.	configuration values telling htdig where to find files are as viewed from
+the remote machine. 
+2.	configuration values giving URLs that refer to htdiggy things have to be as
+viewed from the Mailman machine. 
+
+
+You will need to: 
+
+1.	Add the definition of HTDIG_HTSEARCH_PATH to file $prefix/Mailman/mm_cfg.py.
+This is path to htdig's htsearch on the remote machine running htdig. For
+example: 
+
+
+    HTDIG_HTSEARCH_PATH = '/usr/local/bin/htsearch'
+ 
+2.	Add the definition of HTDIG_RUNDIG_PATH to file $prefix/Mailman/mm_cfg.py.
+This is path to rundig on the remote machine running htdig. For example: 
+
+
+    HTDIG_RUNDIG_PATH = '/usr/local/bin/rundig'
+ 
+3.	Add the definition of REMOTE_MMSEARCH_URL to file $prefix/Mailman/mm_cfg.py.
+This must be a full URL referring to one of Mailman's
+remote_mmsearch/remote-mmsearch CGI scripts on the remote htdig machine, as seen
+from the Mailman local machine. For example: 
+
+
+    REMOTE_MMSEARCH_URL = 'http://htdiggy.your.com/cgi-bin/remote-mmsearch'
+ 
+4.	Add the definition of HTDIG_FILES_URL to file $prefix/Mailman/mm_cfg.py.
+This must be a full URL referring to the directory containing htdig files on the
+remote htdig machine as seen from the Mailman local machine. This URL must end
+with a '/'. For example:
+
+
+    HTDIG_FILES_URL = 'http://htdiggy.your.com/htdig/'
+ 
+5.	Add the definition of REMOTE_PRIVATE_ARCHIVE_FILE_DIR to
+$prefix/Mailman/mm_cfg.py. This must be the absolute file system path to the
+directory in which Mailman stores private archives as seen by the machine
+running htdig. For example: 
+
+
+    REMOTE_PRIVATE_ARCHIVE_FILE_DIR = '/mnt/mailman-archives/private'
+ 
+6.	Add the definition of USE_HTDIG with the value 1 to
+$prefix/Mailman/mm_cfg.py. 
+
+
+    USE_HTDIG = 1
+ 
+7.	Add the definition of REMOTE_HTDIG with the value 1 to
+$prefix/Mailman/mm_cfg.py. 
+
+
+    REMOTE_HTDIG = 1
+ 
+8.	If necessary add the definition of HTDIG_STRICT_FILE_PERM with the value 0
+to $prefix/Mailman/mm_cfg.py. This may be needed it the UID/GID that Apache on
+the htdig server will run the remote mmsearch as is not mailman or in the
+mailman group. This change will open up a security hole which you may want to
+consider plugging; see under the heading "Apache permissions" for more details.
+
+
+    HTDIG_STRICT_FILE_PERM = 0
+ 
+
+
+You have to choose one of the two remote mmsearch scripts found in
+$prefix/Mailman/Cgi - remote-mmsearch (a Perl script) and remote_mmsearch (a
+Python script) - to use and transfer it to the htdig machine. You need to add
+this script to the directory in which the web server on the htdig machines
+expects to find CGI scripts. Having transferred the script to you htdig machine
+you will need to use a text editor to set the values of four configuration
+variables below the heading "Edit the following configuration variables to suit
+your installation", namely: 
+
+
+MAILTO 
+this is the default mail address for your installation. 
+VALID_IP_LIST 
+this is a list of IP numbers from which the script should accept an HTTP
+request. Normally this should be set to the IP number of your machine running
+Mailman. If the list is empty the script will accept HTTP requests from any
+machine and be vulnerable to the exploit described under the heading "Private
+archive security problem prior to htdig-2.1.1-0.2.patch version" above. 
+HTDIG_CONF_LINK_DIR 
+this is the file path to the directory in which links to list specific htdig
+config files are placed, as viewed from the remote machine running htdig. 
+HTDIG_HTSEARCH_PATH 
+this is the file path to the htsearch program in the htdig package as viewed
+from the remote machine running htdig. 
+
+
+See "What is Installed by the Patch" for an explanation of the differences
+between these remote mmsearch scripts which both do the same job: being a
+security wrapper around htdig's htsearch program to restrict searching of a
+list's archive indexes to users authorised to see the contents of that archive. 
+
+Note: You may need to change the '#!' on the first line of whichever of the
+remote-mmsearch (Perl) and remote_mmsearch (Python) scripts you opt for so that
+the correct interpreter is used for running the script on the remote htdig
+machine. You may also need to verify the supporting packages/modules used by the
+selected script are installed on that system. 
+
+
+You have to choose one of the three remote_nightly_htdig scripts found in
+$prefix/cron - remote_nightly_htdig, remote_nightly_htdig_noshare and
+remote_nightly_htdig.pl - and transfer it to the htdig machine. See above under
+heading "What is Installed by the Patch" for an explanation of the differences
+between these scripts, which all do the same basic job. You should add the
+script to the crontab for the mailman UID on the htdig machine. But first you
+need to edit the selected script to add some configuration information. What has
+to be added depends on which script you opt to use. In each case the variables
+concerned are declared near the top of the script and you just have to enter the
+appropriate values: 
+
+
+remote_nightly_htdig 
+
+you only need to set the value of the python variable MAILMAN_PATH to be the
+directory $prefix as seen from the htdig machine. The whole Mailman installation
+must be accessible via NFS in order to use this script. 
+
+remote_nightly_htdig_noshare 
+
+you need to copy the values for the following configuration variables from
+either $prefix/Mailman/mm_cfg.py or $prefix/Mailman/Defaults.py to the script:
+REMOTE_PRIVATE_ARCHIVE_FILE_DIR, HTDIG_RUNDIG_PATH. The variables declared in
+remote_nightly_htdig_noshare use the same names. This script only requires that
+the archives directory of the Mailman installation be accessible via NFS. 
+
+remote_nightly_htdig.pl 
+
+you need to copy the values for the following configuration variables from
+either $prefix/Mailman/mm_cfg.py or $prefix/Mailman/Defaults.py to the script:
+REMOTE_PRIVATE_ARCHIVE_FILE_DIR, HTDIG_RUNDIG_PATH. Being a Perl script, the
+variables in remote_nightly_htdig.pl use the same names but prefixed with the
+'$' character. This script only requires that the archives directory of the
+Mailman installation be accessible via NFS. 
+
+
+
+Note: You may need to change the '#!' on the first line of whichever of these
+scripts you opt for so that the correct interpreter is used for running the
+script on the remote htdig machine. You may also need to verify the supporting
+packages/modules used by the selected script are installed on that system. 
+
+As with the nightly_htdig script when running with local htdig, these scripts
+can be run from the command line using the mailman UID in order to get htdig to
+construct an initial set of indices. 
+
+
+Upgrading an Existing Standard Mailman Installation 
+----------------
+
+1.	You will want to suspend operation of Mailman while doing the upgrade.
+Consider doing a shutdown of the MTA delivering mail to Mailman and removing
+Mailman's crontab. 
+2.	Configure and install as described above. 
+3.	Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+4.	If your installation already has archives: 
+a.	Send a message to each of your archive-enabled lists. This will stimulate
+the setup of the new per list htdig config files in the Mailman archives. 
+b.	Consider rebuilding your existing archives with $prefix/bin/arch. This will
+embed the ARCHIVE_INDEXING_ENABLE and ARCHIVE_INDEXING_DISABLE in the
+regenerated archive pages and, after nightly_htdig has been run, give improved
+search results. 
+c.	Run the nightly_htdig script from the command line to generate an initial
+set of per-list htdig search indices. 
+
+
+Changing from local to remote htdig or vice versa 
+----------------
+
+1.	You will want to suspend operation of Mailman while making this change.
+Consider doing a shutdown of the MTA delivering mail to Mailman and removing
+Mailman's crontab. 
+2.	Run the $prefix/bin/blow_away_htdig script to remove all existing per list
+htdig config files and htdig indices/db files. 
+3.	Configure per the instructions above for the local or remote target. 
+4.	Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+5.	Send a message to each of your archive-enabled lists. This will stimulate
+the set up of the new per list htdig config files in Mailman archives. 
+6.	Run the nightly_htdig script from the command line to generate a new set of
+per list htdig search indices. 
+
+
+Coping with htdig Upgrades 
+----------------
+
+If you change the version of htdig you run, you may find that the indices built
+with the earlier version are not compatible with the newer version of htdig's
+programs. In that case do the following: 
+
+1.	You will want to suspend operation of Mailman while making this change.
+Consider doing a shutdown of the MTA delivering mail to Mailman and removing
+Mailman's crontab. 
+2.	Run the $prefix/bin/blow_away_htdig script with the -i flag to remove all
+existing per list htdig indices/db files. 
+3.	Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+4.	Run the nightly_htdig script from the command line to generate new sets of
+per-list htdig search indices. 
+
+
+Changing the Addressing Scheme of your web_page_url 
+----------------
+
+If you change the addressing scheme of the web_page_url for a list to or from
+http then you will need to rebuild the list's htdig configuration file(s) and
+the related htdig indices. Do the following: 
+
+1.	You may want to suspend operation of Mailman while making this change.
+Consider doing a shutdown of the MTA delivering mail to Mailman and removing
+Mailman's crontab. 
+2.	Run the $prefix/bin/blow_away_htdig script to remove all existing per list
+htdig material for the list(s) concerned. 
+3.	Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+4.	Send a message to each affected list to provoke reconstruction of the list's
+htdig config file(s). 
+5.	Run the nightly_htdig script from the command line to generate new sets of
+per list htdig search indices. 
+
+
+Operational Information 
+----------------
+
+If you have just turned USE_HTDIG on or just used $prefix/bin/blow_away_htdig
+(without the -i flag) there will be no per-list htdig information saved in the
+archives. 
+
+When the first post to each archive-enabled list is archived by pipermail, the
+per-list htdig config file will be constructed and some directories and links
+added to your Mailman archive directories. The htdig search form will be added
+to list's TOC page. 
+
+However, until one of the nightly_htdig scripts is run no htdig indices will be
+constructed. You can either wait for the script to run as a cron job or run it
+(while using the mailman UID) from the command line. 
+
+Notes and Warnings 
+----------------
+
+Archive security problems resolved by htdig-2.1.3-0.2 patch
+ 
+
+This patch is hopefully the final step in closing security holes in archive
+access. 
+
+In version htdig-2.1.3-0.1.patch, htdig.py was rebased on the standard MM
+release's private.py which had moved on since the snapshot of it used as the
+basis for htdig.py was originally taken. Among other things, htdig.py had been
+modified to prevent access to some files in list archive directories such as a
+list's archive pipermail.pck and files in the list's archive database
+sub-directory. 
+
+This rebasing action re-introduced to htdig.py the security holes, still extant
+in private.py despite it being later code, via which private.py would serve
+files such as a list's archive pipermail.pck and files in the list's archive
+database sub-directory. 
+
+The permissions on these files and directories mean that they are inaccessible
+via the web server using /pipermail/ URIs if a list's archive is public. 
+
+Additionally, check_perms is now modified so that the list archive htdig
+subdirectory permissions are set to 2770 by default. Prior to
+htdig-2.1.1-0.2.patch, this could not be done as the htsearch script, being run
+with uid and gid of the Apache server, could then not gain access to files in
+the htdig subdirectories. But, since the introduction of the mmsearch script,
+which runs with the mailman gid and spawns htsearch, it can. This prevents
+accees to the list archive htdig subdirectories via /pipemail/ URI's. Up until
+htdig-2.1.3-0.2.patch this could only be achieved by using a RewriteRule or
+similar in the Apache server's httpd.conf file. 
+The only residual problem is that the revised permissions on the archive htdig
+subdirectories may cause problems if the remote_mmsearch and remote-mmsearch are
+used. This is because they will be run with uid and gid of the Apache server. If
+this problem is encounterd, then you will have to manually add read and execute
+permissions for 'other' to the archive htdig subdirectories and read permission
+their contents, and then use RewriteRule or similar in the Apache server's
+httpd.conf file for protection. 
+
+The solution to this problem has been superceded in htdig-2.1.3-0.3.patch as
+follows: Introduced the HTDIG_STRICT_FILE_PERM Mailman config variable as part
+of dealing with htsearch access to per-list htdig directories permissions issue
+when operating with remote htdig. See under the "Apache" heading above. 
+
+Private archive security problem prior to htdig-2.1.1-0.2.patch version 
+----------------
+
+Versions of the Mailman-htdig integration patch installed by versions of this
+patch prior to htdig-2.1.1-0.2.patch allow a security exploit which can expose
+information, held in the per-list search indexes of private list archives, to
+unauthorised users. 
+
+Via the exploit an unauthoized user can submit a search query to htdig's
+htsearch CGI program without their having been authenticated as a user allowed
+to access the list archive concerned. The results, returned in good faith by
+htsearch, will expose some information that the user is not entitled to see. 
+
+However, the security breakdown is not complete. Attempts to follow links
+returned by htsearch, which go via the htdig CGI script installed by this patch,
+will be blocked if the user is not authorized to access the list archive. 
+
+Maintaining archive security with htdig-2.1.1-0.2.patch version and later 
+----------------
+
+With htdig-2.1.1-0.2.patch and later versions of the patch: 
+
+1.	htsearch is no longer used directly via CGI for searching list archives. 
+2.	The symbolic link named by the HTDIG_MAILMAN_LINK configuration variable is
+no longer used. Indeed, when upgrading earlier installations this symlink should
+be deleted and the configuration variable deleted. Without this symlink, on a
+normally configured system, htsearch no longer has the unaided ability to access
+the per-list htdig configuration and other list archive associated files. 
+3.	Thus, even if htsearch can be reached via CGI, it cannot undertake a search
+of list archives when requested to do so by an HTTP request which seeks to
+circumvent list archive security. 
+4.	A new script, $prefix/Mailman/Cgi/mmsearch.py, is now used to search list
+archives. This script applies the same user authentication as private.py and
+htdig.py. Only if a user is authorised to access a list, does mmsearch use
+htdig's htsearch to search a list's archive. In this case, mmsearch provides
+htsearch with the information it needs to access the per-list htdig
+configuration and other list archive associated files. 
+5.	Where htidg and Mailman are run on the same machine, mmsearch acts as a
+security wrapper, runs htsearch as a sub-process and list security is preserved
+by this means. 
+6.	Where htdig is run on a different machine to Mailman, mmsearch can perform
+user authentication but has problems in acting as a security wrapper for
+htsearch. The solution adopted is for one of two companion CGI scripts
+(remote-mmsearch written in Perl or remote_mmsearch written in Python) to be
+invoked on the remote htdig machine by an HTTP request made by mmsearch on the
+Mailman machine. These scripts run htsearch, providing it with the information
+it needs to access the per-list htdig configuration and other list archive
+associated files. But, such an HTTP request can be made by other means and thus
+the the same security exploit we are trying to avoid still exists. The only
+protection in the case of remote htdig operation is that the
+remote-mmsearch/remote_mmsearch scripts can be configured to operate only on
+HTTP requests originating from specified IP numbers. By restricting operation to
+requests originating on the Mailman server some semblance of list privacy can be
+preserved. 
+
+
+Upgrading to htdig-2.1.1-0.2.patch or later from an earlier patch version 
+----------------
+
+If you are upgrading a Mailman installation that has an earlier version of the
+the Mailman-htdig integration patch than that installed by htdig-2.1.1-0.2.patch
+or later, you need to make some changes to that installation: 
+
+1.	You must delete from your file system the symbolic link named by the
+HTDIG_MAILMAN_LINK Mailman configuration variable. This link previously gave
+htdig programs access to per list htdig configuration files. This is now done by
+other means and the symlink allows a security exploit that prejudices the
+privacy of list archives. 
+2.	You must delete the HTDIG_MAILMAN_LINK Mailman configuration variable from
+the $prefix/Mailman/mm-cfg.py file. 
+
+
+These changes are in addition to the normal installation instructions given
+below. Having configured and installed the newly patched version of Mailman you
+must: 
+
+1.	Run the script $prefix/bin/blow_away_htdig with the -c option to rebuild
+per-list htdig conf files and delete existing per-list search indexes. 
+2.	Run the $prefix/cron/nightly_htdig script from the command line to rebuild
+per-list search indexes using the revised per-list htdig conf files just created
+by blow_away_htdig. 
+
+
+Redhat 7.1 and 7.2 installations 
+----------------
+
+If you install htdig from the htdig-3.2.0 binary rpm of RH7.1/2 Binary CD 1 of 2
+you also have to install the htdig-web-3.2.0 binary rpm. This may be from RH
+7.1/2 Binary CD 2 of 2 or CD 1 of 2 depending on whether you are using actual
+CDs or downloaded CD images. 
+
+Apache/htdig issues 
+----------------
+
+htdig's graphics file must be accessible via you web server and the Mailman
+configuration variable HTDIG_FILES_URL setup accordingly. Depending on how you
+install htdig and Apache you may need to add Alias and/or ScriptAlias directives
+to you Apache configuration file to make the htdig components accessible. Check
+the Apache and htdig documentation. 
+
+Contributors 
+----------------
+
+Original author and maintainer: 
+Richard Barrett - <r.barrett at openinfo.co.uk> 
+Past bug fixes: 
+Nigel Metheringham <nigel.metheringham at vdata.co.uk> 
+Stephan Berndts <stb-mm at spline.de>
+Testers: 
+*	Mark T. Valites <valites at geneseo.edu> 
+*	Rehan van der Merwe <rehan at nha.co.za> 
+
+
+
+
+History 
+----------------
+
+Compatibility 
+----------------
+Version of patch 	Version of Mailman 
+htdig-2.1.9-0.1.patch 	Mailman 2.1.9 
+htdig-2.1.7-0.1.patch 	Mailman 2.1.7 and 2.1.8
+htdig-2.1.6-0.1.patch 	Mailman 2.1.6 
+htdig-2.1.4-0.1.patch 	Mailman 2.1.4 
+htdig-2.1.3-0.5.patch 	Mailman 2.1.3 
+htdig-2.1.3-0.4.patch 	Mailman 2.1.3 
+htdig-2.1.3-0.3.patch 	Mailman 2.1.3 
+htdig-2.1.3-0.2.patch 	Mailman 2.1.3 
+htdig-2.1.3-0.1.patch 	Mailman 2.1.3 
+htdig-2.1.2-0.4.patch 	Mailman 2.1.2 
+htdig-2.1.2-0.3.patch 	Mailman 2.1.2 
+htdig-2.1.2-0.2.patch 	Mailman 2.1.2 
+htdig-2.1.2-0.1.patch 	Mailman 2.1.2 
+htdig-2.1.1-0.5.patch 	Mailman 2.1.1 
+htdig-2.1.1-0.4.patch 	Mailman 2.1.1 
+htdig-2.1.1-0.3.patch 	Mailman 2.1.1 
+htdig-2.1.1-0.2.patch 	Mailman 2.1.1 
+htdig-2.1.1-0.1.patch 	Mailman 2.1.1 
+htdig-2.1-0.3.patch 	Mailman 2.1 
+htdig-2.1-0.2.patch 	Mailman 2.1 
+htdig-2.1-0.1.patch 	Mailman 2.1 
+htdig-2.1b6-0.1.patch 	Mailman 2.1b6 
+htdig-2.1b5-0.1.patch 	Mailman 2.1b5 
+htdig-2.1b4-0.1.patch 	Mailman 2.1b4 
+htdig-2.1b3-0.3.patch 	Mailman 2.1b3 
+htdig-2.1b3-0.2.patch 	Mailman 2.1b3 
+htdig-2.1b3-0.1.patch 	Mailman 2.1b3 
+htdig-2.1b2-0.1.patch 	Mailman 2.1b2 
+htdig-2.0.13-0.2.patch 	Mailman 2.0.13 
+htdig-2.0.13-0.1.patch 	Mailman 2.0.13 
+htdig-2.0.12-0.1.patch 	Mailman 2.0.12 
+htdig-2.0.11-0.1.patch 	Mailman 2.0.11 
+htdig-2.0.10-0.2.patch 	Mailman 2.0.10 
+htdig-2.0.10-0.1.patch 	Mailman 2.0.10 
+htdig-2.0.9-0.1.patch 	Mailman 2.0.9 
+htdig-2.0.8-0.1.patch 	Mailman 2.0.8, 2.0.7, 2.0.6 and probably 2.0.3, 2.0.4
+and 2.0.5 
+
+Changes 
+----------------
+
+htdig-2.1.9-0.1.patch:
+1.  Updated patch for MM 2.1.9 compatibility.
+
+htdig-2.1.7-0.1.patch:
+1.  Updated patch for MM 2.1.7 compatibility.
+
+htdig-2.1.6-0.1.patch:
+1.  Updated patch for MM 2.1.6 compatibility.
+    
+    Note: the templates in $build/templates/<lang>/for the following 
+    languages are NOT modified by this patch or by its precursor indexing 
+    patch: ca, eu, sr, sv
+    
+    The following files in a language's default template directory should be 
+    modified per the changes made to the en language templates after 
+    installation of this patch if that other language is used ;'
+                    
+        templates/<lang>/archidxfoot.html
+        templates/<lang>/archidxhead.html
+        templates/<lang>/archtoc.html
+        templates/<lang>/archtocentry.html
+        templates/<lang>/archtocnombox.html
+        templates/<lang>/article.html
+
+htdig-2.1.4-0.1.patch:
+1.  Updated patch for MM 2.1.4 compatibility.
+2.  Removed untranslated versions of htdig.html from per-language directories
+    under $build/templates, with the exception of the default templates/en/ 
+    directory, that were present in previous versions of this patch.
+
+htdig-2.1.3-0.5.patch:
+1.  Modified htdig.py and private.py; the security changes introduced by
+    htdig-2.1.3-0.2 patch to these scripts incorrectly  blocked access to the
+    <listname>.mbox/<listname>.mbox file. The O.5 revison of the patch corrects
+    this error. This problem and a suggested fix were pointed out to me in a
+    private email by Stephan Berndts <stb-mm at spline.de> 
+
+htdig-2.1.3-0.4.patch:
+1.  Modified htdig.py and introduced htdig.html templates. The changes mean that 
+    if the user is challenged for authentication, when the credentials are 
+    submitted and accepted, the URL requested which led to the challenge is then 
+    presented.
+
+htdig-2.1.3-0.3.patch: 
+1.	Patch documentation layout revised and simplified. 
+2.	Changes to $prefix/bin/check_perms and $prefix/Mailman/Archiver/HyperArch.py
+to improve handling of htdig subdirectory permissions if remote htdig is used.
+End result is the same as with prior patch version in the case of local htdig. 
+3.	Introduced the HTDIG_STRICT_FILE_PERM Mailman config variable as part of
+dealing with htsearch access to per-list htdig directories permissions issue
+when operating with remote htdig. See under the "Apache" heading above. 
+
+
+htdig-2.1.3-0.2.patch: 
+1.	This patch is hopefully the final step in closing security holes in archive
+access. See the discussion below under the heading "Archive security problems
+resolved by htdig-2.1.3-0.2 patch". 
+
+
+htdig-2.1.3-0.1.patch: 
+1.	updated patch for MM 2.1.3 compatibility. 
+
+
+htdig-2.1.2-0.4.patch: 
+1.	corrected error in mmsearch.py and remote_mmsearch. This caused a problem if
+https was being used for accessing the archives as a pattern match to extract
+the list name was misused. 
+
+
+htdig-2.1.2-0.3.patch: 
+1.	updates HyperArch.py so htdig related code uses quick_maketext() function
+instead of the Utils.Maketext() function. 
+
+
+htdig-2.1.2-0.2.patch: 
+1.	corrects stupid error inserted in unpublished htdig-2.1.1-0.5.patch and
+carried forward into htdig-2.1.2-0.1.patch 
+
+
+htdig-2.1.2-0.1.patch: 
+1.	updated patch for MM 2.1.2 compatibility 
+
+
+htdig-2.1.1-0.5.patch: 
+1.	with previous version the protototype htdig_conf.txt contained an htdig
+exclude_urls directive for /cgi-bin/ and .cgi. If MM is configured so that the
+URL for accessing the htdig.py cgi wrapper matches these excluded URLS (for
+instance by running ./configure with --with-cgi-ext=".cgi") then nothing gets
+indexed by rundig. The revised patch: 
+a.	makes the excluded URL configurable through a MM config variable
+HTDIG_EXCLUDED_URLS which defaults to the old hard-wired value. 
+b.	when generating a list-specific htdig.conf file a check is made against
+HTDIG_EXCLUDED_URLS and if anything in it would prevent indexing of the URL for
+accessing the htdig.py cgi wrapper for that list, it is omitted from the
+exclude_urls directive in that htdig.conf file. 
+
+
+htdig-2.1.1-0.4.patch: 
+1.	mmsearch.py and its remote kin remote-mmsearch and mm_search were overly
+restrictive on the form fields they were willing to accept. Extended the list so
+that multi-page search results worked. 
+
+
+htdig-2.1.1-0.3.patch: 
+1.	corrects silly error in raising an excpetion in mmsearch.py. This will only
+show if there is a problem with mmsearch running the htsearch program. 
+
+
+htdig-2.1.1-0.2.patch: 
+1.	This version corrects a security exploit which allowed a URL to obtain an
+htsearch results page without the user being authorised to access the list. Any
+attempt to follows links on the results page were blocked correctly by
+$prefix/Mailman/htdig.py but there was leakage of private information from the
+list's search indexes on the page returned by htdig's htsearch CGI program. The
+exploit is removed by this patch's revisions. The following sections describe
+the problem, the solution and special actions required when updating a Mailman
+installation using an earlier version of this patch: 
+a.	Private archive security problem prior to htdig-2.1.1-0.2.patch version. 
+b.	Maintaining private archive security with htdig-2.1.1-0.2.patch version and
+later. 
+c.	Upgrading to htdig-2.1.1-0.2.patch or later from an earlier patch version. 
+
+Note that there is no patch revision to deal with this security problem for MM
+2.0.13 or earlier and you should seriously consider updating to MM 2.1.x if you
+want to implement this security fix. 
+
+
+htdig-2.1.1-0.1.patch: 
+1.	No functional change. Applies without offset warnings to MM 2.1.1 
+
+
+htdig-2.1-0.3.patch: 
+1.	corrects errors in the way $prefix/Mailman/htdig.py worked out content type
+of file being returned. 
+2.	$prefix/Mailman/htdig.py adopts revised method for establishing the default
+URL introduced in 2.1 and as used in $prefix/Mailman/MailList.py 
+3.	removed unecessary setup of variable DEFAULT_URL in cron scripts
+$prefix/cron/remote_nightly_htdig_noshare and
+$prefix/cron/remote_nightly_htdig.pl 
+4.	Changes references to DEFAULT_URL in this document to DEFAULT_URL_PATTERN. 
+
+
+htdig-2.1-0.2.patch: 
+1.	improved content type and security handling in $prefix/Mailman/htdig.py.
+Fixes bug with htdig.py and problem of interaction with bug in
+$prefix/scripts/driver script (see patch #668685 for more details) 
+
+
+htdig-2.1-0.1.patch: 
+1.	Reworked patch for compatibility with MM 2.1. 
+
+
+htdig-2.1b6-0.1.patch: 
+1.	Reworked patch for compatibility with MM 2.1b6. 
+
+
+htdig-2.1b5-0.1.patch: 
+1.	Reworked patch for compatibility with MM 2.1b5. 
+
+
+htdig-2.1b4-0.1.patch: 
+1.	Reworked patch for compatibility with MM 2.1b4. As a consequence, the
+remainder of the mailman-htdig integration templates that were strings declared
+in Mailman/Archiver/HyperArch.py have been extracted into files under the
+templates directory. Edit these with care if you must. 
+
+
+htdig-2.1b3-0.3.patch: 
+1.	Removed unecessary code dependency on Python 2.2 file() function 
+
+
+htdig-2.1b3-0.2.patch: 
+1.	Removed syntax error in htdig-2.1b3-0.1.patch which showed up as logged
+errors in the operation of the ArchRunner qrunner at line 721 of HyperArch.py 
+
+
+htdig-2.1b3-0.1.patch: 
+1.	Reworked patch for compatibility with MM 2.1b3 
+2.	Removed non-English language template files which were acting as
+placeholders until someone actually translated them. 
+3.	Removed updateTOC.py and replaced it with an alternate mechanism in a patch
+to $prefix/Mailma/Queue/ArchRunner.py to update list TOC page after reindexing
+by htdig. This new method is only exercised when the remote_nightly_htdig series
+of cron scripts are used. 
+4.	Changes to remote_nightly_htdig series of cron scripts to reflect demise of
+updateTOC cgi script. 
+5.	Multiple instances of code hygiene and conformance to MM "standards"
+cleanup. 
+6.	Tidied up this documentation. 
+
+
+htdig-2.1b2-0.1.patch: 
+1.	reworked patch for compatibility with MM 2.1b2 
+
+
+htdig-2.0.13-0.2.patch: 
+1.	Added license header 
+
+
+htdig-2.0.13-0.1.patch: 
+1.	Rebuilt patch to get no-comment application on Mailman 2.0.13 
+
+
+htdig-2.0.12-0.1.patch: 
+1.	Rebuilt patch to get no-comment application on Mailman 2.0.12 
+2.	Added HTDIG_EXTRAS xonfig variable to allow arbitrary htdig configuration
+parameters to be specified for addition to every htdig.conf file created i.e.
+site wide additions. 
+
+
+htdig-2.0.11-0.1.patch: 
+1.	No substantive change. Simply rebuilt patch to get no-comment application on
+Mailman 2.0.11 
+
+
+htdig-2.0.10-0.2.patch: 
+1.	Python 2.2 compatibility fixes to nightly_htdig cron script and its
+relatives. Doing import * inside a function removed. 
+2.	Added note on potential problems with htdig and file permissions. 
+
+
+htdig-2.0.10-0.1.patch: 
+1.	change in src/Makefile.in to get clean patch application to MM 2.0.10 
+
+
+htdig-2.0.9-0.1.patch: 
+1.	minor cosmetic changes to get clean patch application to MM 2.0.9 
+
+
+htdig-2.0.8-0.1.patch: 
+1.	resolves a problem with the integration of htdig when the web_page_url for a
+list, which is usually the same as DEFAULT_URL from either
+$prefix/Mailman/Defaults.py or $prefix/Mailman/mm_cfg.py, when it doesn't use
+the http addressing scheme. This arises because htdig will only build indices if
+the URLs for pages use the http addressing scheme. There is a work-around for
+this problem posted in htdig's mail archives - see the copy in Appendix 1 to
+this document. 
+2.	This patch revision implements the solution documented in that e-mail. If
+non-http URLs are used by the web_page_url of a list an additional htdig
+configuration file for use by htsearch is generated. 
+3.	In all other respects the operation of the Mailman-htdig integration remains
+unchanged. There is no benefit in upgrading to this revised patch unless you
+need to use other than http addressing in your DEFAULT_URL or set other than
+http addressing in the web_page_url configuration of any of your lists. 
+4.	If changing to or from a non-http addressing scheme then the per list htdig
+config files of the lists affected and their associated htdig indices must be
+reconstructed. See the section below entitled "Changing the Addressing Scheme of
+your web_page_url" for details of how to do this. 
+
+
+htdig-2.0.6-0.3.patch: 
+1.	adds support for remote htdig, that is: running htdig on a different system
+to Mailman. 
+2.	enhances the configurability of the integration. Some of the programmed
+assumptions made in previous versions are now configurable in mm_cfg.py. The
+configuration variables concerned default to the previous fixed values so that
+this version is backwards compatible with earlier versions. 
+3.	does some minor cosmetic code changes. 
+4.	extends the associated documentation. 
+
+
+
+
+Appendices 
+----------------
+
+Appendix 1 -Technique for htdigging when Mailman's web_page_url uses the https
+scheme
+ 
+
+
+A technique for htdigging when Mailman's web_page_url uses the https 
+addressing scheme is described in this archived e-mail: 
+http://www.htdig.org/mail/1999/10/0187.html
+
+The text of that e-mail is as follows:
+
+[htdig] Re: Help about htdig indexing https files
+
+------------------------------------------------------------------------
+Gilles Detillieux (grdetil at scrc.umanitoba.ca)
+Wed, 27 Oct 1999 10:18:31 -0500 (CDT) 
+
+
+Messages sorted by: [ date ] [ thread ] [ subject ] [ author ] 
+Next message: Avi Rappoport: "[htdig] indexing SSL (was: Help building 
+the database)" 
+Previous message: Gilles Detillieux: "Re: Fw: [htdig] mutiple search 
+results" 
+In reply to: Torsten Neuer: "Re: Fw: [htdig] mutiple search results" 
+
+------------------------------------------------------------------------
+According to Edouard DESSIOUX: 
+> >Currently, htdig will not support URLs that begin with https://, even
+> >when using local_urls to bypass the server. A trick that might work 
+> >would be to index using http:// instead, but use local_urls to point 
+> >to the directory that contains the contents of the secure server. 
+> 
+> I used that, and now, when i use htsearch, it work, except the fact 
+> that all my URL are http://x.y.z/ instead of https://x.y.z/ 
+> 
+> >You'd need to use separate 
+> >configuration files for digging and searching, and use 
+> >url_part_aliases in each of these configuration files to rewrite the 
+> >http:// into https:// in the search results. 
+> 
+> This is the part i dont understand, and i would like you to explain. 
+
+
+It basically works as a search and replace. One url_part_aliases in the 
+configuration file used by htdig maps the http://x.y.z/ into some 
+special code like "*site", and another url_part_aliases in the 
+configuration file used by htsearch maps the "*site" back into the value 
+you want, i.e. https://x.y.z/. The substitution is left to right in 
+htdig, and right to left in htsearch. So, if you use the same config 
+file for both, or the same setting for both, you get back what you 
+started with (but saved some space in the database because of the 
+encoding). However, if you use two separate config files with different 
+url_part_aliases setting for htdig and htsearch, you can remap parts of 
+URLs from one substring to another. 
+
+
+I hope this makes things clearer. I thought the current description at 
+http://www.htdig.org/attrs.html#url_part_aliases was already quite 
+clear. 
+
+
+
+-- 
+Gilles R. Detillieux              E-mail: <grdetil@scrc.umanitoba.ca>
+Spinal Cord Research Centre       WWW:    
+http://www.scrc.umanitoba.ca/~grdetil
+Dept. Physiology, U. of Manitoba  Phone:  (204)789-3766
+Winnipeg, MB  R3E 3J7  (Canada)   Fax:    (204)789-3930
+------------------------------------
Index: mailman-2.1.9/INSTALL.htdig-mm.html
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/INSTALL.htdig-mm.html	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,2015 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
+<html>
+<head>
+	<title>OpenInfo Web Site</title> 
+	<meta name="Generator" content="BBEdit">
+	<meta name="Author" content="Richard Barrett">
+	<meta name="Keywords" content="">
+	<meta name="Description" content="Mailman Patch #444884">
+</head>
+<body>
+<h1 align="CENTER">Mailman Patch #444884 Installation Details</h1> 
+<p>
+	The information below is also available in the <code> INSTALL.htdig-mm </code> file which is installed by this patch. 
+</p>
+<h2><a name="toc"> Table of Contents</a></h2> 
+<ul>
+	<li>
+		<a href="#pident"> Patch identification </a> 
+	</li>
+	<li>
+		<a href="#prereq"> Prerequisites </a> 
+	</li>
+	<li>
+		<a href="#current"> Current version </a> 
+		<ul>
+			<li>
+				<a href="#updreason"> Changes introduced by this patch version </a> 
+			</li>
+		</ul>
+	</li>
+	<li>
+		<a href="#intro"> Introduction </a> 
+	</li>
+	<li>
+		<a href="#iandb"> Installing and Building Mailman with this patch </a> 
+	</li>
+	<li>
+		<a href="#what"> What is Installed by the Patch </a> 
+	</li>
+	<li>
+		<a href="#config"> Configuration of Mailman-htdig Integration </a> 
+		<ul>
+			<li>
+				<a href="#health"> Health Warning on the packet! </a> 
+			</li>
+			<li>
+				<a href="#scratch"> Starting from Scratch (Again) </a> 
+			</li>
+			<li>
+				<a href="#general"> General </a> 
+			</li>
+			<li>
+				<a href="#perms"> Permissions Considerations </a> 
+				<ul>
+					<li>
+						<a href="#htperms"> htdig </a> 
+					</li>
+					<li>
+						<a href="#aperms"> Apache </a> 
+					</li>
+				</ul>
+			</li>
+			<li>
+				<a href="#lconfig"> Local htdig Configuration </a> 
+			</li>
+			<li>
+				<a href="#rconfig"> Remote htdig Configuration </a> 
+			</li>
+			<li>
+				<a href="#upgrade"> Upgrading an Existing Standard Mailman Installation </a> 
+			</li>
+			<li>
+				<a href="#ltor"> Changing from local to remote htdig or vice versa </a> 
+			</li>
+			<li>
+				<a href="#coping"> Coping with htdig Upgrades </a> 
+			</li>
+			<li>
+				<a href="#achange"> Changing the Addressing Scheme of your web_page_url </a> 
+			</li>
+		</ul>
+	</li>
+	<li>
+		<a href="#ops"> Operational Information </a> 
+	</li>
+	<li>
+		<a href="#notes"> Notes and Warnings </a> 
+		<ul>
+			<li>
+				<a href="#secsol"> Archive security problems resolved by htdig-2.1.3-0.2 patch </a> 
+			</li>
+			<li>
+				<a href="#secprob"> Private archive security problem prior to htdig-2.1.1-0.2.patch version </a> 
+			</li>
+			<li>
+				<a href="#keepsec"> Maintaining archive security with htdig-2.1.1-0.2.patch version and later </a> 
+			</li>
+			<li>
+				<a href="#secupgd"> Upgrading to htdig-2.1.1-0.2.patch or later from an earlier patch version </a> 
+			</li>
+			<li>
+				<a href="#redhat7">Redhat 7.1 and 7.2 installations</a> 
+			</li>
+			<li>
+				<a href="#apachehtdig">Apache/htdig issues</a> 
+			</li>
+		</ul>
+	</li>
+	<li>
+		<a href="#contrib"> Contributors </a> 
+	</li>
+	<li>
+		<a href="#history"> History </a> 
+		<ul>
+			<li>
+				<a href="#compat"> Compatibility </a> 
+			</li>
+			<li>
+				<a href="#changes"> Changes </a> 
+			</li>
+		</ul>
+	</li>
+	<li>
+		<a href="#appendices"> Appendices </a> 
+		<ul>
+			<li>
+				<a href="#app1"> Appendix 1 -Technique for htdigging when Mailman's DEFAULT_URL uses the https scheme </a> 
+			</li>
+		</ul>
+	</li>
+</ul>
+<h2><a id="pident"> Patch Identification</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<p>
+	Different versions of this patch are available for different versions of Mailman. There may be different versions of this patch for any given version of Mailman, typically as a results of MM version specific improvements or corrections of bugs in the patched code. The names of patch files for this patch are structured as follows: 
+</p>
+<pre>
+    htdig-&lt;MM-version-no&gt;-&lt;patch-version-no&gt;.patch[.gz]</pre> 
+<p>
+	Thus, for instance, patch file <code>htdig-2.1.4-0.1.patch</code> is patch version <code>0.1</code> for application to MM version <code>2.1.4</code> source code. 
+</p>
+<p>
+	The <code> &lt;patch-version-no&gt; </code> is reset to <code> 0.1 </code> for the first patch version applicable to each new version of Mailman. 
+</p>
+<p>
+	The <code>.gz</code> suffix, if present, says that the patch file has been compressed using gzip. 
+</p>
+<p>
+	As a general rule, you should use the highest patch version number for the MM version you are installing. 
+</p>
+<h2><a id="current"> Current Version</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<p>
+	The current version of this patch is for Mailman 2.1.9: 
+</p>
+<table>
+	<tr>
+		<td nowrap>
+			Mailman 2.1.9 
+		</td>
+		<td>
+			- 
+		</td>
+		<td>
+			<code>htdig-2.1.9-0.1.patch</code>			
+		</td>
+	</tr>
+</table>
+<p>
+    Be sure to read the <a href="#changes">notes in the changes section below</a> about the patch version you are going to use.
+</p>
+<p>
+	Patches for previous versions of Mailman are frozen at the highest revision level they reached while those previous versions of MM were current. 
+</p>
+<p>
+	Information about older Mailman and patch versions is given in the <a href="#history"> history </a> section below. 
+</p>
+<h3><a id="updreason">Changes introduced by this patch version</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	The following changes are introduced by version <code>0.1</code> of this patch: 
+</p>
+<ul>
+    <li>
+        updated patch for MM 2.1.9 compatibility.
+    </li>
+</ul>
+<p>
+    The frequency with which extra languages are being supported by Mailman exceed my capacity to cope. From <code>htdig-2.1.9-0.1.patch</code> on only the English language (default) templates are guaranteed to have been patched. The following files in a language's default template directory should be checked and if necessary modified per the changes made to the en language templates after installation of this patch if that other language is used:
+</p>
+<ul>
+	<li>templates/<lang>/archidxfoot.html</li>
+	<li>templates/<lang>/archidxhead.html</li>
+	<li>templates/<lang>/archtoc.html</li>
+	<li>templates/<lang>/archtocentry.html</li>
+	<li>templates/<lang>/archtocnombox.html</li>
+	<li>templates/<lang>/article.html</li>
+</ul>
+<h2><a name="prereq"> Prerequisites</a>&nbsp;<a href="#toc">[ toc ]</a></h2><h3>A working Htdig installation</h3> 
+<p>
+	You must have a working installation of htdig with <code>htsearch</code> available and installed on either the machine on which you are running Mailman or on another machine which has access to Mailman list archives via NFS or some similarly competent network file sharing scheme. 
+</p>
+<p>
+	Regardless of how you configure things to provide Mailman's Web UI, if its gives normal operation of the <code>/mailman/private</code> CGI script for providing access to private list archives, it should also support access to htdig search results via the <code>/mailman/mmsearch</code> and <code>/mailman/htdig</code> CGI scripts. 
+</p>
+<p>
+	Warning: This patch has been tested with HTdig 3.1.6 and no testing has been done with the Beta versions of HTdig 3.2 at the time of writing. You may or may not encounter problems/issues not described here if you use HTdig 3.2 beta or stable releases. 
+</p>
+<h3>Other Mailman patches</h3> 
+<p>
+	Prior to installing this patch you may also need to install the other MM patches. This will depend on the version of Mailman and the version of this patch you are dealing with. For version <code>0.3</code> of this patch for MM 2.1.3 the latest version of patch <code>#444879</code>, 
+	<nobr>
+		<code>indexing-2.1.3-x.y.patch</code> 
+	</nobr>
+	, is required. It is available from: 
+</p>
+<ul>
+	<li>
+		<a href="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=444879&amp;group_id=103&amp;atid=300103"> 
+			<nobr>
+				http://sourceforge.net/tracker/index.php?func=detail&amp;aid=444879&amp;group_id=103&amp;atid=300103 
+			</nobr>
+		</a> 
+	</li>
+	<li>
+		<a href="http://www.openinfo.co.uk/mailman/patches/444879/index.html"> 
+			<nobr>
+				http://www.openinfo.co.uk/mailman/patches/444879/index.html 
+			</nobr>
+		</a> 
+	</li>
+</ul>
+<p>
+	For any other version of this patch details of its prerequisites are in the version of <code>INSTALL.htdig-mm</code> file which is installed by that patch. 
+</p>
+<h2><a name="intro"> Introduction</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<p>
+	This integration enables use of the htdig (<a href="http://www.htdig.org">http://www.htdig.org</a>) search engine for searching mail list archives produced by pipermail, Mailman's built-in archiver. 
+</p>
+<p>
+	You can use htdig without applying these patches to Mailman but you may find it awkward to achieve some of the features offered by this patch. 
+</p>
+<p>
+	The main features of the patch are: 
+</p>
+<ol>
+	<li>
+		per list search facility with a search form on each list's TOC page. 
+	</li>
+	<li>
+		maintenance of privacy of private archives. The user has to establish their credentials via the normal private archive access mechanism before any access via htdig is allowed. 
+	</li>
+	<li>
+		<p>
+			a common base URL for both public and private archive access via htsearch results. This means that htdig indices are unaffected by changing an archive from private to public and vice versa. All access to archives via htdig is controlled by wrapped CGI scripts called htdig.py and mmsearch.py. 
+		</p>
+		<p>
+			Note that Mailman's attachment scrubber creates a problem when it extracts attachments from messages as they are being archived because it embeds absolute URLs to what it has extracted in the archived messages. This can only be fixed by running <code>$prefix/bin/arch</code> to rebuild the list's archive from its mbox file after changing its archive from private to public or vices versa. This problem is generic and unrelated to the use of this patch. One way resolving it is by use the Mailman-MHonArc integration patch <code>#????????</code> available from 
+		</p>
+		<ul>
+			<li>
+				TBA 
+			</li>
+			<li>
+				<a href="http://www.openinfo.co.uk/mailman/patches/mhonarc/index.html"> 
+					<nobr>
+						http://www.openinfo.co.uk/mailman/patches/mhonarc/index.html 
+					</nobr>
+				</a> 
+			</li>
+		</ul>
+	</li>
+	<li>
+		a choice of running htdig on the machine running Mailman (aka local htdig) or running htdig on another machine which has access to Mailman's archives via NFS or some similarly competent network file sharing scheme (aka remote htdig). 
+	</li>
+	<li>
+		cron activated scripts and crontab entry to run htdig regularly to maintain the per list search indices. 
+	</li>
+	<li>
+		automatic creation, deletion and maintenance of htdig configuration files and such. Beyond installing htdig and telling Mailman where it is via mm_cfg you do not have to do much other setup. 
+	</li>
+	<li>
+		htdig search related web page elements are retrieved from the <code>$prefix/templates/</code> directory hierarchy so that site, virtual host, list and language tailoring of them can be done. 
+	</li>
+</ol>
+<h2><a name="iandb"> Installing and Building Mailman with this patch</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<p>
+	Create your Mailman build directory in the normal way. 
+</p>
+<p>
+	You can apply the patch to either a fresh expansion of the Mailman source distribution or the one you used to build a currently working Mailman installation. 
+</p>
+<p>
+	Execute the following command in the Mailman build directory: 
+</p>
+<pre>
+    patch -p1 &lt; path-to-htdig-2.m.n-x.y.patch</pre> 
+<p>
+	Follow the configure and make procedures for regular Mailman as given in the <code>$build/INSTALL</code> file. 
+</p>
+<p>
+	Then follow the Mailman-htdig configuration instructions given below. 
+</p>
+<h2><a name="what"> What is Installed by the Patch</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2><h3>The patch amends:</h3> 
+<dl>
+	<dt>
+		<code>$build/INSTALL</code> 
+	</dt>
+	<dd>
+		<p>
+			Adds a reference to this file to the standard installation notes. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/bin/check_perms</code> 
+	</dt>
+	<dd>
+		<p>
+			To set the permissions for access to <code>$prefix/archive/private/&lt;listname&gt;/htdig/</code> subdirectories to <code>2770</code>. This prevents access by 'other', as a security measure. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/Mailman/Archiver/HyperArch.py</code> 
+	</dt>
+	<dd>
+		<p>
+			The changes in this file set up the per list htdig stuff such as config files and adds the search forms to the list TOC pages. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/Mailman/Queue/ArchRunner.py</code> 
+	</dt>
+	<dd>
+		<p>
+			The changes in this file rewrite a list's TOC page if, when archiving a new message for the list, the update time of the list's TOC page are after the last time that <code>rundig</code> was last run. This is is only of relevance when one of the <code>remote_nightly_htdig</code> series of cron scripts (see below) is being used. 
+		</p>
+		<p>
+			The only deficiency with this approach is that if no message is sent to the list after <code>rundig</code> is run for the list the TOC page is not rewritten to reflect that rundig was run. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/Mailman/Cgi/private.py</code> 
+	</dt>
+	<dd>
+		<p>
+			There is a security hole in the released Mailman code via which <code>private.py</code> will serve files such as a list's archive <code>pipermail.pck</code> and files in the list's archive <code>database</code> sub-directory. This hole also allows access to the list's archive <code>htdig</code> sub-directory. Fixes for this are applied. As <code>htdig.py</code> (see below) is based on <code>private.py</code> the same security fix has been incorporated into it. 
+		</p>
+	</dd>
+	<dt>
+		<code>$build/Mailman/Defaults.py.in</code> 
+	</dt>
+	<dd>
+		<p>
+			Adds the default configuration variables needed to support the mailman-htdig integration 
+		</p>
+	</dd>
+	<dt>
+		<code>$build/cron/crontab.in.in</code> 
+	</dt>
+	<dd>
+		<p>
+			Adds the nightly_htdig cron script to the default crontab 
+		</p>
+	</dd>
+	<dt>
+		<code>$build/configure</code> 
+	</dt>
+	<dt>
+		<code>$build/configure.in</code> 
+	</dt>
+	<dt>
+		<code>$build/Makefile.in</code> 
+	</dt>
+	<dt>
+		<code>$build/cron/Makefile.in</code> 
+	</dt>
+	<dt>
+		<code>$build/src/Makefile.in</code> 
+	</dt>
+	<dt>
+		<code>$build/bin/Makefile.in</code> 
+	</dt>
+	<dd>
+		<p>
+			Changes to configuration and Makefiles used for installing Mailman 
+		</p>
+	</dd>
+</dl>
+<h3>The patch adds:</h3> 
+<dl>
+	<dt>
+		<code>$build/INSTALL.htdig-mm</code> and <code>$build/INSTALL.htdig-mm.html</code> 
+	</dt>
+	<dd>
+		<p>
+			These contain the material you are reading. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/cgi-bin/htdig</code> 
+	</dt>
+	<dt>
+		<code>$prefix/Mailman/Cgi/htdig.py</code> 
+	</dt>
+	<dd>
+		<p>
+			these are a CGI script and its wrapper, which is always on the path of URLs returned from searches of htdig indices. The script provides secure access to such URLs in the same way that the <code>$prefix/cgi-bin/private</code> and <code>$prefix/Mailman/Cgi/private.py</code>. Both <code>htdig.py</code> and <code>private.py</code> ensures private archives are kept private, applying the same criteria for permitting access. Additionally, <code>htdig.py</code> delivers material from public archives without demanding any authentication. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/cgi-bin/mmsearch </code> 
+	</dt>
+	<dt>
+		<code>$prefix/Mailman/Cgi/mmsearch.py</code> 
+	</dt>
+	<dd>
+		<p>
+			these are a CGI script and its wrapper. The script acts as a security wrapper for htdig's <code>htsearch</code> CGI script. It will only run <code>htsearch</code> if the user is authorized to access a list's archive. it applies the same criteria as <code>$prefix/Mailman/Cgi/private.py</code>. In the case of local htdig operation, this script runs <code>htsearch</code> as a sub-process and returns its results. In the case of remote htdig operation <code>mmsearch</code> runs <code>htsearch</code> on the remote machine via one or other of the CGI scripts <code>remote_mmsearch</code> and <code>remote-mmsearch</code>. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/Mailman/Cgi/remote_mmsearch</code> 
+	</dt>
+	<dt>
+		<code>$prefix/Mailman/Cgi/remote-mmsearch</code> 
+	</dt>
+	<dd>
+		<p>
+			these are companion scripts of <code>mmsearch</code> for use with remote htdig operation. They are run by <code>mmsearch</code> via HTTP requests, and in turn run <code>htsearch</code> as a sub process, returning the results it delivers. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/bin/blow_away_htdig</code> 
+	</dt>
+	<dd>
+		<p>
+			this is a utility script for removing per list htdig data, e.g. the config file and indices/db files. This is necessary when: 
+		</p>
+		<ol type="a">
+			<li>
+				ceasing use of the Mailman-htdig integration 
+			</li>
+			<li>
+				moving from local to remote htdig or vice-versa 
+			</li>
+			<li>
+				upgrading to a version of htdig which has an incompatible index/db file format 
+			</li>
+			<li>
+				changing the addressing scheme (http versus https) in the web_page_url configuration variable of a list 
+			</li>
+			<li>
+				reconstructing per-list htdig configuration files after upgrading to <code>htdig-2.1.1-0.2.patch</code> or later from an earlier patch version, and prior to running <code>nightly_htdig</code> 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>$prefix/cron/nightly_htdig</code> 
+	</dt>
+	<dt>
+		<code>$prefix/cron/remote_nightly_htdig</code> 
+	</dt>
+	<dt>
+		<code>$prefix/cron/remote_nightly_htdig_noshare</code> 
+	</dt>
+	<dt>
+		<code>$prefix/cron/remote_nightly_htdig.pl</code> 
+	</dt>
+	<dd>
+		<p>
+			These scripts all do the same thing; they can be installed as a cron task and run regularly to invoke htdig's <code>rundig</code> script to update mailing list search indices. Only one of these scripts is used, the choice of which depending on your system configuration. 
+		</p>
+		<p>
+			<code>nightly_htdig</code> is used where Mailman and htdig run on the same system. 
+		</p>
+		<p>
+			the <code>remote_...</code> scripts are used where Mailman and htdig live on different systems. You choose which one suits your needs best: 
+		</p>
+		<p>
+			<code>remote_nightly_htdig</code> uses the same python files on both systems, that is the same <code>.py</code> and <code>.pyc</code> files are accessed, and it hence depends on compatible bytecode between the Mailman system and htdig system. It also accesses Mailman data files and depends on compatibility of data files contents, for example pickled Python values. This should work OK if the same version of python is being run on both systems even where the systems are not heterogeneous, for example one is Sun/Solaris and the other is PC/Linux. 
+		</p>
+		<p>
+			<code>remote_nightly_htdig_noshare</code> shares no Python files between the two systems. While it is still written in Python it acquires information from the file system using directory listings and stat operations. 
+		</p>
+		<p>
+			<code>remote_nightly_htdig.pl</code> is a rewrite of <code>remote_nightly_htdig_noshare</code> in Perl. It is for use where the htdig system does not have Python available on it: in which case, shame on you. 
+		</p>
+	</dd>
+	<dt>
+		<code>$prefix/templates/en/TOC_htsearch.html</code> 
+	</dt>
+	<dt>
+		<code>$prefix/templates/en/htdig_access_error.html</code> 
+	</dt>
+	<dt>
+		<code>$prefix/templates/en/htdig_auth_failure.html</code> 
+	</dt>
+	<dt>
+		<code>$prefix/templates/en/htdig_conf.txt</code> 
+	</dt>
+	<dd>
+		<p>
+			These are English language templates special to the htdig integration: 
+		</p>
+		<dl>
+			<dt>
+				<code>TOC_htsearch.html</code> 
+			</dt>
+			<dd>
+				the HTML of the search form that is embedded in a list's archive TOC page. 
+			</dd>
+			<dt>
+				<code>htdig_access_error.html</code> 
+			</dt>
+			<dd>
+				HTML page returned by mmsearch.py in the event of an access error for a page access. 
+			</dd>
+			<dt>
+				<code>htdig_auth_failure.html</code> 
+			</dt>
+			<dd>
+				HTML page returned by mmsearch.py in the event of an authentication error for a page access. 
+			</dd>
+			<dt>
+				<code>htdig_conf.txt</code> 
+			</dt>
+			<dd>
+				template for the per-list <code>htdig.conf</code> files generated by the patched code. 
+			</dd>
+		</dl>
+	</dd>
+</dl>
+<h2><a name="config"> Configuration of Mailman-htdig Integration</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<p>
+	Configuration of the Mailman-htdig integration is carried out on the Mailman side. While you must have to hand some information about your htdig installation, you should not have to tinker much with htdig for the integration to work. 
+</p>
+<p>
+	Most of the configuration of the integration is done by values assigned to python variables in either <code>$prefix/Mailman/Defaults.py</code> or <code>$prefix/Mailman/mm_cfg.py</code>. 
+</p>
+<p>
+	If you opt to run htdig on a different machine or under a different HTTP server to the one running the HTTP server which provides Mailman's Web UI you will also have to edit whichever of the patch's three htdig related cron scripts you opt to run (<code>remote_nightly_htdig</code>, <code>remote_nightly_htdig_noshare</code>, or <code>remote_nightly_htdig.pl</code>) to add a small amount of configuration information. 
+</p>
+<h3><a name="health"> Health Warning on the packet!</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	Be careful when editing configuration information in <code>$prefix/Mailman/mm_cg.py</code>: the only Mailman config file you should be editing. Check, double check and then recheck before going ahead. If you get either variable names or their values wrong a lot of confusion in the operation of both Mailman and htdig can result. 
+</p>
+<p>
+	You (and others supporting you) can spend hours trying to identify problems and looking for non-existent bugs as a consequence of such editing errors. Expect to find errors in these instructions; compensate for them and tell me when you do (r.barrett at openinfo.co.uk). 
+</p>
+<p>
+	Also do read the htdig documentation, release notes etc. This patch integrates a working htdig with <code>htsearch</code> available. These notes are about Mailman and integrating it with that working htdig. It is up to you to sort out the htdig end of things. 
+</p>
+<h3><a name="scratch"> Starting from Scratch (Again)</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	This is getting ahead of things but some of you may already be asking "What if I've already been using an older version of this patch and want to start afresh?", or "I want to change from local to remote htdig or vice versa?" 
+</p>
+<p>
+	In these cases your friend will be the <code>$prefix/bin/blow_away_htdig</code> script. It removes existing htdig related stuff out of your Mailman installation to the extent that it was added by this patch and added to by the normal operation of pipermail and <code>nightly_htdig</code>. With that removed and a revised Mailman configuration, the patched code will start rebuilding the htdig data. 
+</p>
+<p>
+	But before you get carried away with <code>blow_away_htdig</code>, read the rest of these notes. 
+</p>
+<h3><a name="general"> General</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	This patch adds a number of default variables to the file <code>$prefix/Mailman/Defaults.py</code> that affect operation of the Mailman-htdig integration. These are in addition to the standard Mailman defaults in that file. If, in the light of what is said below, you decide any of these are incorrect, you can override them in $<code>prefix/Mailman/mm_cfg.py</code> [NOT IN <code>Defaults.py</code>! See the comments in Defaults.py for why]. 
+</p>
+<p>
+	By default the Mailman-htdig integration is NOT ENABLED by the installation of this patch; the default value of the <code>USE_HTDIG</code> variable in <code>Defaults.py</code> turns off the operation of the integration. You have to actively override that default in <code>mm_cfg.py</code> to turn on operation of the integration. 
+</p>
+<p>
+	Once a list is created, changing most of these variables will have either no effect or a bad effect. You will need to run <code>$prefix/bin/blow_away_htdig</code> script and/or <code>$prefix/bin/arch</code> to rebuild the archive pages if you make significant changes to the Mailman-htdig integration configuration variables. 
+</p>
+<p>
+	The install process will not overwrite an existing <code>mm_cfg.py</code> file so you can freely make changes to this file. If you are re-installing a later version of this patch you may have to change what is already configured in the existing file and, if necessary, add extra configuration variables to it. 
+</p>
+<p>
+	Most of the Mailman-htdig control variables default to sensible values which you will not need to change, especially if you are using local htdig. The semantics of most variables apply to both local and remote htdig operation but with some the values assigned will depend on whether htdig is viewing things from the same or a remote machine. 
+</p>
+<p>
+	The first two variables control what is indexed by htdig. The values assigned are both embedded in the HTML generated by pipermail in the list archives and added. Changing the values of these variables will mean that all previously generated HTML pages in list archives will be out of date and you will probably want to rebuild existing archives using <code>$prefix/bin/arch</code>: 
+</p>
+<dl>
+	<dt>
+		<code>ARCHIVE_INDEXING_ENABLE</code> 
+	</dt>
+	<dd>
+		<p>
+			Defines a string telling htdig that it should look at the following material when building it indices. 
+		</p>
+<pre>
+    Default: ARCHIVE_INDEXING_ENABLE = '&lt;!--/htdig_noindex--&gt;'</pre> 
+	</dd>
+	<dt>
+		<code>ARCHIVE_INDEXING_DISABLE</code> 
+	</dt>
+	<dd>
+		<p>
+			Defines a string telling htdig that it not should not look at the following material when building it indices. 
+		</p>
+<pre>
+    Default: ARCHIVE_INDEXING_DISABLE = '&lt;!--htdig_noindex--&gt;'</pre> 
+	</dd>
+	<dt>
+		<code>USE_HTDIG</code> 
+	</dt>
+	<dd>
+		<p>
+			Semantics: 0 - don't use integrated htdig, 1 - use it 
+		</p>
+		<p>
+			Turns Mailman-htdig integration on or off. 
+		</p>
+<pre>
+    Defaults: USE_HTDIG = 0
+</pre> 
+		<p>
+			Notes: 
+		</p>
+		<ol>
+			<li>
+				<p>
+					when <code>USE_HTDIG</code> is turned on the patched code in Mailman will start adding htdig stuff for any archiving-enabled mail lists as new posts for eachlist are handled by Mailman. Until a new post is made after enabling with <code>USE_HTDIG</code> an existing mail list's archive will not be htdig searchable. When the new post is handled: 
+				</p>
+				<ol type="a">
+					<li>
+						the list's personalised htdig config file is created 
+					</li>
+					<li>
+						necessary links to the htdig config file are created 
+					</li>
+					<li>
+						a search form is added to the TOC page for the list 
+					</li>
+				</ol>
+				<p>
+					Even with this done, htdig searches only become available when htdig indices are constructed. This is done when one or other of the patch's htdig related cron scripts are run (<code>nightly_htdig</code>, <code>remote_nightly_htdig</code>, remote_nightly_htdig_noshare, or <code>remote_nightly_htdig.pl</code>, depending on how you configure your system). These can be run from the command line ahead of their scheduled cron time to get htdig searches operational. 
+				</p>
+			</li>
+			<li>
+				<p>
+					Turning <code>USE_HTDIG</code> off will not remove htdig indices or search forms from existing archive-enabled lists. It will however stop htdig features from being added to newly created lists. If you want to eliminate htdig from your existing lists then use the <code>$prefix/bin/blow_away_htdig</code> script. 
+				</p>
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>HTDIG_FILES_URL</code> 
+	</dt>
+	<dd>
+		<p>
+			This is the URL of the directory containing various HTML and Graphics files installed by htdig; files such as <code>buttonr.gif</code>, <code>buttonl.gif</code> and <code>button1-10.gif</code>. The URL must end with a '/'. 
+		</p>
+<pre>
+    Default: HTDIG_FILES_URL = '/htdig/'</pre> 
+		<p>
+			The default assumes the HTTP servers providing access to htdig and to Mailman's web UI are on the same machine and a symbolic link called 'htdig' has been put into your HTTP server's top level HTML directory which points to the directory your htdig install has put the actual files into; this link is often to <code>/usr/share/htdig</code>. This value will depend on your htdig installation decisions and HTTP server's configuration files (typically <code>/etc/httpd/httpd.conf</code> on a late model Apache installation) i.e the Alias through which the link to the htdig files are reached. 
+		</p>
+	</dd>
+	<dt>
+		<code>HTDIG_CONF_LINK_DIR</code> 
+	</dt>
+	<dd>
+		<p>
+			This is the name of a directory in which links to list specific htdig config files are placed. 
+		</p>
+<pre>
+    Default: HTDIG_CONF_LINK_DIR = os.path.join(VAR_PREFIX, 'archives', 'htdig')</pre> 
+		<p>
+			The <code>VAR_PREFIX</code> of the default is resolved to an actual file system path when when Mailman's '<code>make install</code>' is run. The '<code>os.path.join</code>' creates a full file system path by gluing together the three pieces when Mailman is run. This definition puts the directory alongside the default <code>PUBLIC_ARCHIVE_FILE_DIR</code> and <code>PRIVATE_ARCHIVE_FILE_DIR</code>. Unless you are changing the value of these variables you probably do not want to change <code>HTDIG_CONF_LINK_DIR</code>. 
+		</p>
+	</dd>
+	<dt>
+		<code>HTDIG_RUNDIG_PATH</code> 
+	</dt>
+	<dd>
+		<p>
+			This is the path in your file system to the rundig shell script that is installed as part of htdig. This tells one or other of the patch's htdig related cron scripts (<code>nightly_htdig</code> and <code>remote_nightly_htdig</code>) where to find rundig in order that they can execute it. 
+		</p>
+<pre>
+    Default: HTDIG_RUNDIG_PATH = '/usr/local/bin/rundig'</pre> 
+	</dd>
+	<dt>
+		<code>HTDIG_HTSEARCH_PATH</code> 
+	</dt>
+	<dd>
+		<p>
+			This is the file path to the <code>htsearch</code> program in the htdig package. 
+		</p>
+<pre>
+    Default: HTDIG_HTSEARCH_PATH = '/usr/local/bin/rundig'</pre> 
+		<p>
+			This value will depend on your htdig installation decisions. This path is used by either the <code>mmsearch</code> CGI script (for local htdig) or the <code>remote_mmsearch/remote-mmsearch</code> CGI script (for remote htdig) to execute <code>htsearch</code> as a sub-process. 
+		</p>
+	</dd>
+	<dt>
+		<code>HTDIG_EXCLUDED_URLS</code> 
+	</dt>
+	<dd>
+		<p>
+			See htdig's configuration file documentation. The value of this MM variable is inserted into per-list <code>htdig.conf</code> files when they are created as the value of an htdig <code>excluded_urls</code> directive. But if an exclusion in this value would prevent indexing of URLs for accessing the <code>htdig.py</code> cgi wrapper then that exclusion is omitted from that per-list <code>htdig.conf</code> file. 
+		</p>
+<pre>
+    Default: HTDIG_EXCLUDED_URLS = '/cgi-bin/ .cgi'
+</pre> 
+		<p>
+			Note: these are the same as the htdig 3.1.6 default values. 
+		</p>
+	</dd>
+	<dt>
+		<code>REMOTE_HTDIG</code> 
+	</dt>
+	<dd>
+		<p>
+			Semantics: 0 - htdig runs on local machine, 1 -on remote machine 
+		</p>
+		<p>
+			Says whether htdig going to be run on the same machine as Mailman or on another machine. 
+		</p>
+<pre>
+    Default: REMOTE_HTDIG = 0</pre> 
+	</dd>
+	<dt>
+		<code>REMOTE_PRIVATE_ARCHIVE_FILE_DI</code>R 
+	</dt>
+	<dd>
+		<p>
+			Only relevant if <code>REMOTE_HTDIG</code> = 1. It is the file system path to the directory in which Mailman stores private archives, as seen by the machine running htdig. 
+		</p>
+<pre>
+    Default: REMOTE_PRIVATE_ARCHIVE_FILE_DIR = os.path.join(VAR_PREFIX, 
+                                              'archives', 'private')</pre> 
+		<p>
+			The <code>VAR_PREFIX</code> of the default is resolved to an actual file system path when when Mailman's '<code>make install</code>' is run. The '<code>os.path.join</code>' creates a full file system path by gluing together the three pieces when Mailman is run. If you assign a value to this in <code>mm_cfg.py</code>, just put the relevant explicit file system path in. 
+		</p>
+	</dd>
+	<dt>
+		<code>REMOTE_MMSEARCH_URL</code> 
+	</dt>
+	<dd>
+		<p>
+			Only relevant if <code>REMOTE_HTDIG</code> = 1. It is the URL on the htdig machine through which whichever of the the remote_mmsearch/remote-mmsearch CGI scripts you have opted to use can be reached via an HTTP request. 
+		</p>
+<pre>
+    Default: REMOTE_MMSEARCH_URL = '/cgi-bin/remote-mmsearch'</pre> 
+	</dd>
+	<dt>
+		<code>HTDIG_STRICT_FILE_PERM</code> 
+	</dt>
+	<dd>
+		<p>
+			Semantics: 0 - 'other' access allowed, 1 - 'other' access denied 
+		</p>
+		<p>
+			Says whether 'other' has access permissions for per-list <code>$prefix/private/archives/&lt;listname&gt;/htdig/</code> directories. For local htdig operation such access is not required and is a security hole if allowd. Such access may be needed if remote htdig is used; see notes on "<a href="#aperms">Apache</a>". <code>$prefix/bin/check_perms</code> should be run after changing the value of this variable in <code>mm_cfg.py</code> to update access permissions of existing directories. 
+		</p>
+<pre>
+    Defaults: HTDIG_STRICT_FILE_PERM = 1
+</pre> 
+	</dd>
+	<dt>
+		<code>HTDIG_EXTRAS</code> 
+	</dt>
+	<dd>
+		<p>
+			You can assign a string value to this config variable and that string will be included in all of your site's list specific htdig configuration files when they are created. The value of the string can be any attribute declarations as defined at http://www.htdig.org/confindex.html. 
+		</p>
+		<p>
+			Be cautious in what you do with this. Most sites will not need to use this at all. But if you have some idiosyncratic htdig installation it might help overcome problems in integrating with Mailman. If you think you need to use it I suggest: 
+		</p>
+		<ol type="a">
+			<li>
+				You try creating a test list without assigning a value to <code>HTDIG_EXTRAS</code> in <code>$prefix/Mailman/mm_cfg.py</code> 
+			</li>
+			<li>
+				Enable archiving for that test list. 
+			</li>
+			<li>
+				Send a message to the test list so that its archive is created together with its htdig configuration file. 
+			</li>
+			<li>
+				Review the content of the list's htdig conf file in <code>$prefix/archives/private/&lt;listname&gt;/htdig/&lt;listname&gt;.conf</code>. 
+			</li>
+			<li>
+				You will see where the default value of <code>HTDIG_EXTRAS</code> from <code>$prefix/Mailman/Defaults.py</code> has been inserted. This value is onlyan htdig comment and does nothing. 
+			</li>
+			<li>
+				Consider whether what you will assign to <code>HTDIG_EXTRAS</code> in $prefix/Mailman/mm_cfg.py will make sense in the context of the rest of the htdig conf file's contents. 
+			</li>
+		</ol>
+	</dd>
+</dl>
+<h3><a name="perms">Permissions Considerations</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> <h4><a id="htperms">htdig</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h4> 
+<p>
+	Python scripts added by this patch (<code>nightly_htdig</code> and its relatives) run the htdig <code>rundig</code> script identified by <code>HTDIG_RUNDIG_PATH</code> to build search indices for Mailman archives. Code added by this patch generates per-list htdig configuration files which are passed as a parameter to the <code>rundig</code> script. These configuration files identify a list specific directory (<code>$prefix/archives/private/lt;listname&gt;/htdig</code>) in which list specific data files generated by and used by htdig are to be placed. 
+</p>
+<p>
+	However, the <code>rundig</code> script identified by <code>HTDIG_RUNDIG_PATH</code> may attempt to generate some files in htdig's <code>COMMON_DIR</code> when it is first run by <code>nightly_htdig</code>; the files concerned are likely to be <code>root2word.db</code>, <code>word2root.db</code>, s<code>ynonyms.db</code> and possibly some others generated by htidg's <code>htfuzzy</code> program. The standard <code>rundig</code> script generates these files selectively if they do not already exist. Depending on how you have installed htdig and how the <code>rundig</code> script is first run, there may be a permissions problem when <code>nightly_hdig</code> executes rundig under the mailman <code>UID</code> if it tries to generate these files. 
+</p>
+<p>
+	You may need to either give the mailman UID write permission over htdig's <code>COMMON_DIR</code> or, before the <code>nightly_htdig</code> script is first run, run htdig's <code>htfuzzy</code> executable with a sufficiently privileged <code>UID</code> in the manner that the <code>rundig</code> script would run <code>htfuzzy</code>, to create any necessary files in <code>COMMON_DIR</code>. 
+</p>
+<p>
+	See htdig's documentation for further information on this topic. 
+</p>
+<h4><a id="aperms">Apache</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h4> 
+<p>
+	When <code>remote_mmsearch</code> or <code>remote-mmsearch</code> scripts are used as part of a remote htdig strategy you may encounter a file permissions problem. This is because these scripts, which in turn execute <code>htsearch</code> as a sub-process, will be run with UID and GID of the remote Apache server. 
+</p>
+<p>
+	By default, the permissions of the per-list <code>$prefix/private/archives/&lt;listname&gt;/htdig/</code> directories only allow access for the mailman UID and GID and hence the remotely executed <code>htsearch</code> will be unable to access them. 
+</p>
+<p>
+	If this problem is encounterd, then you will have to use the <code>HTDIG_STRICT_FILE_PERM</code> configuration variable to say "open up the permissions" before running <code>$prefix/bin/check_perms</code>. You can then use a <code>RewriteRule</code> or similar in the Apache server's <code>httpd.conf</code> file to restrict access to <code>$prefix/private/archives/&lt;listname&gt;/htdig/</code> directories via the web server. 
+</p>
+<h3><a name="lconfig"> Local htdig Configuration</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	This configuration is for when you are running Mailman, htdig, the HTTP server used to provide Mailman's web UI and htdig's htsearch CGI script, on the same machine. 
+</p>
+<p>
+	You will need to: 
+</p>
+<ol type="a">
+	<li>
+		If different to the default value, add the definition of <code>HTDIG_RUNDIG_PATH</code> to file <code>$prefix/Mailman/mm_cfg.py</code>. 
+	</li>
+	<li>
+		If different to the default value, add the definition of <code>HTDIG_HTSEARCH_PATH</code> to file <code>$prefix/Mailman/mm_cfg.py</code>. 
+	</li>
+	<li>
+		Add the definition of <code>USE_HTDIG</code> with the value 1 to <code>$prefix/Mailman/mm_cfg.py</code>. 
+	</li>
+</ol>
+<pre>
+        USE_HTDIG = 1</pre> 
+<p>
+	If necessary you can override the values of any of the other configuration variables in file <code>$prefix/Mailman/mm_cfg.py</code>. 
+</p>
+<p>
+	In particular you might need to change the <code>HTDIG_FILES_URL</code> variable from its default. This URL can be just the path i.e. absolute URL on the same server as that which serves Mailman's Web UI, or a full URL identifying the scheme (http), server, server port and path, for example http://mailer.yourdomain.tld:8080/htdig/ 
+</p>
+<h3><a name="rconfig"> Remote htdig Configuration</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	This configuration is for when you are running htdig and an HTTP server providing access to <code>htsearch</code> via <code>remote_mmsearch</code> or <code>remote-mmsearch</code> on a different machine to that is running Mailman. 
+</p>
+<p>
+	For this configuration to work, htdig's programs, both those run from command lines such as <code>rundig</code> and those run via CGI such as <code>htsearch</code>, must be able to see Mailman archives through NFS. In the examples below we'll assume that <code>/mnt/mailman-archives</code> on the htdig machine maps to <code>$prefix/mailman/archives</code> on the Mailman machine. 
+</p>
+<p>
+	You should also arrange for he mailman UID and its GID to be common to both machines. Remember that when <code>rundig</code> is called on the htdig machine to produce search indices for each list it will be trying to write those files via NFS in Mailman's archive area and will thus need to run with an appropriate identity and permissions. 
+</p>
+<p>
+	The differences between the local and remote configuration are: 
+</p>
+<ol>
+	<li>
+		configuration values telling htdig where to find files are as viewed from the remote machine. 
+	</li>
+	<li>
+		configuration values giving URLs that refer to htdiggy things have to be as viewed from the Mailman machine. 
+	</li>
+</ol>
+<p>
+	You will need to: 
+</p>
+<ol>
+	<li>
+		Add the definition of <code>HTDIG_HTSEARCH_PATH</code> to file <code>$prefix/Mailman/mm_cfg.py</code>. This is path to htdig's <code>htsearch</code> on the remote machine running htdig. For example: <pre>
+    HTDIG_HTSEARCH_PATH = '/usr/local/bin/htsearch'</pre> 
+	</li>
+	<li>
+		Add the definition of <code>HTDIG_RUNDIG_PATH</code> to file <code>$prefix/Mailman/mm_cfg.py</code>. This is path to <code>rundig</code> on the remote machine running htdig. For example: <pre>
+    HTDIG_RUNDIG_PATH = '/usr/local/bin/rundig'</pre> 
+	</li>
+	<li>
+		Add the definition of <code>REMOTE_MMSEARCH_URL</code> to file <code>$prefix/Mailman/mm_cfg.py</code>. This must be a full URL referring to one of Mailman's <code>remote_mmsearch/remote-mmsearch</code> CGI scripts on the remote htdig machine, as seen from the Mailman local machine. For example: <pre>
+    REMOTE_MMSEARCH_URL = 'http://htdiggy.your.com/cgi-bin/remote-mmsearch'</pre> 
+	</li>
+	<li>
+		Add the definition of <code>HTDIG_FILES_URL</code> to file <code>$prefix/Mailman/mm_cfg.py</code>. This must be a full URL referring to the directory containing htdig files on the remote htdig machine as seen from the Mailman local machine. This URL must end with a '/'. For example:<pre>
+    HTDIG_FILES_URL = 'http://htdiggy.your.com/htdig/'</pre> 
+	</li>
+	<li>
+		Add the definition of <code>REMOTE_PRIVATE_ARCHIVE_FILE_DIR</code> to <code>$prefix/Mailman/mm_cfg.py</code>. This must be the absolute file system path to the directory in which Mailman stores private archives as seen by the machine running htdig. For example: <pre>
+    REMOTE_PRIVATE_ARCHIVE_FILE_DIR = '/mnt/mailman-archives/private'</pre> 
+	</li>
+	<li>
+		Add the definition of <code>USE_HTDIG</code> with the value 1 to $<code>prefix/Mailman/mm_cfg.py</code>. <pre>
+    USE_HTDIG = 1</pre> 
+	</li>
+	<li>
+		Add the definition of <code>REMOTE_HTDIG</code> with the value 1 to <code>$prefix/Mailman/mm_cfg.py</code>. <pre>
+    REMOTE_HTDIG = 1</pre> 
+	</li>
+	<li>
+		If necessary add the definition of <code>HTDIG_STRICT_FILE_PERM</code> with the value 0 to <code>$prefix/Mailman/mm_cfg.py</code>. This may be needed it the UID/GID that Apache on the htdig server will run the remote mmsearch as is not mailman or in the mailman group. This change will open up a security hole which you may want to consider plugging; see under the heading "<a href="#aperms">Apache permissions</a>" for more details.<pre>
+    HTDIG_STRICT_FILE_PERM = 0</pre> 
+	</li>
+</ol>
+<p>
+	You have to choose one of the two remote mmsearch scripts found in <code>$prefix/Mailman/Cgi</code> - <code>remote-mmsearch</code> (a Perl script) and <code>remote_mmsearch</code> (a Python script) - to use and transfer it to the htdig machine. You need to add this script to the directory in which the web server on the htdig machines expects to find CGI scripts. Having transferred the script to you htdig machine you will need to use a text editor to set the values of four configuration variables below the heading "Edit the following configuration variables to suit your installation", namely: 
+</p>
+<blockquote>
+	<dl>
+		<dt>
+			<code>MAILTO</code> 
+		</dt>
+		<dd>
+			this is the default mail address for your installation. 
+		</dd>
+		<dt>
+			<code>VALID_IP_LIST</code> 
+		</dt>
+		<dd>
+			this is a list of IP numbers from which the script should accept an HTTP request. Normally this should be set to the IP number of your machine running Mailman. If the list is empty the script will accept HTTP requests from any machine and be vulnerable to the exploit described under the heading <a href="#secprob">"Private archive security problem prior to <code>htdig-2.1.1-0.2.patch version</code>"</a> above. 
+		</dd>
+		<dt>
+			<code>HTDIG_CONF_LINK_DIR</code> 
+		</dt>
+		<dd>
+			this is the file path to the directory in which links to list specific htdig config files are placed, as viewed from the remote machine running htdig. 
+		</dd>
+		<dt>
+			<code>HTDIG_HTSEARCH_PATH</code> 
+		</dt>
+		<dd>
+			this is the file path to the <code>htsearch</code> program in the htdig package as viewed from the remote machine running htdig. 
+		</dd>
+	</dl>
+	<p>
+		See <a href="#what">"What is Installed by the Patch"</a> for an explanation of the differences between these remote mmsearch scripts which both do the same job: being a security wrapper around htdig's <code>htsearch</code> program to restrict searching of a list's archive indexes to users authorised to see the contents of that archive. 
+	</p>
+	<p>
+		Note: You may need to change the '<code>#!</code>' on the first line of whichever of the <code>remote-mmsearch</code> (Perl) and <code>remote_mmsearch</code> (Python) scripts you opt for so that the correct interpreter is used for running the script on the remote htdig machine. You may also need to verify the supporting packages/modules used by the selected script are installed on that system. 
+	</p>
+</blockquote>
+<p>
+	You have to choose one of the three <code>remote_nightly_htdig</code> scripts found in <code>$prefix/cron</code> - <code>remote_nightly_htdig</code>, <code>remote_nightly_htdig_noshare</code> and <code>remote_nightly_htdig.pl</code> - and transfer it to the htdig machine. See above under heading <a href="#what">"What is Installed by the Patch"</a> for an explanation of the differences between these scripts, which all do the same basic job. You should add the script to the crontab for the mailman UID on the htdig machine. But first you need to edit the selected script to add some configuration information. What has to be added depends on which script you opt to use. In each case the variables concerned are declared near the top of the script and you just have to enter the appropriate values: 
+</p>
+<blockquote>
+	<dl>
+		<dt>
+			<code>remote_nightly_htdig</code> 
+		</dt>
+		<dd>
+			<p>
+				you only need to set the value of the python variable <code>MAILMAN_PATH</code> to be the directory <code>$prefix</code> as seen from the htdig machine. The whole Mailman installation must be accessible via NFS in order to use this script. 
+			</p>
+		</dd>
+		<dt>
+			<code>remote_nightly_htdig_noshare</code> 
+		</dt>
+		<dd>
+			<p>
+				you need to copy the values for the following configuration variables from either $prefix/Mailman/mm_cfg.py or $prefix/Mailman/Defaults.py to the script: <code>REMOTE_PRIVATE_ARCHIVE_FILE_DIR</code>, <code>HTDIG_RUNDIG_PATH</code>. The variables declared in <code>remote_nightly_htdig_noshare</code> use the same names. This script only requires that the archives directory of the Mailman installation be accessible via NFS. 
+			</p>
+		</dd>
+		<dt>
+			<code>remote_nightly_htdig.pl</code> 
+		</dt>
+		<dd>
+			<p>
+				you need to copy the values for the following configuration variables from either <code>$prefix/Mailman/mm_cfg.py</code> or <code>$prefix/Mailman/Defaults.py</code> to the script: <code>REMOTE_PRIVATE_ARCHIVE_FILE_DIR</code>, <code>HTDIG_RUNDIG_PATH</code>. Being a Perl script, the variables in <code>remote_nightly_htdig.pl</code> use the same names but prefixed with the '$' character. This script only requires that the archives directory of the Mailman installation be accessible via NFS. 
+			</p>
+		</dd>
+	</dl>
+	<p>
+		Note: You may need to change the '<code>#!</code>' on the first line of whichever of these scripts you opt for so that the correct interpreter is used for running the script on the remote htdig machine. You may also need to verify the supporting packages/modules used by the selected script are installed on that system. 
+	</p>
+	<p>
+		As with the <code>nightly_htdig</code> script when running with local htdig, these scripts can be run from the command line using the mailman UID in order to get htdig to construct an initial set of indices. 
+	</p>
+</blockquote>
+<h3><a name="upgrade"> Upgrading an Existing Standard Mailman Installation</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<ol>
+	<li>
+		You will want to suspend operation of Mailman while doing the upgrade. Consider doing a shutdown of the MTA delivering mail to Mailman and removing Mailman's crontab. 
+	</li>
+	<li>
+		Configure and install as described above. 
+	</li>
+	<li>
+		Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+	</li>
+	<li>
+		If your installation already has archives: 
+		<ol type="a">
+			<li>
+				Send a message to each of your archive-enabled lists. This will stimulate the setup of the new per list htdig config files in the Mailman archives. 
+			</li>
+			<li>
+				Consider rebuilding your existing archives with <code>$prefix/bin/arch</code>. This will embed the <code>ARCHIVE_INDEXING_ENABLE</code> and <code>ARCHIVE_INDEXING_DISABLE</code> in the regenerated archive pages and, after <code>nightly_htdig</code> has been run, give improved search results. 
+			</li>
+			<li>
+				Run the nightly_htdig script from the command line to generate an initial set of per-list htdig search indices. 
+			</li>
+		</ol>
+	</li>
+</ol>
+<h3><a name="ltor"> Changing from local to remote htdig or vice versa</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<ol>
+	<li>
+		You will want to suspend operation of Mailman while making this change. Consider doing a shutdown of the MTA delivering mail to Mailman and removing Mailman's crontab. 
+	</li>
+	<li>
+		Run the <code>$prefix/bin/blow_away_htdig</code> script to remove all existing per list htdig config files and htdig indices/db files. 
+	</li>
+	<li>
+		Configure per the instructions above for the local or remote target. 
+	</li>
+	<li>
+		Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+	</li>
+	<li>
+		Send a message to each of your archive-enabled lists. This will stimulate the set up of the new per list htdig config files in Mailman archives. 
+	</li>
+	<li>
+		Run the <code>nightly_htdig</code> script from the command line to generate a new set of per list htdig search indices. 
+	</li>
+</ol>
+<h3><a name="coping"> Coping with htdig Upgrades</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	If you change the version of htdig you run, you may find that the indices built with the earlier version are not compatible with the newer version of htdig's programs. In that case do the following: 
+</p>
+<ol>
+	<li>
+		You will want to suspend operation of Mailman while making this change. Consider doing a shutdown of the MTA delivering mail to Mailman and removing Mailman's crontab. 
+	</li>
+	<li>
+		Run the <code>$prefix/bin/blow_away_htdig</code> script with the <code>-i</code> flag to remove all existing per list htdig indices/db files. 
+	</li>
+	<li>
+		Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+	</li>
+	<li>
+		Run the <code>nightly_htdig</code> script from the command line to generate new sets of per-list htdig search indices. 
+	</li>
+</ol>
+<h3><a name="achange"> Changing the Addressing Scheme of your web_page_url</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	If you change the addressing scheme of the <code>web_page_url</code> for a list to or from http then you will need to rebuild the list's htdig configuration file(s) and the related htdig indices. Do the following: 
+</p>
+<ol>
+	<li>
+		You may want to suspend operation of Mailman while making this change. Consider doing a shutdown of the MTA delivering mail to Mailman and removing Mailman's crontab. 
+	</li>
+	<li>
+		Run the <code>$prefix/bin/blow_away_htdig</code> script to remove all existing per list htdig material for the list(s) concerned. 
+	</li>
+	<li>
+		Restart Mailman's crontab and restart your MTA's delivery to Mailman. 
+	</li>
+	<li>
+		Send a message to each affected list to provoke reconstruction of the list's htdig config file(s). 
+	</li>
+	<li>
+		Run the <code>nightly_htdig</code> script from the command line to generate new sets of per list htdig search indices. 
+	</li>
+</ol>
+<h2><a name="ops"> Operational Information</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<p>
+	If you have just turned <code>USE_HTDIG</code> on or just used <code>$prefix/bin/blow_away_htdig</code> (without the <code>-i</code> flag) there will be no per-list htdig information saved in the archives. 
+</p>
+<p>
+	When the first post to each archive-enabled list is archived by pipermail, the per-list htdig config file will be constructed and some directories and links added to your Mailman archive directories. The htdig search form will be added to list's TOC page. 
+</p>
+<p>
+	However, until one of the <code>nightly_htdig</code> scripts is run no htdig indices will be constructed. You can either wait for the script to run as a cron job or run it (while using the mailman UID) from the command line. 
+</p>
+<h2><a name="notes"> Notes and Warnings</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> <h3><a id="secsol"> Archive security problems resolved by htdig-2.1.3-0.2 patch</a></h3> 
+<p>
+	This patch is hopefully the final step in closing security holes in archive access. 
+</p>
+<p>
+	In version <code>htdig-2.1.3-0.1.patch</code>, <code>htdig.py</code> was rebased on the standard MM release's <code>private.py</code> which had moved on since the snapshot of it used as the basis for <code>htdig.py</code> was originally taken. Among other things, <code>htdig.py</code> had been modified to prevent access to some files in list archive directories such as a list's archive <code>pipermail.pck</code> and files in the list's archive <code>database</code> sub-directory. 
+</p>
+<p>
+	This rebasing action re-introduced to <code>htdig.py</code> the security holes, still extant in <code>private.py</code> despite it being later code, via which <code>private.py</code> would serve files such as a list's archive <code>pipermail.pck</code> and files in the list's archive <code>database</code> sub-directory. 
+</p>
+<p>
+	The permissions on these files and directories mean that they are inaccessible via the web server using <code>/pipermail/</code> URIs if a list's archive is public. 
+</p>
+<p>
+	Additionally, <code>check_perms</code> is now modified so that the list archive <code>htdig</code> subdirectory permissions are set to 2770 by default. Prior to <code>htdig-2.1.1-0.2.patch</code>, this could not be done as the <code>htsearch</code> script, being run with uid and gid of the Apache server, could then not gain access to files in the htdig subdirectories. But, since the introduction of the <code>mmsearch</code> script, which runs with the mailman gid and spawns <code>htsearch</code>, it can. This prevents accees to the list archive <code>htdig</code> subdirectories via <code>/pipemail/</code> URI's. Up until <code>htdig-2.1.3-0.2.patch</code> this could only be achieved by using a <code>RewriteRule</code> or similar in the Apache server's <code>httpd.conf</code> file. 
+</p>
+<del>
+	The only residual problem is that the revised permissions on the archive htdig subdirectories may cause problems if the remote_mmsearch and remote-mmsearch are used. This is because they will be run with uid and gid of the Apache server. If this problem is encounterd, then you will have to manually add read and execute permissions for 'other' to the archive htdig subdirectories and read permission their contents, and then use <code>RewriteRule</code> or similar in the Apache server's <code>httpd.conf</code> file for protection. 
+</del>
+<p>
+	The solution to this problem has been superceded in <code>htdig-2.1.3-0.3.patch</code> as follows: Introduced the <code>HTDIG_STRICT_FILE_PERM</code> Mailman config variable as part of dealing with <code>htsearch</code> access to per-list <code>htdig</code> directories permissions issue when operating with remote htdig. See under the "<a href="#aperms">Apache</a>" heading above. 
+</p>
+<h3><a name="secprob"> Private archive security problem prior to htdig-2.1.1-0.2.patch version</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	Versions of the Mailman-htdig integration patch installed by versions of this patch prior to htdig-2.1.1-0.2.patch allow a security exploit which can expose information, held in the per-list search indexes of private list archives, to unauthorised users. 
+</p>
+<p>
+	Via the exploit an unauthoized user can submit a search query to htdig's htsearch CGI program without their having been authenticated as a user allowed to access the list archive concerned. The results, returned in good faith by htsearch, will expose some information that the user is not entitled to see. 
+</p>
+<p>
+	However, the security breakdown is not complete. Attempts to follow links returned by htsearch, which go via the htdig CGI script installed by this patch, will be blocked if the user is not authorized to access the list archive. 
+</p>
+<h3><a name="keepsec"> Maintaining archive security with htdig-2.1.1-0.2.patch version and later</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	With htdig-2.1.1-0.2.patch and later versions of the patch: 
+</p>
+<ol>
+	<li>
+		htsearch is no longer used directly via CGI for searching list archives. 
+	</li>
+	<li>
+		The symbolic link named by the HTDIG_MAILMAN_LINK configuration variable is no longer used. Indeed, when upgrading earlier installations this symlink should be deleted and the configuration variable deleted. Without this symlink, on a normally configured system, htsearch no longer has the unaided ability to access the per-list htdig configuration and other list archive associated files. 
+	</li>
+	<li>
+		Thus, even if htsearch can be reached via CGI, it cannot undertake a search of list archives when requested to do so by an HTTP request which seeks to circumvent list archive security. 
+	</li>
+	<li>
+		A new script, $prefix/Mailman/Cgi/mmsearch.py, is now used to search list archives. This script applies the same user authentication as private.py and htdig.py. Only if a user is authorised to access a list, does mmsearch use htdig's htsearch to search a list's archive. In this case, mmsearch provides htsearch with the information it needs to access the per-list htdig configuration and other list archive associated files. 
+	</li>
+	<li>
+		Where htidg and Mailman are run on the same machine, mmsearch acts as a security wrapper, runs htsearch as a sub-process and list security is preserved by this means. 
+	</li>
+	<li>
+		Where htdig is run on a different machine to Mailman, mmsearch can perform user authentication but has problems in acting as a security wrapper for htsearch. The solution adopted is for one of two companion CGI scripts (remote-mmsearch written in Perl or remote_mmsearch written in Python) to be invoked on the remote htdig machine by an HTTP request made by mmsearch on the Mailman machine. These scripts run htsearch, providing it with the information it needs to access the per-list htdig configuration and other list archive associated files. But, such an HTTP request can be made by other means and thus the the same security exploit we are trying to avoid still exists. The only protection in the case of remote htdig operation is that the remote-mmsearch/remote_mmsearch scripts can be configured to operate only on HTTP requests originating from specified IP numbers. By restricting operation to requests originating on the Mailman server some semblance of list privacy can be preserved. 
+	</li>
+</ol>
+<h3><a name="secupgd"> Upgrading to htdig-2.1.1-0.2.patch or later from an earlier patch version</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	If you are upgrading a Mailman installation that has an earlier version of the the Mailman-htdig integration patch than that installed by <code>htdig-2.1.1-0.2.patch</code> or later, you need to make some changes to that installation: 
+</p>
+<ol>
+	<li>
+		You must delete from your file system the symbolic link named by the <code>HTDIG_MAILMAN_LINK</code> Mailman configuration variable. This link previously gave htdig programs access to per list htdig configuration files. This is now done by other means and the symlink allows a security exploit that prejudices the privacy of list archives. 
+	</li>
+	<li>
+		You must delete the <code>HTDIG_MAILMAN_LINK</code> Mailman configuration variable from the <code>$prefix/Mailman/mm-cfg.py</code> file. 
+	</li>
+</ol>
+<p>
+	These changes are in addition to the normal installation instructions given below. Having configured and installed the newly patched version of Mailman you must: 
+</p>
+<ol>
+	<li>
+		Run the script <code>$prefix/bin/blow_away_htdig</code> with the <code>-c</code> option to rebuild per-list htdig conf files and delete existing per-list search indexes. 
+	</li>
+	<li>
+		Run the <code>$prefix/cron/nightly_htdig</code> script from the command line to rebuild per-list search indexes using the revised per-list htdig conf files just created by <code>blow_away_htdig</code>. 
+	</li>
+</ol>
+<h3><a id="redhat7">Redhat 7.1 and 7.2 installations</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	If you install htdig from the htdig-3.2.0 binary rpm of RH7.1/2 Binary CD 1 of 2 you also have to install the htdig-web-3.2.0 binary rpm. This may be from RH 7.1/2 Binary CD 2 of 2 or CD 1 of 2 depending on whether you are using actual CDs or downloaded CD images. 
+</p>
+<h3><a id="apachehtdig">Apache/htdig issues</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<p>
+	htdig's graphics file must be accessible via you web server and the Mailman configuration variable <code>HTDIG_FILES_URL</code> setup accordingly. Depending on how you install htdig and Apache you may need to add <code>Alias</code> and/or <code>ScriptAlias</code> directives to you Apache configuration file to make the htdig components accessible. Check the Apache and htdig documentation. 
+</p>
+<h2><a name="contrib"> Contributors</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> 
+<dl>
+	<dt>
+		Original author and maintainer: 
+	</dt>
+	<dd>
+		Richard Barrett - &lt;r.barrett at openinfo.co.uk&gt; 
+	</dd>
+	<dt>
+		Past bug fixes: 
+	</dt>
+	<dd>
+        <ul>
+            <li>
+                Nigel Metheringham &lt;nigel.metheringham at vdata.co.uk&gt; 
+            </li>
+            <li>
+                Stephan Berndts &lt;stb-mm at spline.de&gt; 
+            </li>
+        </ul>
+	</dd>
+	<dt>
+		Testers: 
+	</dt>
+	<dd>
+		<ul>
+			<li>
+				Mark T. Valites &lt;valites at geneseo.edu&gt; 
+			</li>
+			<li>
+				Rehan van der Merwe &lt;rehan at nha.co.za&gt; 
+			</li>
+		</ul>
+	</dd>
+</dl>
+<h2><a name="history"> History</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> <h3><a name="compat"> Compatibility</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<table border="1">
+	<tr valign="top">
+		<th width="50%">
+			Version of patch 
+		</th>
+		<th width="50%">
+			Version of Mailman 
+		</th>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.9-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.9 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.7-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.7 and 2.1.8
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.6-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.6 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.4-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.4 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.3-0.5.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.3-0.4.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.3-0.3.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.3-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.3-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.2-0.4.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.2 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.2-0.3.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.2 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.2-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.2 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.2-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.2 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.1-0.5.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.1-0.4.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.1-0.3.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.1-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1.1-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1-0.3.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b6-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b6 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b5-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b5 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b4-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b4 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b3-0.3.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b3-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b3-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b3 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.1b2-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.1b2 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.13-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.13 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.13-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.13 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.12-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.12 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.11-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.11 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.10-0.2.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.10 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.10-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.10 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.9-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.9 
+		</td>
+	</tr>
+	<tr>
+		<td>
+			<code>htdig-2.0.8-0.1.patch</code> 
+		</td>
+		<td>
+			Mailman 2.0.8, 2.0.7, 2.0.6 and probably 2.0.3, 2.0.4 and 2.0.5 
+		</td>
+	</tr>
+</table>
+<h3><a id="changes">Changes</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h3> 
+<dl>
+     <dt>
+		<code>htdig-2.1.9-0.1.patch:</code> 
+	</dt>
+    <dd>
+        <ol>
+            <li>
+                updated patch for MM 2.1.9 compatibility.
+            </li>
+        </ol>
+	</dd>
+   <dt>
+		<code>htdig-2.1.7-0.1.patch:</code> 
+	</dt>
+    <dd>
+        <ol>
+            <li>
+                updated patch for MM 2.1.7 compatibility.
+            </li>
+        </ol>
+	</dd>
+    <dt>
+		<code>htdig-2.1.6-0.1.patch:</code> 
+	</dt>
+    <dd>
+        <ol>
+            <li>
+                updated patch for MM 2.1.6 compatibility.
+            </li>
+            <li>
+                Note: the templates in <code>$build/templates/&lt;lang&gt;/</code>for the following languages are NOT modified by this patch or by its precursor indexing patch: <code>ca, eu, sr, sv</code><br>
+                The following files in a language's default template directory should be modified per the changes made to the <code>en</code> language templates after installation of this patch if that other language is used ;'
+                <ul>
+                    <li><code>templates/&lt;lang&gt;/archidxfoot.html</code></li>
+                    <li><code>templates/&lt;lang&gt;/archidxhead.html</code></li>
+                    <li><code>templates/&lt;lang&gt;/archtoc.html</code></li>
+                    <li><code>templates/&lt;lang&gt;/archtocentry.html</code></li>
+                    <li><code>templates/&lt;lang&gt;/archtocnombox.html</code></li>
+                    <li><code>templates/&lt;lang&gt;/article.html</code></li>
+                </ul>
+            </li>
+        </ol>
+	</dd>
+    <dt>
+		<code>htdig-2.1.4-0.1.patch:</code> 
+	</dt>
+    <dd>
+        <ol>
+            <li>
+                updated patch for MM 2.1.4 compatibility.
+            </li>
+            <li>
+                removed untranslated versions of <code>htdig.html</code> from per-language directories under <code>$build/templates</code>, with the exception of the default <code>templates/en/</code> directory, that were present in previous versions of this patch.
+            </li>
+        </ol>
+	</dd>
+    <dt>
+		<code>htdig-2.1.3-0.5.patch:</code> 
+	</dt>
+    <dd>
+        <ol>
+            <li>
+                Modified <code>htdig.py</code> and <code>private.py</code>; the security changes introduced by <code>htdig-2.1.3-0.2 patch</code> to these scripts incorrectly  blocked access to the <code>&lt;listname&gt;.mbox/&lt;listname&gt;.mbox</code> file. The <code>O.5</code> revison of the patch corrects this error. This problem and a suggested fix were pointed out to me in a private email by Stephan Berndts &lt;stb-mm at spline.de&gt;
+            </li>
+        </ol>
+	</dd>
+    <dt>
+		<code>htdig-2.1.3-0.4.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+	            Modified <code>htdig.py</code> and introduced <code>htdig.html</code> templates. The changes mean that if the user is challenged for authentication, when the credentials are submitted and accepted, the URL requested which led to the challenge is then presented. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.3-0.3.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Patch documentation layout revised and simplified. 
+			</li>
+			<li>
+				Changes to <code>$prefix/bin/check_perms</code> and <code>$prefix/Mailman/Archiver/HyperArch.py</code> to improve handling of htdig subdirectory permissions if remote htdig is used. End result is the same as with prior patch version in the case of local htdig. 
+			</li>
+			<li>
+				Introduced the <code>HTDIG_STRICT_FILE_PERM</code> Mailman config variable as part of dealing with <code>htsearch</code> access to per-list <code>htdig</code> directories permissions issue when operating with remote htdig. See under the "<a href="#aperms">Apache</a>" heading above. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.3-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				This patch is hopefully the final step in closing security holes in archive access. See the discussion below under the heading <a href="#secsol"> "Archive security problems resolved by <code>htdig-2.1.3-0.2 patch</code>"</a>. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.3-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				updated patch for MM 2.1.3 compatibility. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.2-0.4.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				corrected error in mmsearch.py and remote_mmsearch. This caused a problem if https was being used for accessing the archives as a pattern match to extract the list name was misused. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.2-0.3.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				updates <code>HyperArch.py</code> so htdig related code uses <code>quick_maketext()</code> function instead of the <code>Utils.Maketext()</code> function. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.2-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				corrects stupid error inserted in unpublished <code>htdig-2.1.1-0.5.patch</code> and carried forward into <code>htdig-2.1.2-0.1.patch</code> 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.2-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				updated patch for MM 2.1.2 compatibility 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.1-0.5.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				with previous version the protototype htdig_conf.txt contained an htdig exclude_urls directive for <code>/cgi-bin/</code> and <code>.cgi</code>. If MM is configured so that the URL for accessing the <code>htdig.py</code> cgi wrapper matches these excluded URLS (for instance by running <code>./configure</code> with <code>--with-cgi-ext=".cgi"</code>) then nothing gets indexed by <code>rundig</code>. The revised patch: 
+				<ol type="a">
+					<li>
+						makes the excluded URL configurable through a MM config variable <code>HTDIG_EXCLUDED_URLS</code> which defaults to the old hard-wired value. 
+					</li>
+					<li>
+						when generating a list-specific <code>htdig.conf</code> file a check is made against <code>HTDIG_EXCLUDED_URLS</code> and if anything in it would prevent indexing of the URL for accessing the <code>htdig.py</code> cgi wrapper for that list, it is omitted from the exclude_urls directive in that <code>htdig.conf</code> file. 
+					</li>
+				</ol>
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.1-0.4.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				<code>mmsearch.py</code> and its remote kin <code>remote-mmsearch</code> and <code>mm_search</code> were overly restrictive on the form fields they were willing to accept. Extended the list so that multi-page search results worked. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.1-0.3.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				corrects silly error in raising an excpetion in <code>mmsearch.py</code>. This will only show if there is a problem with <code>mmsearch</code> running the <code>htsearch</code> program. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.1-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				This version corrects a security exploit which allowed a URL to obtain an <code>htsearch</code> results page without the user being authorised to access the list. Any attempt to follows links on the results page were blocked correctly by <code>$prefix/Mailman/htdig.py</code> but there was leakage of private information from the list's search indexes on the page returned by htdig's <code>htsearch</code> CGI program. The exploit is removed by this patch's revisions. The following sections describe the problem, the solution and special actions required when updating a Mailman installation using an earlier version of this patch: 
+				<ol type="a">
+					<li>
+						<a href="#secprob">Private archive security problem prior to <code>htdig-2.1.1-0.2.patch</code> version</a>. 
+					</li>
+					<li>
+						<a href="#keepsec">Maintaining private archive security with <code>htdig-2.1.1-0.2.patch</code> version and later</a>. 
+					</li>
+					<li>
+						<a href="#secupgd">Upgrading to <code>htdig-2.1.1-0.2.patch</code> or later from an earlier patch version</a>. 
+					</li>
+				</ol>
+				Note that there is no patch revision to deal with this security problem for MM 2.0.13 or earlier and you should seriously consider updating to MM 2.1.x if you want to implement this security fix. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1.1-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				No functional change. Applies without offset warnings to MM 2.1.1 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1-0.3.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				corrects errors in the way <code>$prefix/Mailman/htdig.py</code> worked out content type of file being returned. 
+			</li>
+			<li>
+				<code>$prefix/Mailman/htdig.py</code> adopts revised method for establishing the default URL introduced in 2.1 and as used in <code>$prefix/Mailman/MailList.py </code> 
+			</li>
+			<li>
+				removed unecessary setup of variable <code>DEFAULT_URL</code> in cron scripts <code>$prefix/cron/remote_nightly_htdig_noshare</code> and <code>$prefix/cron/remote_nightly_htdig.pl</code> 
+			</li>
+			<li>
+				Changes references to <code>DEFAULT_URL</code> in this document to <code>DEFAULT_URL_PATTERN</code>. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				improved content type and security handling in <code>$prefix/Mailman/htdig.py</code>. Fixes bug with <code>htdig.py</code> and problem of interaction with bug in <code>$prefix/scripts/driver</code> script (see patch #668685 for more details) 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Reworked patch for compatibility with MM 2.1. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b6-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Reworked patch for compatibility with MM 2.1b6. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b5-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Reworked patch for compatibility with MM 2.1b5. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b4-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Reworked patch for compatibility with MM 2.1b4. As a consequence, the remainder of the mailman-htdig integration templates that were strings declared in <code>Mailman/Archiver/HyperArch.py</code> have been extracted into files under the templates directory. Edit these with care if you must. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b3-0.3.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Removed unecessary code dependency on Python 2.2 file() function 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b3-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Removed syntax error in <code>htdig-2.1b3-0.1.patch</code> which showed up as logged errors in the operation of the ArchRunner qrunner at line 721 of <code>HyperArch.py</code> 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b3-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Reworked patch for compatibility with MM 2.1b3 
+			</li>
+			<li>
+				Removed non-English language template files which were acting as placeholders until someone actually translated them. 
+			</li>
+			<li>
+				Removed <code>updateTOC.py</code> and replaced it with an alternate mechanism in a patch to <code>$prefix/Mailma/Queue/ArchRunner.py</code> to update list TOC page after reindexing by htdig. This new method is only exercised when the <code>remote_nightly_htdig</code> series of cron scripts are used. 
+			</li>
+			<li>
+				Changes to <code>remote_nightly_htdig</code> series of cron scripts to reflect demise of <code>updateTOC</code> cgi script. 
+			</li>
+			<li>
+				Multiple instances of code hygiene and conformance to MM "standards" cleanup. 
+			</li>
+			<li>
+				Tidied up this documentation. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.1b2-0.1.patch: </code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				reworked patch for compatibility with MM 2.1b2 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.13-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Added license header 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.13-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Rebuilt patch to get no-comment application on Mailman 2.0.13 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.12-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Rebuilt patch to get no-comment application on Mailman 2.0.12 
+			</li>
+			<li>
+				Added <code>HTDIG_EXTRAS</code> xonfig variable to allow arbitrary htdig configuration parameters to be specified for addition to every <code>htdig.conf</code> file created i.e. site wide additions. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.11-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				No substantive change. Simply rebuilt patch to get no-comment application on Mailman 2.0.11 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.10-0.2.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				Python 2.2 compatibility fixes to <code>nightly_htdig</code> cron script and its relatives. Doing <code>import *</code> inside a function removed. 
+			</li>
+			<li>
+				Added note on potential problems with htdig and file permissions. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.10-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				change in <code>src/Makefile.in</code> to get clean patch application to MM 2.0.10 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.9-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				minor cosmetic changes to get clean patch application to MM 2.0.9 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.8-0.1.patch:</code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				resolves a problem with the integration of htdig when the <code>web_page_url</code> for a list, which is usually the same as <code>DEFAULT_URL</code> from either <code>$prefix/Mailman/Defaults.py</code> or <code>$prefix/Mailman/mm_cfg.py</code>, when it doesn't use the http addressing scheme. This arises because htdig will only build indices if the URLs for pages use the http addressing scheme. There is a work-around for this problem posted in htdig's mail archives - see the copy in <a href="#app1">Appendix 1</a> to this document. 
+			</li>
+			<li>
+				This patch revision implements the solution documented in that e-mail. If non-http URLs are used by the <code>web_page_url</code> of a list an additional htdig configuration file for use by htsearch is generated. 
+			</li>
+			<li>
+				In all other respects the operation of the Mailman-htdig integration remains unchanged. There is no benefit in upgrading to this revised patch unless you need to use other than http addressing in your DEFAULT_URL or set other than http addressing in the <code>web_page_url</code> configuration of any of your lists. 
+			</li>
+			<li>
+				If changing to or from a non-http addressing scheme then the per list htdig config files of the lists affected and their associated htdig indices must be reconstructed. See the section below entitled <a href="#achange">"Changing the Addressing Scheme of your web_page_url"</a> for details of how to do this. 
+			</li>
+		</ol>
+	</dd>
+	<dt>
+		<code>htdig-2.0.6-0.3.patch: </code> 
+	</dt>
+	<dd>
+		<ol>
+			<li>
+				adds support for remote htdig, that is: running htdig on a different system to Mailman. 
+			</li>
+			<li>
+				enhances the configurability of the integration. Some of the programmed assumptions made in previous versions are now configurable in <code>mm_cfg.py</code>. The configuration variables concerned default to the previous fixed values so that this version is backwards compatible with earlier versions. 
+			</li>
+			<li>
+				does some minor cosmetic code changes. 
+			</li>
+			<li>
+				extends the associated documentation. 
+			</li>
+		</ol>
+	</dd>
+</dl>
+<h2><a name="appendices"> Appendices</a>&nbsp;<a href="#toc">[&nbsp;toc&nbsp;]</a></h2> <h3><a name="app1"> Appendix 1 -Technique for htdigging when Mailman's web_page_url uses the https scheme</a></h3> <pre>
+A technique for htdigging when Mailman's web_page_url uses the https 
+addressing scheme is described in this archived e-mail: 
+http://www.htdig.org/mail/1999/10/0187.html
+
+The text of that e-mail is as follows:
+
+[htdig] Re: Help about htdig indexing https files
+
+------------------------------------------------------------------------
+Gilles Detillieux (grdetil at scrc.umanitoba.ca)
+Wed, 27 Oct 1999 10:18:31 -0500 (CDT) 
+
+
+Messages sorted by: [ date ] [ thread ] [ subject ] [ author ] 
+Next message: Avi Rappoport: "[htdig] indexing SSL (was: Help building 
+the database)" 
+Previous message: Gilles Detillieux: "Re: Fw: [htdig] mutiple search 
+results" 
+In reply to: Torsten Neuer: "Re: Fw: [htdig] mutiple search results" 
+
+------------------------------------------------------------------------
+According to Edouard DESSIOUX: 
+&gt; &gt;Currently, htdig will not support URLs that begin with https://, even
+&gt; &gt;when using local_urls to bypass the server. A trick that might work 
+&gt; &gt;would be to index using http:// instead, but use local_urls to point 
+&gt; &gt;to the directory that contains the contents of the secure server. 
+&gt; 
+&gt; I used that, and now, when i use htsearch, it work, except the fact 
+&gt; that all my URL are http://x.y.z/ instead of https://x.y.z/ 
+&gt; 
+&gt; &gt;You'd need to use separate 
+&gt; &gt;configuration files for digging and searching, and use 
+&gt; &gt;url_part_aliases in each of these configuration files to rewrite the 
+&gt; &gt;http:// into https:// in the search results. 
+&gt; 
+&gt; This is the part i dont understand, and i would like you to explain. 
+
+
+It basically works as a search and replace. One url_part_aliases in the 
+configuration file used by htdig maps the http://x.y.z/ into some 
+special code like "*site", and another url_part_aliases in the 
+configuration file used by htsearch maps the "*site" back into the value 
+you want, i.e. https://x.y.z/. The substitution is left to right in 
+htdig, and right to left in htsearch. So, if you use the same config 
+file for both, or the same setting for both, you get back what you 
+started with (but saved some space in the database because of the 
+encoding). However, if you use two separate config files with different 
+url_part_aliases setting for htdig and htsearch, you can remap parts of 
+URLs from one substring to another. 
+
+
+I hope this makes things clearer. I thought the current description at 
+http://www.htdig.org/attrs.html#url_part_aliases was already quite 
+clear. 
+
+
+
+-- 
+Gilles R. Detillieux              E-mail: &lt;grdetil@scrc.umanitoba.ca&gt;
+Spinal Cord Research Centre       WWW:    
+http://www.scrc.umanitoba.ca/~grdetil
+Dept. Physiology, U. of Manitoba  Phone:  (204)789-3766
+Winnipeg, MB  R3E 3J7  (Canada)   Fax:    (204)789-3930
+------------------------------------</pre> 
+</body>
+</html>
Index: mailman-2.1.9/Mailman/Archiver/HyperArch.py
===================================================================
--- mailman-2.1.9.orig/Mailman/Archiver/HyperArch.py	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/Mailman/Archiver/HyperArch.py	2007-07-01 17:38:09.000000000 +0000
@@ -30,10 +30,14 @@
 
 import sys
 import re
+import string
 import errno
 import urllib
+import urlparse
 import time
 import os
+from stat import *
+import errno
 import types
 import HyperDatabase
 import pipermail
@@ -647,6 +651,9 @@
         self.lang = maillist.preferred_language
         self.charset = Utils.GetCharSet(maillist.preferred_language)
 
+        if mm_cfg.USE_HTDIG:
+            self.setup_htdig()
+
         if hasattr(self.maillist,'archive_volume_frequency'):
             if self.maillist.archive_volume_frequency == 0:
                 self.ARCHIVE_PERIOD='year'
@@ -764,6 +771,7 @@
              'meta': '',
              "indexing_enable": mm_cfg.ARCHIVE_INDEXING_ENABLE,
              "indexing_disable": mm_cfg.ARCHIVE_INDEXING_DISABLE,
+             "htsearch": '',
              }
         # Avoid i18n side-effects
         otrans = i18n.get_translation()
@@ -784,6 +792,30 @@
                 d["archive_listing_end"] = quick_maketext(
                     'archlistend.html',
                     mlist=mlist)
+                if mm_cfg.USE_HTDIG:
+                    list_htdig_dir = os.path.join(self.maillist.archive_dir(),  
+                                                  'htdig')
+                    rundig_file = os.path.join(list_htdig_dir, 'rundig_last_run')
+                    try:
+                        last_rundig_mtime = os.stat(rundig_file)[ST_MTIME]
+                        lastrun = time.strftime("%A, %d %b %Y %H:%M:%S %Z",        
+                                    time.localtime(last_rundig_mtime))
+                    except OSError, e:
+                        if e.errno <> errno.ENOENT: raise
+                        lastrun = '[has yet to be built for this new list]'
+                    h = {"listname": self.maillist.internal_name(),
+                         "mmsearchcgi": mlist.GetScriptURL('mmsearch', absolute=1),
+                         "lastrun": lastrun,
+                         "htsearchconf": '',
+                        }
+                    conf_name_search = self.maillist.internal_name() + \
+                               '.htsearch.conf'
+                    conf_file_search = os.path.join(list_htdig_dir, 
+                                    conf_name_search)
+                    if os.path.exists(conf_file_search):
+                        h['htsearchconf'] = '.htsearch'
+                    d["htsearch"] = quick_maketext('TOC_htsearch.html', dict=h,
+                                                    mlist=self.maillist)
 
                 accum = []
                 for a in self.archives:
@@ -836,6 +868,131 @@
              },
             mlist=self.maillist)
 
+    def remove_htdig(self, indices_only):
+        list_htdig_dir = os.path.join(self.maillist.archive_dir(), 'htdig')
+        if not os.path.exists(list_htdig_dir):
+            return
+        conf_name_dig = self.maillist.internal_name() + '.conf'
+        conf_file_dig = os.path.join(list_htdig_dir, conf_name_dig)
+        conf_name_search = self.maillist.internal_name() + '.htsearch.conf'
+        conf_file_search = os.path.join(list_htdig_dir, conf_name_search)
+        dual_conf_files = None
+        if os.path.exists(conf_file_search):
+            dual_conf_files = 1
+        if indices_only:
+            cfd = open(conf_file_dig, 'r')
+            conf_data_dig = cfd.readlines()
+            cfd.close()
+            if dual_conf_files:
+                cfd = open(conf_file_search, 'r')
+                conf_data_search = cfd.readlines()
+                cfd.close()
+            os.system('rm -rf ' + list_htdig_dir + '/*')            
+            cfd = open(conf_file_dig, 'w')
+            cfd.writelines(conf_data_dig)
+            cfd.close()
+            if dual_conf_files:
+                cfd = open(conf_file_search, 'w')
+                cfd.writelines(conf_data_search)
+                cfd.close()
+        else:
+            os.system('rm -rf ' + list_htdig_dir)
+            conf_file_link_dig = os.path.join(mm_cfg.HTDIG_CONF_LINK_DIR, conf_name_dig)
+            os.unlink(conf_file_link_dig)
+            if dual_conf_files:
+                conf_file_link_search = os.path.join(mm_cfg.HTDIG_CONF_LINK_DIR, conf_name_search)
+                os.unlink(conf_file_link_search)
+
+    def setup_htdig(self):
+        listname = self.maillist.internal_name()
+        # we want to make a directory to put the mail list's htdig stuff in
+        list_htdig_dir = os.path.join(self.maillist.archive_dir(), 'htdig')
+        hperm = 02775
+        if mm_cfg.HTDIG_STRICT_FILE_PERM:
+            hperm = 02770
+        # but we bug out if this has already been done
+        try:
+            os.mkdir(list_htdig_dir, hperm)
+        except OSError, e:
+            if e.errno <> errno.EEXIST: raise
+            return
+        # assemble the mapping for characterising the htdig config
+        htdigfiles = mm_cfg.HTDIG_FILES_URL
+        if mm_cfg.HTDIG_FILES_URL[-1] == '/':
+            htdigfile = htdigfiles[:-1]
+        d = {'databases': list_htdig_dir,
+             "filepath": self.maillist.archive_dir() + '/',
+             "maintainer": Utils.get_site_email(),
+             "indexing_enable": mm_cfg.ARCHIVE_INDEXING_ENABLE,
+             "indexing_disable": mm_cfg.ARCHIVE_INDEXING_DISABLE,
+             "htdig_url": htdigfiles,
+             "htdig_extras": mm_cfg.HTDIG_EXTRAS,
+             "mmsearchcgi": self.maillist.GetScriptURL('mmsearch', absolute=1),
+            }
+        # we need to changes paths to be relative to file system of
+        # remote machine if we are not running htdig on mailman machine
+        if mm_cfg.REMOTE_HTDIG:
+            d['filepath'] = os.path.join(
+                                       mm_cfg.REMOTE_PRIVATE_ARCHIVE_FILE_DIR,
+                                       listname + '/')
+            d['databases'] = os.path.join(d['filepath'], 'htdig')
+        # now the URL through which htdig access to the pipermail data will go
+        starturl_dig = self.maillist.GetScriptURL('htdig') + '/'
+        starturl_search = starturl_dig
+        # we need to know if the addressing scheme for the URL as htdig cannot
+        # cope with other than http (https for instance) when building indices
+        # we'll need different conf files for htdig and htsearch in that case
+        dual_conf_files = None
+        urlbits = urlparse.urlparse(starturl_dig)
+        if urlbits[0] != 'http':
+            urlbits = ('http',) + urlbits[1:]
+            starturl_dig = urlparse.urlunparse(urlbits)
+            dual_conf_files = 1
+        # check that the excluded_urls wil not exclude the htdig cgi url
+        excluded_urls = []
+        for exc in mm_cfg.HTDIG_EXCLUDED_URLS.split():
+            if starturl_dig.find(exc) == -1:
+                excluded_urls.append(exc) 
+        d['excluded_urls'] = string.join(excluded_urls)
+        # create htdig config files. we may need one for digging and another
+        # for searching if the addressing scheme is https these config files
+        # are slightly different we'll put the files in the directory we just 
+        # created above
+        conf_name_dig = listname + '.conf'
+        d['url_part_aliases'] = starturl_dig + " *mm-htdig*"
+        d['starturl'] = starturl_dig
+        d['urlpath'] = starturl_dig
+        conf_file_dig = os.path.join(list_htdig_dir, conf_name_dig)
+        fd = open(conf_file_dig, 'w')
+        fd.write(quick_maketext('htdig_conf.txt', dict=d, mlist=self.maillist))
+        fd.close()
+        # we need symlinks so that htdig will be able to find the config files
+        conf_file_link_dig = os.path.join(mm_cfg.HTDIG_CONF_LINK_DIR, 
+                                          conf_name_dig)
+        try:
+            os.unlink(conf_file_link_dig)
+        except OSError, e:
+            if e.errno <> errno.ENOENT: raise
+        os.symlink(conf_file_dig, conf_file_link_dig)
+        # make the second conf file and link to it for htsearch if necessary 
+        if dual_conf_files:
+            conf_name_search = listname + '.htsearch.conf'
+            d['url_part_aliases'] = starturl_search + " *mm-htdig*"
+            d['starturl'] = starturl_search
+            d['urlpath'] = starturl_search
+            conf_file_search = os.path.join(list_htdig_dir, conf_name_search)
+            fd = open(conf_file_search, 'w')
+            fd.write(quick_maketext('htdig_conf.txt', dict=d, 
+                                    mlist=self.maillist))
+            fd.close()
+            conf_file_link_search = os.path.join(mm_cfg.HTDIG_CONF_LINK_DIR, 
+                                                 conf_name_search)
+            try:
+                os.unlink(conf_file_link_search)
+            except OSError, e:
+                if e.errno <> errno.ENOENT: raise
+            os.symlink(conf_file_search, conf_file_link_search)
+
     def GetArchLock(self):
         if self._lock_file:
             return 1
Index: mailman-2.1.9/Mailman/Cgi/htdig.py
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/Mailman/Cgi/htdig.py	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,197 @@
+# Copyright (C) 1998-2003 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+
+"""Provide a password-interface wrapper around private archives.
+"""
+
+import os
+import sys
+import cgi
+import mimetypes
+import re
+import string
+
+from Mailman import mm_cfg
+from Mailman import Utils
+from Mailman import MailList
+from Mailman import Errors
+from Mailman import i18n
+from Mailman.htmlformat import *
+from Mailman.Logging.Syslog import syslog
+
+# Set up i18n.  Until we know which list is being requested, we use the
+# server's default.
+_ = i18n._
+i18n.set_language(mm_cfg.DEFAULT_SERVER_LANGUAGE)
+
+SLASH = '/'
+
+
+
+def true_path(path):
+    "Ensure that the path is safe by removing .."
+    # Workaround for path traverse vulnerability.  Unsuccessful attempts will
+    # be logged in logs/error.
+    parts = [x for x in path.split(SLASH) if x not in ('.', '..')]
+    return SLASH.join(parts)[1:]
+
+
+
+def guess_type(url, strict):
+    if hasattr(mimetypes, 'common_types'):
+        return mimetypes.guess_type(url, strict)
+    return mimetypes.guess_type(url)
+
+
+
+def main():
+    doc = Document()
+    doc.set_language(mm_cfg.DEFAULT_SERVER_LANGUAGE)
+
+    parts = Utils.GetPathPieces()
+    if not parts:
+        doc.SetTitle(_("Sought (htdig) Archive Error"))
+        doc.AddItem(Header(3, _("You must specify a list.")))
+        print doc.Format()
+        return
+
+    path = os.environ.get('PATH_INFO')
+    # BAW: This needs to be converted to the Site module abstraction
+    true_filename = os.path.join(
+        mm_cfg.PRIVATE_ARCHIVE_FILE_DIR,
+        true_path(path))
+
+    listname = parts[0].lower()
+    mboxfile = ''
+    if len(parts) == 2:
+        mboxfile = parts[1]
+
+    # See if it's the list's mbox file is being requested
+    if listname.endswith('.mbox') and mboxfile.endswith('.mbox') and \
+           listname[:-5] == mboxfile[:-5]:
+        listname = listname[:-5]
+    else:
+        mboxfile = ''
+
+    # If it's a directory, we have to append index.html in this script.  We
+    # must also check for a gzipped file, because the text archives are
+    # usually stored in compressed form.
+    wasdir = 0
+    if os.path.isdir(true_filename):
+        true_filename = true_filename + '/index.html'
+        wasdir = 1
+    if not os.path.exists(true_filename) and \
+           os.path.exists(true_filename + '.gz'):
+        true_filename = true_filename + '.gz'
+
+    try:
+        mlist = MailList.MailList(listname, lock=0)
+    except Errors.MMListError, e:
+        # Avoid cross-site scripting attacks
+        safelistname = Utils.websafe(listname)
+        msg = _('No such list <em>%(safelistname)s</em>')
+        doc.SetTitle(_("Sought (htdig) Archive Error - %(msg)s"))
+        doc.AddItem(Header(2, msg))
+        print doc.Format()
+        syslog('error', 'No such list "%s": %s\n', listname, e)
+        return
+
+    # If the path is not:
+    #  <list name>.mbox/<list name>.mbox
+    # it should conform to:
+    #  <list name>/<archive name (but not htdig or database)>/...
+    #  <list name>/<file_name which must end in .txt, .txt.gz or .html>
+    #  and any filenames starting with '.' are also not allowed
+    num_parts = len(parts)
+    if not mboxfile and num_parts > 1 and \
+       (parts[1] in ('database', 'htdig') or \
+        (num_parts == 2 and \
+          not re.compile(r'\.(html|txt|txt\.gz)$').search(true_filename) \
+        ) or parts[-1][0] == '.' \
+       ):
+        msg = _('Invalid archive file requested')
+        doc.SetTitle(msg)
+        doc.AddItem(Header(2, msg))
+        print doc.Format()
+        syslog('error', 'Invalid archive file requested: %s', true_filename)
+        return
+
+    i18n.set_language(mlist.preferred_language)
+    doc.set_language(mlist.preferred_language)
+
+    if mlist.archive_private:
+        message = ''
+        cgidata = cgi.FieldStorage()
+        username = cgidata.getvalue('username', '')
+        password = cgidata.getvalue('password', '')
+
+        if not mlist.WebAuthenticate((mm_cfg.AuthUser,
+                                      mm_cfg.AuthListModerator,
+                                      mm_cfg.AuthListAdmin,
+                                      mm_cfg.AuthSiteAdmin),
+                                     password, username):
+            if cgidata.has_key('submit'):
+                # This is a re-authorization attempt
+                message = Bold(FontSize('+1', _('Authorization failed.'))).Format()
+            # Output the password form
+            charset = Utils.GetCharSet(mlist.preferred_language)
+            print 'Content-type: text/html; charset=' + charset + '\n\n'
+            while path and path[0] == '/':
+                path=path[1:]  # Remove leading /'s
+            # Bring them back to the same point when they login
+            actionURL = mlist.GetScriptURL('htdig', absolute=1)
+            mbox_extra_bit = ''
+            if mboxfile:
+                mbox_extra_bit = '.mbox'
+            if len(parts) > 1:
+                actionURL = actionURL + mbox_extra_bit + '/' + string.join(parts[1:], '/')
+            if wasdir:
+                actionURL = actionURL + '/index.html'
+            print Utils.maketext(
+                'htdig.html',
+                {'action'  : actionURL,
+                 'realname': mlist.real_name,
+                 'message' : message,
+                }, mlist=mlist)
+            return
+        lang = mlist.getMemberLanguage(username)
+        i18n.set_language(lang)
+        doc.set_language(lang)
+
+    # Authorization confirmed... output the desired file
+    try:
+        ctype, enc = guess_type(path, strict=0)
+        if ctype is None:
+            ctype = 'text/html'
+        if mboxfile:
+            f = open(os.path.join(mlist.archive_dir() + '.mbox',
+                                  mlist.internal_name() + '.mbox'))
+            ctype = 'text/plain'
+        elif true_filename.endswith('.gz'):
+            import gzip
+            f = gzip.open(true_filename, 'r')
+        else:
+            f = open(true_filename, 'r')
+    except IOError:
+        msg = _('Sought (htdig) archive file not found')
+        doc.SetTitle(msg)
+        doc.AddItem(Header(2, msg))
+        print doc.Format()
+        syslog('error', 'Sought (htdig) archive file not found: %s', true_filename)
+    else:
+        print 'Content-type: %s\n' % ctype
+        sys.stdout.write(f.read())
+        f.close()
Index: mailman-2.1.9/Mailman/Cgi/mmsearch.py
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/Mailman/Cgi/mmsearch.py	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,225 @@
+# Copyright (C) 2003 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+
+"""Provide an authentication wrapper around htdig's htsearch.
+
+In order to search a list's archive the HTTP request must present a valid 
+cookie authorizing access to the list's archives for private archives. 
+This cookie must be obtained by the same process as the user must 
+adopt for accessing the archive via the private.py script.
+
+The basic premise is that htsearch cannot reach a list's htdig conf file
+unless this script enhances the environment in which htsearch runs to
+provide access to a list's htdig conf file.
+
+If the use authenticates OK for a private archive, or the archive is public,
+this script:
+
+a. in the case of local htdig, this script enhances the environment with 
+'CONFIG-DIR' pointing to MM's list htdig conf files, and runs htsearch.
+
+b. in the case of remote htdig, this script performs a HTTP request to a
+companion CGI script running on the htdig machine. This request can of
+course be forged easily. The only protection available is the the companion
+script can optionaaly check the IP number from which requests to it are made
+and reject them if they do not come from the MM server.
+"""
+
+import sys
+import os
+import cgi
+import re
+import popen2
+import exceptions
+import types
+import httplib
+import urllib
+import urlparse
+
+from Mailman import mm_cfg
+from Mailman import Utils
+from Mailman import MailList
+from Mailman import Errors
+from Mailman import i18n
+from Mailman.htmlformat import *
+from Mailman.Logging.Syslog import syslog
+
+
+# Set up i18n.  Until we know which list is being requested, we use the
+# server's default.
+_ = i18n._
+i18n.set_language(mm_cfg.DEFAULT_SERVER_LANGUAGE)
+
+errors = {'cgi': _('CGI problem.'),
+          'info': _('Path info.'),
+          'list': _('The requested list cannot be accessed.'),
+          'htsearch': _('search failed'),
+          'auth': Utils.maketext('htdig_auth_failure.html', dict=None, raw=0)
+         }
+
+class _search_exception(exceptions.Exception):
+    
+    def __init__(self, listname, reason, detail):
+        self.listname = listname
+        self.reason = reason 
+        self.detail = detail
+
+    def __str__(self):
+        return 'listname: %s, reason: %s, detail: %s' % (self.listname, self.reason, self.detail)
+
+
+def true_path(path):
+    "Ensure that the path is safe by removing .."
+    path = path.replace("../", "")
+    path = path.replace("./", "")
+    return path[1:]
+
+def make_inserts(listname):
+    urlbase =  mm_cfg.DEFAULT_URL or \
+               mm_cfg.DEFAULT_URL_PATTERN % mm_cfg.DEFAULT_URL_HOST
+    return {
+            'mailto': Utils.get_site_email(),
+            'listinfo_link': urlbase + '/listinfo/' + listname,
+            'referer': os.environ.get('HTTP_REFERER', _('Referer not known')),
+            'uri': os.environ.get('REQUEST_URI', _('URI not known')),
+           }
+
+def error_quit(why):
+    d = make_inserts(why.listname)
+    d['error'] = errors[why.reason] + ' ' + why.detail
+    charset = Utils.GetCharSet(mm_cfg.DEFAULT_SERVER_LANGUAGE)
+    stuff = 'Content-type: text/html; charset=' + charset + '\n\n'
+    stuff += Utils.maketext('htdig_access_error.html', dict=d, 
+                         lang=mm_cfg.DEFAULT_SERVER_LANGUAGE)
+    print stuff
+    syslog('error', "htsearch for list: %s, cause: %s, detail: %s" % \
+           (why.listname, why.reason, why.detail))
+    sys.exit(0)
+
+_required_fields = ('method',
+                    'format',
+                    'sort',
+                    'config',
+                   )
+
+_allowed_fields = {'method': 0,
+                   'format': 0,
+                   'sort': 0,
+                   'config': 1,
+                   'words': 0,
+                   'submit': 0,
+                   'restrict': 0,
+                   'exclude': 0,
+                   'page': 0,
+                  }
+
+def check_params(listname, fs, detail):
+    detail = detail + ' fields: ' + ','.join(fs.keys())
+    for fieldname in _required_fields:
+        if not fs.has_key(fieldname):
+            raise _search_exception(listname, 'cgi',  '-5-' + detail)
+    fieldhash = {}
+    for fieldname in fs.keys():
+        if not _allowed_fields.has_key(fieldname):
+            raise _search_exception(listname, 'cgi', '-6- ' + detail)
+        if  type(fs[fieldname]) is types.ListType:
+            raise _search_exception(listname, 'cgi', '-8- ' + detail)        
+        fieldhash[fieldname] = fs[fieldname].value
+    return urllib.urlencode(fieldhash)
+
+def main():
+    try:
+        try:
+            request_method = os.environ['REQUEST_METHOD']
+            form = cgi.FieldStorage()
+        except:
+            raise _search_exception('', 'cgi', 'No list -1-')
+        list_info = Utils.GetPathPieces()
+        if not list_info or len(list_info) != 1:
+            raise _search_exception('', 'info', 'No list -2-')
+        path_listname = list_info[0].lower()
+        # Check right number of expected fields and get them
+        # url encoded
+        params = check_params(path_listname, form, 'Field count -4-')
+        # Extract the listname from the form
+        listname = form['config'].value
+        if listname.endswith('.htsearch'):
+            listname = listname[:-len('.htsearch')]
+        # Access the list OK?
+        if path_listname != listname:
+            raise _search_exception(listname, 'list', '%s:%s' % (path_listname, listname))
+        try:
+            mlist = MailList.MailList(listname, lock=0)
+        except:
+            raise _search_exception(listname, 'list', '-11-')
+        # We only need to authorize the user if it's a private archive 
+        if mlist.archive_private:
+            if not mlist.WebAuthenticate((mm_cfg.AuthUser,
+                                             mm_cfg.AuthListModerator,
+                                             mm_cfg.AuthListAdmin,
+                                             mm_cfg.AuthSiteAdmin),
+                                            '', ''):
+                raise _search_exception(listname, 'auth', '-10-')
+        if mm_cfg.REMOTE_HTDIG:
+            #  We are going to do an HTTP request to the server that is
+            # running htsearch and then return the response.
+            headers = {"Content-type": "application/x-www-form-urlencoded",
+                       "Accept": "text/plain, text/html"}
+            urlbits = urlparse.urlsplit(mm_cfg.REMOTE_MMSEARCH_URL)
+            hostbit = urlbits[1]
+            uribit = urlbits[2] + '/' + listname
+            conn = httplib.HTTPConnection(hostbit)
+            conn.request("POST", uribit, params, headers)
+            response = conn.getresponse()
+            if response.status == 200:
+                ctype = response.getheader('Content-type', 'text/html')
+                print "Content-type: %s\n\n" % ctype
+                print response.read()
+                conn.close()
+            else:
+                syslog('error', "remote htsearch failed, url: %s, response code: %d" % \
+                       (mm_cfg.REMOTE_MMSEARCH_URL, response.status))
+                conn.close()
+                raise _search_exception(listname, 'cgi', 
+                                        ' -9- %d' % response.status)
+        else:
+            # We are going to execute htsearch and return its response.
+            # We need to let htsearch get at the list specific htdig
+            # conf file
+            os.environ['CONFIG_DIR'] = mm_cfg.HTDIG_CONF_LINK_DIR
+            cmd = "%s" % mm_cfg.HTDIG_HTSEARCH_PATH
+            child = popen2.Popen3(cmd)
+            if request_method == 'POST':
+                os.environ['CONTENT_LENGTH'] = str(len(params))
+                child.tochild.write(params)
+            child.tochild.close()
+            response = ''
+            while (1):
+                data = child.fromchild.read()
+                if data == "": 
+                    break
+                response += data
+            exitstatus = child.wait()
+            exitstatus = (exitstatus >> 8) & 0xff
+            if exitstatus:
+                syslog('error', "htsearch for list: %s, existatus: %s" % \
+                       (listname, str(exitstatus)))
+            if not response:
+                raise _search_exception(listname, 'htsearch', '-12-') 
+            print response
+    except _search_exception, e:
+        error_quit(e)
+    sys.exit(0)
Index: mailman-2.1.9/Mailman/Cgi/private.py
===================================================================
--- mailman-2.1.9.orig/Mailman/Cgi/private.py	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/Mailman/Cgi/private.py	2007-07-01 17:38:09.000000000 +0000
@@ -21,6 +21,7 @@
 import sys
 import cgi
 import mimetypes
+import re
 
 from Mailman import mm_cfg
 from Mailman import Utils
@@ -81,7 +82,7 @@
 
     listname = parts[0].lower()
     mboxfile = ''
-    if len(parts) > 1:
+    if len(parts) == 2:
         mboxfile = parts[1]
 
     # See if it's the list's mbox file is being requested
@@ -112,6 +113,26 @@
         syslog('error', 'No such list "%s": %s\n', listname, e)
         return
 
+    # If the path is not:
+    #  <list name>.mbox/<list name>.mbox
+    # it should conform to:
+    #  <list name>/<archive name (but not htdig or database)>/...
+    #  <list name>/<file_name which must end in .txt, .txt.gz or .html>
+    #  and any filenames starting with '.' are also not allowed
+    num_parts = len(parts)
+    if not mboxfile and num_parts > 1 and \
+       (parts[1] in ('database', 'htdig') or \
+        (num_parts == 2 and \
+          not re.compile(r'\.(html|txt|txt\.gz)$').search(true_filename) \
+        ) or parts[-1][0] == '.' \
+       ):
+        msg = _('Invalid archive file requested')
+        doc.SetTitle(msg)
+        doc.AddItem(Header(2, msg))
+        print doc.Format()
+        syslog('error', 'Invalid archive file requested: %s', true_filename)
+        return
+
     i18n.set_language(mlist.preferred_language)
     doc.set_language(mlist.preferred_language)
 
Index: mailman-2.1.9/Mailman/Cgi/remote-mmsearch
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/Mailman/Cgi/remote-mmsearch	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,237 @@
+#! /usr/bin/perl
+
+# Copyright (C) 2003 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+
+my $doc = <<EOT;
+Provide an authentication wrapper around htdig's htsearch when
+it is running on a different machine to Mailman.
+
+This relies on htsearch not normally being able to access per list htdig 
+conf files for list archives without the intervention of this script,
+which inserts a 'CONFIG_DIR' environment variable to enable that acccess.
+
+The security available with this script is limited as it cannot
+consult the user authentication information held by Mailman. Instead
+we rely on the mmsearch CGI script on the Mailman server doing that and 
+then passing the request to this script using an HTTP request. 
+
+The only protection against malicious request to this script is to restrict
+this script to responding only when an HTTP request originates from a machine
+with a particular IP number: e.g. we only allow requests from our 'trusted'
+MM server.
+EOT
+
+# Edit the following configuration variables to suit your installation.
+#
+# For example:
+# 
+#my $MAILTO = 'mailman@mailman.yourdomain.com';
+#my @VALID_IP_LIST = ('192.168.1.111');
+#my $HTDIG_CONF_LINK_DIR = '/mailman/run/archives/htdig';
+#my $HTDIG_HTSEARCH_PATH = '/opt/www/htdig/bin/htsearch';
+
+my $MAILTO = '';
+my @VALID_IP_LIST = ();
+my $HTDIG_CONF_LINK_DIR = '';
+my $HTDIG_HTSEARCH_PATH = '';
+
+# End of things for you to edit
+
+use CGI;
+use URI::Escape;
+use IPC::Open2;
+
+my %errors = ('cgi' => 'CGI problem.',
+              'info' => 'Path info.',
+              'list' => 'The requested list cannot be accesssed.',
+              'htsearch' => 'htearch failed',
+              'auth' => 'Authentication failure.',
+             );
+
+sub true_path {
+    my $path = shift;
+    $path =~ s/\.\.\///g;
+    $path =~ s/\.\///g;
+    return substr $path, 1;
+}
+
+sub GetPathPieces {
+    my $path = $ENV{'PATH_INFO'};
+    if ($path) {
+        my @pathbits = ();
+        foreach my $bit (split /\//, $path ) {
+            push (@pathbits, $bit) if $bit;
+        }
+        return @pathbits if scalar @pathbits;
+    }
+    return ();
+}
+
+my @required_fields = ('method',
+                       'format',
+                       'sort',
+                       'config',
+                      );
+
+my %allowed_fields = ('method' => 0,
+                      'format' => 0,
+                      'sort' => 0,
+                      'config' => 1,
+                      'words' => 0,
+                      'submit' => 0,
+                      'restrict' => 0,
+                      'exclude' => 0,
+                      'page' => 0,
+                     );
+                     
+sub error_quit {
+    my ($listname, $reason, $detail)  = @_;
+    my $fault = $errors{$reason} . " $detail";
+    my $mailto = $MAILTO;
+    my $referer = $ENV{'HTTP_REFERER'} ; # 'Referer not known'
+    my $uri = $ENV{'REQUEST_URI'};      # 'URI not known'
+    print <<EOT;
+Content-type: text/html
+
+<HTML>
+<HEAD>
+    <TITLE>htdig Archives Access Failure</TITLE> 
+</HEAD>
+<BODY BGCOLOR="#ffffff">
+<H1>htdig Archives Access Failure</H1> 
+$fault
+<P>
+    Searching the archives of list $listname failed.
+</P>
+<P>
+    If this problem persists then please e-mail the following information to the 
+<A HREF="mailto:$mailto">$mailto</A>:
+</P>
+<PRE>
+    $referer
+    $uri
+</PRE>
+<HR>
+</BODY>
+</HTML>
+EOT
+    exit(0);
+}
+
+sub check_params {
+    my ($listname, $query, $detail) = @_;
+    my @fieldnames = $query->param();
+    $detail = "$detail  fields: " . join(',', @fieldnames);
+    foreach my $fieldname (@required_fields) {
+        if (! $query->param($fieldname)) {
+            error_quit($listname, 'cgi', " -5- $detail");
+        }
+    }
+    my @urlencoded = ();
+    foreach my $fieldname (@fieldnames) {
+        if (! exists $allowed_fields{$fieldname}) {
+            error_quit($listname, 'cgi', "-6- $detail|$fieldname");
+        }
+        my $fc = $query->param($fieldname);
+        if (ref(\$fc) ne 'SCALAR') {
+            error_quit($listname , 'cgi', "-8- $detail|$fieldname");
+        }
+        push @urlencoded, "$fieldname=" . uri_escape($fc);
+    }
+    return join '&', @urlencoded;
+}
+
+my $htaccess = '.htaccess';
+my $htaccess_len = length($htaccess);
+
+sub doit {
+    my $request_method = $ENV{'REQUEST_METHOD'};
+    my $query = CGI::new();
+    my @list_info = GetPathPieces();
+    if (scalar(@list_info) != 1) {
+        error_quit('', 'info', '-2-');
+    }
+    my $path_listname = lc $list_info[0];
+    my $encoded_params = check_params($path_listname, $query, 'Field count -4-');
+    my $listname;
+    my $cfg = $query->param('config');
+    if (substr($cfg, -$htaccess_len) eq $htaccess) {
+        $listname = substr $cfg, 0, length($cfg) - $htaccess_len;
+    } elsif ($cfg)
+    {
+        $listname = $cfg;
+        
+    } else {
+        error_quit('', 'list', '-3-');
+    }
+    if ($path_listname ne $listname) {
+        error_quit($listname, 'list', "$path_listname:$listname");
+    }
+    if (scalar @VALID_IP_LIST) {
+        my $remote_addr = $ENV{'REMOTE_ADDR'};
+        my @request_bits = split /\./, $remote_addr;
+        my $got_a_match = 0;
+        my $ip;
+        foreach $ip (@VALID_IP_LIST) {
+            @valid_bits = split /\./, $ip;
+            my $mismatch = 0;
+            for (my $i=0; $i<4; $i++) {
+                if ($request_bits[$i] ne $valid_bits[$i]) {
+                    $mismatch = 1;
+                    last;
+                }
+            }
+            if (! $mismatch) {
+                $got_a_match = 1;
+                last;
+            }
+        }
+        if (! $got_a_match) {
+            error_quit($listname, 'auth', "-10- $remote_addr");
+        }
+    }
+    $ENV{'CONFIG_DIR'} = $HTDIG_CONF_LINK_DIR;
+    my $cmd = $HTDIG_HTSEARCH_PATH;
+    if ($request_method eq 'POST') {
+       $ENV{'CONTENT_LENGTH'} = length $encoded_params;
+    } else {
+        error_quit($listname, 'auth', "-11- method");
+    }
+    my $child_pid = open2(\*Readchild, \*Writechild, $cmd);
+    print Writechild $encoded_params;
+    close Writechild;
+    my $response = '';
+    while (<Readchild>) {
+        $response .= $_;
+    }
+    my $rc = waitpid $child_pid, 0;
+    my $exitstatus = ($? >> 8) & 0xff;
+    if ($exitstatus) {
+        error_quit($listname, 'htsearch', "-12- exit: $existstatus");
+    }
+    if (! $response) {
+        error_quit($listname, 'htsearch', "-13-");
+    }
+    print $response;
+    exit 0;
+}
+
+if ($MAILTO and -d $HTDIG_CONF_LINK_DIR and -x $HTDIG_HTSEARCH_PATH) {
+    doit();
+} else {
+    error_quit('', 'cgi', '-14- misconfigured');
+}
Index: mailman-2.1.9/Mailman/Cgi/remote_mmsearch
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/Mailman/Cgi/remote_mmsearch	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,239 @@
+#! /usr/local/bin/python
+
+# Copyright (C) 2003 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+
+"""Provide an authentication wrapper around htdig's htsearch when
+it is running on a different machine to Mailman.
+
+This relies on htsearch not normally being able to access per list htdig 
+conf files for list archives without the intervention of this script,
+which inserts a 'CONFIG_DIR' environment variable to enable that acccess.
+
+The security available with this script is limited as it cannot
+consult the user authentication information held by Mailman. Instead
+we rely on the mmsearch CGI script on the Mailman server doing that and 
+then passing the request to this script using an HTTP request. 
+
+The only protection against malicious request to this script is to restrict
+this script to responding only when an HTTP request originates from a machine
+with a particular IP number: e.g. we only allow requests from our 'trusted'
+MM server.
+"""
+
+# Edit the following configuration variables to suit your installation
+#
+# For example:
+#
+#MAILTO = 'mailman@mailman.yourdomain.com'
+#VALID_IP_LIST = ['192.168.1.111']
+#HTDIG_CONF_LINK_DIR = '/mailman/run/archives/htdig'
+#HTDIG_HTSEARCH_PATH = '/opt/www/htdig/bin/htsearch'
+
+MAILTO = ''
+VALID_IP_LIST = []
+HTDIG_CONF_LINK_DIR = ''
+HTDIG_HTSEARCH_PATH = ''
+
+# End of things for you to edit
+
+import sys
+import os
+import cgi
+import re
+import popen2
+import exceptions
+import types
+import httplib
+import urllib
+import urlparse
+
+errors = {'cgi': 'CGI problem.',
+          'info': 'Path info.',
+          'list': 'The requested list cannot be accessed.',
+          'htsearch': 'htearch failed',
+          'auth': 'Authentication failure.',
+         }
+
+class _search_exception(exceptions.Exception):
+    
+    def __init__(self, listname, reason, detail):
+        self.listname = listname
+        self.reason = reason 
+        self.detail = detail
+
+    def __str__(self):
+        return 'listname: %s, reason: %s' % (self.listname, self.reason)
+    	
+
+def true_path(path):
+    "Ensure that the path is safe by removing .."
+    path = path.replace("../", "")
+    path = path.replace("./", "")
+    return path[1:]
+
+def GetPathPieces(envar='PATH_INFO'):
+    path = os.environ.get(envar)
+    if path:
+        return [p for p in path.split('/') if p]
+    return None
+
+def make_inserts(listname):
+    return {
+            'mailto': MAILTO,
+            'listname': listname,
+            'referer': os.environ.get('HTTP_REFERER', 'Referer not known'),
+            'uri': os.environ.get('REQUEST_URI', 'URI not known'),
+           }
+
+def error_quit(why):
+    d = make_inserts(why.listname)
+    d['error'] = errors[why.reason] + ' ' + why.detail
+    print """\
+Content-type: text/html
+
+<HTML>
+<HEAD>
+    <TITLE>htdig Archives Access Failure</TITLE> 
+</HEAD>
+<BODY BGCOLOR="#ffffff">
+<H1>htdig Archives Access Failure</H1> 
+%(error)s
+<P>
+    Searching the archives of list %(listname)s failed.
+</P>
+<P>
+    If this problem persists then please e-mail the following information to the 
+<A HREF="mailto:%(mailto)s">%(mailto)s</A>:
+</P>
+<PRE>
+    %(referer)s
+    %(uri)s
+</PRE>
+<HR>
+</BODY>
+</HTML>
+""" % d
+    sys.exit(0)
+
+_required_fields = ('method',
+                    'format',
+                    'sort',
+                    'config',
+                   )
+
+_allowed_fields = {'method': 0,
+                   'format': 0,
+                   'sort': 0,
+                   'config': 1,
+                   'words': 0,
+                   'submit': 0,
+                   'restrict': 0,
+                   'exclude': 0,
+                   'page': 0,
+                  }
+
+def check_params(listname, fs, detail):
+    detail = detail + ' fields: ' + ','.join(fs.keys())
+    for fieldname in _required_fields:
+        if not fs.has_key(fieldname):
+            raise _search_exception(listname, 'cgi',  '-5-' + detail)
+    fieldhash = {}
+    for fieldname in fs.keys():
+        if not _allowed_fields.has_key(fieldname):
+            raise _search_exception(listname, 'cgi', '-6- ' + detail)
+        if type(fs[fieldname]) is types.ListType:
+            raise _search_exception(listname, 'cgi', '-8- ' + detail)        
+        fieldhash[fieldname] = fs[fieldname].value
+    return urllib.urlencode(fieldhash)
+
+def main():
+    try:
+        try:
+            request_method = os.environ['REQUEST_METHOD']
+            form = cgi.FieldStorage()
+        except:
+            raise _search_exception('', 'cgi', 'No list -1-')
+        list_info = GetPathPieces()
+        if not list_info or len(list_info) != 1:
+            raise _search_exception('', 'info', 'No list -2-')
+        path_listname = list_info[0].lower()
+        # Check right number of expected fields and get them
+        # url encoded
+        params = check_params(path_listname, form, 'Field count -4-')
+        # Extract the listname from the form
+        listname = form['config'].value
+        if listname.endswith('.htsearch'):
+            listname = listname[:-len('.htsearch')]
+        # Access the list OK?
+        if path_listname != listname:
+            raise _search_exception(listname, 'list', '%s:%s' % \
+                                    (path_listname, listname))
+        # We check to origin IP of the request if restrictions are specified
+        if len(VALID_IP_LIST):
+            try:
+                request_bits = os.environ['REMOTE_ADDR'].split('.')
+                for ip in VALID_IP_LIST:
+                    valid_bits = ip.split('.')
+                    for i in range(4):
+                    	if request_bits[i] != valid_bits[i]: 
+                            break
+                    else:
+                    	break
+                else:
+                    raise _search_exception(listname, 'auth', ' -10- %s' % \
+                                            os.environ['REMOTE_ADDR'])
+            except _search_exception:
+                raise
+            except:
+                raise _search_exception(listname, 'auth', ' -12-')
+        # We are going to call execute htsearch and return its response.
+        # We need to let htsearch get at the list specific htdig
+        # conf file
+        if request_method == 'POST':
+            os.environ['CONTENT_LENGTH'] = str(len(params))
+        else:
+            raise _search_exception(listname, 'auth', ' -11- method')
+        os.environ['CONFIG_DIR'] = HTDIG_CONF_LINK_DIR
+        cmd = HTDIG_HTSEARCH_PATH
+        child = popen2.Popen3(cmd)
+        child.tochild.write(params)
+        child.tochild.close()
+        response = ''
+        while (1):
+            data = child.fromchild.read()
+            if data == "": 
+                break
+            response += data
+        exitstatus = child.wait()
+        exitstatus = (exitstatus >> 8) & 0xff
+        if exitstatus:
+            raise _search_exception(listname, 'htsearch', ' -12-  exit: %d' \
+                                    % existatus, )
+        if not response:
+            raise _search_exception(listname, 'htsearch', ' -13-') 
+        print response
+    except _search_exception, e:
+        error_quit(e)
+    sys.exit(0)
+
+if __name__ == '__main__' and \
+   MAILTO and \
+   os.path.isdir(HTDIG_CONF_LINK_DIR) and \
+   os.access(HTDIG_HTSEARCH_PATH, os.X_OK):
+    main()
+else:
+    error_quit(_search_exception('', 'cgi', '-14- misconfigured'))
Index: mailman-2.1.9/Mailman/Defaults.py.in
===================================================================
--- mailman-2.1.9.orig/Mailman/Defaults.py.in	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/Mailman/Defaults.py.in	2007-07-01 17:38:09.000000000 +0000
@@ -1310,8 +1310,8 @@
 # Strings for wrapping html stuff we do not want a search engine to
 # pay attention to in the pipermail archives. Of course the search engine
 # must be able to interpret such strings.
-ARCHIVE_INDEXING_ENABLE = ''
-ARCHIVE_INDEXING_DISABLE = ''
+#ARCHIVE_INDEXING_ENABLE = '' # no htdig integration default
+#ARCHIVE_INDEXING_DISABLE = '' # no htdig integration default
 # For example, you could insert the following into your mm_cfg if you
 # were using htdig for searching archives. They are default values for 
 # htdig config attributes noindex_end and noindex_start respectively
@@ -1324,6 +1324,67 @@
 #ARCHIVE_INDEXING_ENABLE = '<!--/htdig_noindex-->\n</NOINDEX>'
 #ARCHIVE_INDEXING_DISABLE = '<NOINDEX>\n<!--htdig_noindex-->'
 
+ARCHIVE_INDEXING_ENABLE = '<!--/htdig_noindex-->'
+ARCHIVE_INDEXING_DISABLE = '<!--htdig_noindex-->'
+# htdig integration parameters
+# if you set USE_HTDIG then you must also set HTDIG_HTSEARCH_PATH
+# and HTDIG_RUNDIG_PATH to suit your htdig installation. They must point to
+# the htsearch program and rundig script in your file system, for instance:
+# HTDIG_HTSEARCH_PATH = '/usr/bin/htsearch'
+# HTDIG_RUNDIG_PATH = '/usr/bin/rundig'
+USE_HTDIG = 0    # 0 - don't use integrated htdig, 1 - use it
+HTDIG_FILES_URL = '/htdig/'
+HTDIG_CONF_LINK_DIR = os.path.join(VAR_PREFIX, 'archives', 'htdig')
+HTDIG_HTSEARCH_PATH = '/usr/local/bin/htsearch'
+HTDIG_RUNDIG_PATH = '/usr/local/bin/rundig'
+
+# the value of this string is assigned as the value of an htdig 
+# 'excluded_urls:' configuration directive when per-list htdig.conf 
+# files are generated. Conflicts can arise depending on the values you 
+# assign to DEFAULT_URL_PATTERN and CGIEXT and list names themselves. 
+# The code attempts to avoid this problem when generating each  per-list 
+# htdig.conf and will, if necessary, modify the value obtained from 
+# HTDIG_EXCLUDED_URLS on a list-by-list basis.
+HTDIG_EXCLUDED_URLS = '/cgi-bin/ .cgi'
+
+# you can use the HTDIG_EXTRAS parameter to add arbitrary htdig 
+# configuration attributes to per list htdig config files. The string 
+# value you specify is inserted verbatim at the top of each htdig conf 
+# file when it is generated. The default value does nothing. Make sure
+# you understand what you are doing before you fool with this facility.
+HTDIG_EXTRAS = """\
+# start of extra site specific htdig configuration attributes
+#
+# replace these line with your htdig config attribute declarations
+# as defined at http://www.htdig.org/confindex.html
+#
+# end of extra site specific htdig configuration attributes
+"""
+
+# remote htdig support parameters for mailman-htdig integration
+# provides support for running htdig on a different machine from the one
+# running mailman but one having NFS access to the installation directory 
+# of the Mailman package.
+# set REMOTE_HTDIG if you are running htdig on a different machine to
+# Mailman. Has no effect unless you also set REMOTE_HTDIG
+# REMOTE_PRIVATE_ARCHIVE_FILE_DIR  is the absolute path to the directory in 
+# which Mailman stores private archives as seen by the machine running htdig.
+# It should resolve to the same directory as PRIVATE_ARCHIVE_FILE_DIR when
+# viewed from the remote system.
+# REMOTE_MMSEARCH_URL is the URL for the mmsearch's companion CGI script 
+# script on the remote htdig machine. This should reach one of either
+# remote_mmsearch or remote-mmsearch
+# HTDIG_STRICT_FILE_PERM says whether 'other' does not have permission to
+# access per-list htdig directory (True) or not (False). False may be 
+# appropriate if REMOTE_HTDIG is True and the UID and GID the remote Apache
+# server runs CGI scripts as is not the/in the mailman user/group. 
+# Weaker security but prevents permissions problems for 
+# remote_mmsearch/remote-mmseach
+REMOTE_HTDIG = 0 # 0 - htdig runs on Mailman machine, 1 - runs on remote machine
+REMOTE_PRIVATE_ARCHIVE_FILE_DIR = os.path.join(VAR_PREFIX, 'archives', 'private')
+REMOTE_MMSEARCH_URL = '/cgi-bin/remote_mmsearch'
+HTDIG_STRICT_FILE_PERM = 1
+  
 # Vgg: Language descriptions and charsets dictionary, any new supported
 # language must have a corresponding entry here. Key is the name of the
 # directories that hold the localized texts. Data are tuples with first
Index: mailman-2.1.9/Mailman/Queue/ArchRunner.py
===================================================================
--- mailman-2.1.9.orig/Mailman/Queue/ArchRunner.py	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/Mailman/Queue/ArchRunner.py	2007-07-01 17:38:09.000000000 +0000
@@ -17,17 +17,33 @@
 """Archive queue runner."""
 
 import time
+import errno
+import os
+from stat import *
 from email.Utils import parsedate_tz, mktime_tz, formatdate
 
 from Mailman import mm_cfg
 from Mailman import LockFile
 from Mailman.Queue.Runner import Runner
+from Mailman import MailList
+from Mailman import Utils
+from Mailman.Archiver import HyperArch
 
+# Part of the Mailman-htdig integration.
+# This controls how often _doperiodic() will try to deal with the
+# consequences of a remote machine having reindexed mail archives
+# and hence the need for the MM machine to update affected lists  
+# TOC pages to reflect the datetime when the htdigging was done.
+CHECK_REMOTE_RUNDIG_EFFECTS = 10
 
 
 class ArchRunner(Runner):
     QDIR = mm_cfg.ARCHQUEUE_DIR
 
+    def __init__(self, slice=None, numslices=1):
+        Runner.__init__(self, slice, numslices)
+        self._periodic_htdig_check = CHECK_REMOTE_RUNDIG_EFFECTS
+
     def _dispose(self, mlist, msg, msgdata):
         # Support clobber_date, i.e. setting the date in the archive to the
         # received date, not the (potentially bogus) Date: header of the
@@ -74,3 +90,35 @@
             mlist.Save()
         finally:
             mlist.Unlock()
+
+    def _doperiodic(self):
+        """Do some processing `every once in a while'.
+
+        If the mailman-htdig archiving is being used then we want to ensure
+        that the TOC page for each list has been updated since the last time
+        htdigging of the list was done. This is only necessary if we are
+        running htdig on a different machine to Mailman.
+
+        """
+
+        if mm_cfg.USE_HTDIG and mm_cfg.REMOTE_HTDIG:
+            self._periodic_htdig_check -= 1
+            if self._periodic_htdig_check <= 0: 
+                self._periodic_htdig_check = CHECK_REMOTE_RUNDIG_EFFECTS
+                listnames = Utils.list_names()
+                for name in listnames:
+                    mlist = MailList.MailList(name, lock=0)
+                    if not mlist.last_post_time > 0: continue
+                    arch_dir = mlist.archive_dir()
+                    rundig_run_file = os.path.join(arch_dir, 'htdig', 
+                                                   'rundig_last_run')
+                    toc_file = os.path.join(arch_dir, 'index.html')
+                    try:
+                        last_rundig_time = os.stat(rundig_run_file)[ST_MTIME]
+                        last_toc_time = os.stat(toc_file)[ST_MTIME]
+                    except OSError, e:
+                        if e.errno <> errno.ENOENT: raise
+                    else:
+                        if last_rundig_time > last_toc_time:
+                            HyperArch.HyperArchive(mlist).write_TOC()
+
Index: mailman-2.1.9/Makefile.in
===================================================================
--- mailman-2.1.9.orig/Makefile.in	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/Makefile.in	2007-07-01 17:38:09.000000000 +0000
@@ -43,7 +43,7 @@
 
 VAR_DIRS= \
 	logs archives lists locks data spam qfiles \
-	archives/private archives/public
+	archives/private archives/public archives/htdig
 
 ARCH_INDEP_DIRS= \
 	bin templates scripts cron pythonlib \
Index: mailman-2.1.9/bin/Makefile.in
===================================================================
--- mailman-2.1.9.orig/bin/Makefile.in	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/bin/Makefile.in	2007-07-01 17:38:09.000000000 +0000
@@ -48,7 +48,7 @@
 		version config_list list_lists dumpdb cleanarch \
 		list_admins genaliases change_pw mailmanctl qrunner inject \
 		unshunt fix_url.py convert.py transcheck b4b5-archfix \
-		list_owners msgfmt.py show_qfiles discard rb-archfix \
+		list_owners msgfmt.py show_qfiles discard rb-archfix blow_away_htdig \
 		reset_pw.py
 
 BUILDDIR=	../build/bin
Index: mailman-2.1.9/bin/blow_away_htdig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/bin/blow_away_htdig	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,139 @@
+#! @PYTHON@
+# 
+# Copyright (C) 2002 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+#
+"""Blow away the per list htdig files.
+
+This script is for when you:
+    a. decide to stop using Mailman-htdig integration
+    b. move from local to remote htdig or vice-versa
+    c. are updgrading to a version of htdig which has an incompatible
+       index/db file format
+    d. want to force the creation of new per-list htdig conf files
+       and the list indexes.
+
+You really want to stop Mailman operating while you are running this. For
+instance, shutdown the MTA delivering mail to Mailman and remove Mailman's
+crontab.
+
+Usage: %(program)s [-v] [-h] [i] [listnames]
+
+Where:
+    --verbose / -v
+        print each list as htdig is run for it
+
+    --help / -h
+        print this message and exit
+
+    --config/ -c
+        delete htdig search indices for the lists
+        and recreate the htdig conf file for the lists
+
+    --indices / -i
+        only delete htdig search indices for the lists
+        leave the htdig conf file in place. This is overridden by 
+        the -c option
+
+    listnames
+        Optionally, only runs htdig for the named lists.  Without 
+        this, all archivable lists are processed.
+
+"""
+
+# this code was derived from the nightly_gzip cron script
+
+import sys
+import os
+from stat import *
+import time
+from stat import *
+import getopt
+import paths
+from Mailman import MailList
+from Mailman import Utils
+from Mailman import mm_cfg
+from Mailman.Archiver import HyperArch
+from Mailman.i18n import _
+
+program = sys.argv[0]
+
+def usage(code, msg=''):
+    print >> sys.stderr, _( __doc__)
+    if msg:
+        print msg
+    sys.exit(code)
+
+def main():
+    try:
+        opts, args = getopt.getopt(sys.argv[1:], 'vhic', 
+                                   ['verbose', 'help', 'indices', 'config'])
+    except getopt.error, msg:
+        usage(1, msg)
+
+    # defaults
+    verbose = 0
+    indices_only = 0
+    redo_configs = 0
+    for opt, arg in opts:
+        if opt in ('-h', '--help'):
+            usage(0)
+        elif opt in ('-v', '--verbose'):
+            verbose = 1
+        elif opt in ('-c', '--config'):
+            redo_configs = 1
+            indices_only = 0
+        elif opt in ('-i', '--indices') and not redo_configs:
+            indices_only = 1
+	
+    # limit to the specified lists?
+    if args:
+        listnames = args
+    else:
+        listnames = Utils.list_names()
+
+    # make sure htdig use is off for the moment in this process
+    mm_cfg.USE_HTDIG = 0
+
+    # process all the specified lists
+    for name in listnames:
+        mlist = MailList.MailList(name, lock=0)
+        if not mlist.archive:
+            continue
+        archive = HyperArch.HyperArchive(mlist)
+        if verbose:
+            if redo_configs:
+                print _('Blowing away all htdig indices of list %(name)s')
+                print _('Rebuilding htdig config of list %(name)s')
+            elif indices_only:
+                print _('Blowing away all htdig indices of list %(name)s')
+            else:
+                print _('Blowing away all htdig stuff of list %(name)s')
+        archive.remove_htdig(indices_only)
+        if redo_configs:
+            archive.setup_htdig()
+        archive.write_TOC()
+
+if __name__ == '__main__' and \
+   mm_cfg.USE_HTDIG and \
+   mm_cfg.ARCHIVE_TO_MBOX in (0, 2):
+    # we're only going to run this if messages are archived to the internal 
+    # archiver and we are using htdig to provide archive search
+    omask = os.umask(002)
+    try:
+        main()
+    finally:
+        os.umask(omask)
Index: mailman-2.1.9/bin/check_perms
===================================================================
--- mailman-2.1.9.orig/bin/check_perms	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/bin/check_perms	2007-07-01 17:38:09.000000000 +0000
@@ -54,6 +54,11 @@
 
 # Gotta check the archives/private/*/database/* files
 
+DBDIRLIST = ['database']
+if mm_cfg.HTDIG_STRICT_FILE_PERM:
+    DBDIRLIST.append('htdig')
+
+
 try:
     True, False
 except NameError:
@@ -129,7 +134,7 @@
         # checked in checkarchives() and checkarchivedbs() below.
         private = mm_cfg.PRIVATE_ARCHIVE_FILE_DIR
         if path == private or (os.path.commonprefix((path, private)) == private
-                               and os.path.split(path)[1] == 'database'):
+                               and os.path.split(path)[1] in DBDIRLIST):
             continue
         # The directories under qfiles should have a more limited permission
         if os.path.commonprefix((path, mm_cfg.QUEUE_DIR)) == mm_cfg.QUEUE_DIR:
@@ -241,23 +246,29 @@
     # or executable otherwise those files will be accessible when the archives
     # are public.  That may not be a horrible breach, but let's close this off
     # anyway.
+    # ditto archives/private/listname/htdig
     for dir in os.listdir(mm_cfg.PRIVATE_ARCHIVE_FILE_DIR):
         if dir.endswith('.mbox'):
             checkmboxfile(dir)
-        dbdir = os.path.join(mm_cfg.PRIVATE_ARCHIVE_FILE_DIR, dir, 'database')
-        try:
-            mode = statmode(dbdir)
-        except OSError, e:
-            if e.errno not in (errno.ENOENT, errno.ENOTDIR): raise
-            continue
-        if mode & S_IRWXO:
-            STATE.ERRORS += 1
-            print _('%(dbdir)s "other" perms must be 000'),
-            if STATE.FIX:
-                print _('(fixing)')
-                os.chmod(dbdir, mode & ~S_IRWXO)
-            else:
-                print
+        dbdirlist = [os.path.join(mm_cfg.PRIVATE_ARCHIVE_FILE_DIR, dir, 
+                                  'database')]
+        if mm_cfg.HTDIG_STRICT_FILE_PERM:
+            dbdirlist.append(os.path.join(mm_cfg.PRIVATE_ARCHIVE_FILE_DIR, 
+                                          dir, 'htdig'))
+        for ddir in dbdirlist:
+            try:
+                mode = statmode(ddir)
+            except OSError, e:
+                if e.errno not in (errno.ENOENT, errno.ENOTDIR): raise
+                continue
+            if mode & S_IRWXO:
+                STATE.ERRORS += 1
+                print _('%(ddir)s "other" perms must be 000'),
+                if STATE.FIX:
+                    print _('(fixing)')
+                    os.chmod(ddir, mode & ~S_IRWXO)
+                else:
+                    print
 
 def checkcgi():
     cgidir = os.path.join(mm_cfg.EXEC_PREFIX, 'cgi-bin')
Index: mailman-2.1.9/configure
===================================================================
--- mailman-2.1.9.orig/configure	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/configure	2007-07-01 17:38:10.000000000 +0000
@@ -1,7 +1,7 @@
 #! /bin/sh
 # From configure.in Revision: 7462 .
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.60a.
+# Generated by GNU Autoconf 2.61.
 #
 # Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
 # 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
@@ -11,7 +11,8 @@
 ## M4sh Initialization.  ##
 ## --------------------- ##
 
-# Be Bourne compatible
+# Be more Bourne compatible
+DUALCASE=1; export DUALCASE # for MKS sh
 if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
   emulate sh
   NULLCMD=:
@@ -20,10 +21,13 @@
   alias -g '${1+"$@"}'='"$@"'
   setopt NO_GLOB_SUBST
 else
-  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
+  case `(set -o) 2>/dev/null` in
+  *posix*) set -o posix ;;
+esac
+
 fi
-BIN_SH=xpg4; export BIN_SH # for Tru64
-DUALCASE=1; export DUALCASE # for MKS sh
+
+
 
 
 # PATH needs CR
@@ -216,7 +220,7 @@
 else
   as_candidate_shells=
     as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in /usr/bin/posix$PATH_SEPARATOR/bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
+for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
 do
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
@@ -234,7 +238,6 @@
 	 # Try only shells that exist, to save several forks.
 	 if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
 		{ ("$as_shell") 2> /dev/null <<\_ASEOF
-# Be Bourne compatible
 if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
   emulate sh
   NULLCMD=:
@@ -243,10 +246,12 @@
   alias -g '${1+"$@"}'='"$@"'
   setopt NO_GLOB_SUBST
 else
-  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
+  case `(set -o) 2>/dev/null` in
+  *posix*) set -o posix ;;
+esac
+
 fi
-BIN_SH=xpg4; export BIN_SH # for Tru64
-DUALCASE=1; export DUALCASE # for MKS sh
+
 
 :
 _ASEOF
@@ -254,7 +259,6 @@
   CONFIG_SHELL=$as_shell
 	       as_have_required=yes
 	       if { "$as_shell" 2> /dev/null <<\_ASEOF
-# Be Bourne compatible
 if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
   emulate sh
   NULLCMD=:
@@ -263,10 +267,12 @@
   alias -g '${1+"$@"}'='"$@"'
   setopt NO_GLOB_SUBST
 else
-  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
+  case `(set -o) 2>/dev/null` in
+  *posix*) set -o posix ;;
+esac
+
 fi
-BIN_SH=xpg4; export BIN_SH # for Tru64
-DUALCASE=1; export DUALCASE # for MKS sh
+
 
 :
 (as_func_return () {
@@ -513,19 +519,28 @@
   as_mkdir_p=false
 fi
 
-# Find out whether ``test -x'' works.  Don't use a zero-byte file, as
-# systems may use methods other than mode bits to determine executability.
-cat >conf$$.file <<_ASEOF
-#! /bin/sh
-exit 0
-_ASEOF
-chmod +x conf$$.file
-if test -x conf$$.file >/dev/null 2>&1; then
-  as_executable_p="test -x"
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
 else
-  as_executable_p=:
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+        test -d "$1/.";
+      else
+	case $1 in
+        -*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
 fi
-rm -f conf$$.file
+as_executable_p=$as_test_x
 
 # Sed expression to map a string onto a valid CPP name.
 as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
@@ -673,6 +688,7 @@
 CC
 CFLAGS
 LDFLAGS
+LIBS
 CPPFLAGS
 CPP'
 
@@ -780,10 +796,10 @@
   -disable-* | --disable-*)
     ac_feature=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_feature" : ".*[^-_$as_cr_alnum]" >/dev/null &&
+    expr "x$ac_feature" : ".*[^-._$as_cr_alnum]" >/dev/null &&
       { echo "$as_me: error: invalid feature name: $ac_feature" >&2
    { (exit 1); exit 1; }; }
-    ac_feature=`echo $ac_feature | sed 's/-/_/g'`
+    ac_feature=`echo $ac_feature | sed 's/[-.]/_/g'`
     eval enable_$ac_feature=no ;;
 
   -docdir | --docdir | --docdi | --doc | --do)
@@ -799,10 +815,10 @@
   -enable-* | --enable-*)
     ac_feature=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_feature" : ".*[^-_$as_cr_alnum]" >/dev/null &&
+    expr "x$ac_feature" : ".*[^-._$as_cr_alnum]" >/dev/null &&
       { echo "$as_me: error: invalid feature name: $ac_feature" >&2
    { (exit 1); exit 1; }; }
-    ac_feature=`echo $ac_feature | sed 's/-/_/g'`
+    ac_feature=`echo $ac_feature | sed 's/[-.]/_/g'`
     eval enable_$ac_feature=\$ac_optarg ;;
 
   -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
@@ -996,19 +1012,19 @@
   -with-* | --with-*)
     ac_package=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_package" : ".*[^-_$as_cr_alnum]" >/dev/null &&
+    expr "x$ac_package" : ".*[^-._$as_cr_alnum]" >/dev/null &&
       { echo "$as_me: error: invalid package name: $ac_package" >&2
    { (exit 1); exit 1; }; }
-    ac_package=`echo $ac_package| sed 's/-/_/g'`
+    ac_package=`echo $ac_package | sed 's/[-.]/_/g'`
     eval with_$ac_package=\$ac_optarg ;;
 
   -without-* | --without-*)
     ac_package=`expr "x$ac_option" : 'x-*without-\(.*\)'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_package" : ".*[^-_$as_cr_alnum]" >/dev/null &&
+    expr "x$ac_package" : ".*[^-._$as_cr_alnum]" >/dev/null &&
       { echo "$as_me: error: invalid package name: $ac_package" >&2
    { (exit 1); exit 1; }; }
-    ac_package=`echo $ac_package | sed 's/-/_/g'`
+    ac_package=`echo $ac_package | sed 's/[-.]/_/g'`
     eval with_$ac_package=no ;;
 
   --x)
@@ -1260,6 +1276,7 @@
   CFLAGS      C compiler flags
   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
               nonstandard directory <lib dir>
+  LIBS        libraries to pass to the linker, e.g. -l<library>
   CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
               you have headers in a nonstandard directory <include dir>
   CPP         C preprocessor
@@ -1328,7 +1345,7 @@
 if $ac_init_version; then
   cat <<\_ACEOF
 configure
-generated by GNU Autoconf 2.60a
+generated by GNU Autoconf 2.61
 
 Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
@@ -1342,7 +1359,7 @@
 running configure, to aid debugging if configure makes a mistake.
 
 It was created by $as_me, which was
-generated by GNU Autoconf 2.60a.  Invocation command line was
+generated by GNU Autoconf 2.61.  Invocation command line was
 
   $ $0 $@
 
@@ -1728,7 +1745,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_path_with_python="$as_dir/$ac_word$ac_exec_ext"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -1928,7 +1945,7 @@
     # by default.
     for ac_prog in ginstall scoinst install; do
       for ac_exec_ext in '' $ac_executable_extensions; do
-	if { test -f "$as_dir/$ac_prog$ac_exec_ext" && $as_executable_p "$as_dir/$ac_prog$ac_exec_ext"; }; then
+	if { test -f "$as_dir/$ac_prog$ac_exec_ext" && $as_test_x "$as_dir/$ac_prog$ac_exec_ext"; }; then
 	  if test $ac_prog = install &&
 	    grep dspmsg "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
 	    # AIX install.  It has an incompatible calling convention.
@@ -2021,7 +2038,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_path_TRUE="$as_dir/$ac_word$ac_exec_ext"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -2099,7 +2116,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_prog_CC="${ac_tool_prefix}gcc"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -2139,7 +2156,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_prog_ac_ct_CC="gcc"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -2196,7 +2213,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_prog_CC="${ac_tool_prefix}cc"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -2237,7 +2254,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     if test "$as_dir/$ac_word$ac_exec_ext" = "/usr/ucb/cc"; then
        ac_prog_rejected=yes
        continue
@@ -2295,7 +2312,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -2339,7 +2356,7 @@
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
   for ac_exec_ext in '' $ac_executable_extensions; do
-  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; }; then
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
     ac_cv_prog_ac_ct_CC="$ac_prog"
     echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
@@ -2702,27 +2719,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   ac_compiler_gnu=yes
 else
   echo "$as_me: failed program was:" >&5
@@ -2777,27 +2777,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   ac_cv_prog_cc_g=yes
 else
   echo "$as_me: failed program was:" >&5
@@ -2832,27 +2815,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   :
 else
   echo "$as_me: failed program was:" >&5
@@ -2888,27 +2854,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   ac_cv_prog_cc_g=yes
 else
   echo "$as_me: failed program was:" >&5
@@ -3024,27 +2973,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   ac_cv_prog_cc_c89=$ac_arg
 else
   echo "$as_me: failed program was:" >&5
@@ -3689,27 +3621,11 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest$ac_exeext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest$ac_exeext &&
+       $as_test_x conftest$ac_exeext; then
   eval "$as_ac_var=yes"
 else
   echo "$as_me: failed program was:" >&5
@@ -3769,27 +3685,11 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest$ac_exeext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest$ac_exeext &&
+       $as_test_x conftest$ac_exeext; then
   { echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6; }
       cat >>confdefs.h <<\_ACEOF
@@ -3865,17 +3765,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } >/dev/null; then
-  if test -s conftest.err; then
-    ac_cpp_err=$ac_c_preproc_warn_flag
-    ac_cpp_err=$ac_cpp_err$ac_c_werror_flag
-  else
-    ac_cpp_err=
-  fi
-else
-  ac_cpp_err=yes
-fi
-if test -z "$ac_cpp_err"; then
+  (exit $ac_status); } >/dev/null && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then
   :
 else
   echo "$as_me: failed program was:" >&5
@@ -3909,17 +3802,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } >/dev/null; then
-  if test -s conftest.err; then
-    ac_cpp_err=$ac_c_preproc_warn_flag
-    ac_cpp_err=$ac_cpp_err$ac_c_werror_flag
-  else
-    ac_cpp_err=
-  fi
-else
-  ac_cpp_err=yes
-fi
-if test -z "$ac_cpp_err"; then
+  (exit $ac_status); } >/dev/null && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then
   # Broken: success on invalid input.
 continue
 else
@@ -3984,17 +3870,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } >/dev/null; then
-  if test -s conftest.err; then
-    ac_cpp_err=$ac_c_preproc_warn_flag
-    ac_cpp_err=$ac_cpp_err$ac_c_werror_flag
-  else
-    ac_cpp_err=
-  fi
-else
-  ac_cpp_err=yes
-fi
-if test -z "$ac_cpp_err"; then
+  (exit $ac_status); } >/dev/null && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then
   :
 else
   echo "$as_me: failed program was:" >&5
@@ -4028,17 +3907,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } >/dev/null; then
-  if test -s conftest.err; then
-    ac_cpp_err=$ac_c_preproc_warn_flag
-    ac_cpp_err=$ac_cpp_err$ac_c_werror_flag
-  else
-    ac_cpp_err=
-  fi
-else
-  ac_cpp_err=yes
-fi
-if test -z "$ac_cpp_err"; then
+  (exit $ac_status); } >/dev/null && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then
   # Broken: success on invalid input.
 continue
 else
@@ -4093,7 +3965,7 @@
   for ac_prog in grep ggrep; do
   for ac_exec_ext in '' $ac_executable_extensions; do
     ac_path_GREP="$as_dir/$ac_prog$ac_exec_ext"
-    { test -f "$ac_path_GREP" && $as_executable_p "$ac_path_GREP"; } || continue
+    { test -f "$ac_path_GREP" && $as_test_x "$ac_path_GREP"; } || continue
     # Check for GNU ac_path_GREP and select it if it is found.
   # Check for GNU $ac_path_GREP
 case `"$ac_path_GREP" --version 2>&1` in
@@ -4175,7 +4047,7 @@
   for ac_prog in egrep; do
   for ac_exec_ext in '' $ac_executable_extensions; do
     ac_path_EGREP="$as_dir/$ac_prog$ac_exec_ext"
-    { test -f "$ac_path_EGREP" && $as_executable_p "$ac_path_EGREP"; } || continue
+    { test -f "$ac_path_EGREP" && $as_test_x "$ac_path_EGREP"; } || continue
     # Check for GNU ac_path_EGREP and select it if it is found.
   # Check for GNU $ac_path_EGREP
 case `"$ac_path_EGREP" --version 2>&1` in
@@ -4271,27 +4143,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   ac_cv_header_stdc=yes
 else
   echo "$as_me: failed program was:" >&5
@@ -4467,27 +4322,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   eval "$as_ac_Header=yes"
 else
   echo "$as_me: failed program was:" >&5
@@ -4550,27 +4388,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest.$ac_objext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
   ac_header_compiler=yes
 else
   echo "$as_me: failed program was:" >&5
@@ -4606,17 +4427,10 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } >/dev/null; then
-  if test -s conftest.err; then
-    ac_cpp_err=$ac_c_preproc_warn_flag
-    ac_cpp_err=$ac_cpp_err$ac_c_werror_flag
-  else
-    ac_cpp_err=
-  fi
-else
-  ac_cpp_err=yes
-fi
-if test -z "$ac_cpp_err"; then
+  (exit $ac_status); } >/dev/null && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then
   ac_header_preproc=yes
 else
   echo "$as_me: failed program was:" >&5
@@ -4883,27 +4697,11 @@
   rm -f conftest.er1
   cat conftest.err >&5
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } &&
-	 { ac_try='test -z "$ac_c_werror_flag" || test ! -s conftest.err'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; } &&
-	 { ac_try='test -s conftest$ac_exeext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest$ac_exeext &&
+       $as_test_x conftest$ac_exeext; then
   eval "$as_ac_var=yes"
 else
   echo "$as_me: failed program was:" >&5
@@ -4934,6 +4732,7 @@
 
 SCRIPTS="build/bin/add_members:bin/add_members \
 build/bin/arch:bin/arch \
+build/bin/blow_away_htdig:bin/blow_away_htdig \
 build/bin/change_pw:bin/change_pw \
 build/bin/check_db:bin/check_db \
 build/bin/check_perms:bin/check_perms \
@@ -4978,6 +4777,10 @@
 build/cron/gate_news:cron/gate_news \
 build/cron/mailpasswds:cron/mailpasswds \
 build/cron/nightly_gzip:cron/nightly_gzip \
+build/cron/nightly_htdig:cron/nightly_htdig \
+build/cron/remote_nightly_htdig:cron/remote_nightly_htdig \
+build/cron/remote_nightly_htdig_noshare:cron/remote_nightly_htdig_noshare \
+build/cron/remote_nightly_htdig.pl:cron/remote_nightly_htdig.pl \
 build/cron/senddigests:cron/senddigests \
 "
 
@@ -5141,7 +4944,8 @@
 ## M4sh Initialization.  ##
 ## --------------------- ##
 
-# Be Bourne compatible
+# Be more Bourne compatible
+DUALCASE=1; export DUALCASE # for MKS sh
 if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
   emulate sh
   NULLCMD=:
@@ -5150,10 +4954,13 @@
   alias -g '${1+"$@"}'='"$@"'
   setopt NO_GLOB_SUBST
 else
-  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
+  case `(set -o) 2>/dev/null` in
+  *posix*) set -o posix ;;
+esac
+
 fi
-BIN_SH=xpg4; export BIN_SH # for Tru64
-DUALCASE=1; export DUALCASE # for MKS sh
+
+
 
 
 # PATH needs CR
@@ -5377,19 +5184,28 @@
   as_mkdir_p=false
 fi
 
-# Find out whether ``test -x'' works.  Don't use a zero-byte file, as
-# systems may use methods other than mode bits to determine executability.
-cat >conf$$.file <<_ASEOF
-#! /bin/sh
-exit 0
-_ASEOF
-chmod +x conf$$.file
-if test -x conf$$.file >/dev/null 2>&1; then
-  as_executable_p="test -x"
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
 else
-  as_executable_p=:
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+        test -d "$1/.";
+      else
+	case $1 in
+        -*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
 fi
-rm -f conf$$.file
+as_executable_p=$as_test_x
 
 # Sed expression to map a string onto a valid CPP name.
 as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
@@ -5405,7 +5221,7 @@
 # values after options handling.
 ac_log="
 This file was extended by $as_me, which was
-generated by GNU Autoconf 2.60a.  Invocation command line was
+generated by GNU Autoconf 2.61.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
@@ -5452,7 +5268,7 @@
 cat >>$CONFIG_STATUS <<_ACEOF
 ac_cs_version="\\
 config.status
-configured by $0, generated by GNU Autoconf 2.60a,
+configured by $0, generated by GNU Autoconf 2.61,
   with options \\"`echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`\\"
 
 Copyright (C) 2006 Free Software Foundation, Inc.
Index: mailman-2.1.9/configure.in
===================================================================
--- mailman-2.1.9.orig/configure.in	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/configure.in	2007-07-01 17:38:09.000000000 +0000
@@ -544,6 +544,7 @@
 AC_DEFUN(MM_SCRIPTS, [dnl
 bin/add_members \
 bin/arch \
+bin/blow_away_htdig \
 bin/change_pw \
 bin/check_db \
 bin/check_perms \
@@ -588,6 +589,10 @@
 cron/gate_news \
 cron/mailpasswds \
 cron/nightly_gzip \
+cron/nightly_htdig \
+cron/remote_nightly_htdig \
+cron/remote_nightly_htdig_noshare \
+cron/remote_nightly_htdig.pl \
 cron/senddigests \
 ])
 
Index: mailman-2.1.9/cron/Makefile.in
===================================================================
--- mailman-2.1.9.orig/cron/Makefile.in	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/cron/Makefile.in	2007-07-01 17:38:09.000000000 +0000
@@ -42,7 +42,9 @@
 SHELL=		/bin/sh
 
 PROGRAMS=	checkdbs mailpasswds senddigests gate_news \
-		nightly_gzip bumpdigests disabled
+		nightly_gzip bumpdigests disabled \
+		nightly_htdig remote_nightly_htdig \
+		remote_nightly_htdig_noshare remote_nightly_htdig.pl
 FILES=  	crontab.in
 
 BUILDDIR=	../build/cron
Index: mailman-2.1.9/cron/crontab.in.in
===================================================================
--- mailman-2.1.9.orig/cron/crontab.in.in	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/cron/crontab.in.in	2007-07-01 18:39:39.000000000 +0000
@@ -18,6 +18,11 @@
 # or want to exclusively use a callback strategy instead of polling.
 0,5,10,15,20,25,30,35,40,45,50,55 * * * * @PYTHON@ -S @prefix@/cron/gate_news
 #
+# At 2:19am every night, regenerate htdig search files.  Only
+# turn this on if the internal archiver is used and htdig
+# use enabled in mm_cfg.py with USE_HTDIG
+19 2 * * * @PYTHON@ -S @prefix@/cron/nightly_htdig
+#
 # At 3:27am every night, regenerate the gzip'd archive file.  Only
 # turn this on if the internal archiver is used and
 # GZIP_ARCHIVE_TXT_FILES is false in mm_cfg.py
Index: mailman-2.1.9/cron/nightly_htdig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/cron/nightly_htdig	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,155 @@
+#! @PYTHON@
+# 
+# Copyright (C) 2002 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+#
+"""Re-generate the htdig archive search files.
+
+This script should normally be run nightly from cron.  When run from the
+command line, the following usage is understood:
+
+Usage: %(program)s [-v] [-h] [listnames]
+
+Where:
+    --verbose / -v
+        print each list as htdig is run for it
+
+    listnames
+        Optionally, only runs htdig for the named lists.  Without 
+        this, all archivable lists are processed.
+
+    --help / -h
+        print this message and exit
+
+"""
+
+# this code was derived from the nightly_gzip cron script
+
+import sys
+import os
+from stat import *
+import time
+from types import *
+import getopt
+import paths
+import errno
+from Mailman import MailList
+from Mailman import Utils
+from Mailman import mm_cfg
+from Mailman.Archiver import HyperArch
+from Mailman.i18n import _
+
+program = sys.argv[0]
+
+def usage(code, msg=''):
+    print >> sys.stderr, _( __doc__)
+    if msg:
+        print msg
+    sys.exit(code)
+
+def main():
+    try:
+        opts, args = getopt.getopt(sys.argv[1:], 'vh', ['verbose', 'help'])
+    except getopt.error, msg:
+        usage(1, msg)
+
+    # defaults
+    verbose = 0
+    for opt, arg in opts:
+        if opt in ('-h', '--help'):
+            usage(0)
+        elif opt in ('-v', '--verbose'):
+            verbose = 1
+ 
+    # limit to the specified lists?
+    if args:
+        listnames = args
+    else:
+        listnames = Utils.list_names()
+
+    # process all the specified lists
+    for name in listnames:
+        mlist = MailList.MailList(name, lock=0)
+        if not mlist.archive:
+            continue
+        archive_dir = mlist.archive_dir()
+        try:
+            os.listdir(archive_dir)
+        except os.error:
+            # has the list received any messages?  if not,
+            # last_post_time will
+            # be zero, so it's not really a bogus archive dir.
+            if mlist.last_post_time > 0:
+                print _(
+                    'List %(name)s has a bogus archive dir: %(archive_dir)s')
+            continue
+        
+        # check htdig has been set up for this list and skip it if not
+        list_htdig_dir = os.path.join(archive_dir, 'htdig')
+        if not os.path.exists(list_htdig_dir):
+            if verbose:
+		print _('Skipping htdig for list; no htdig setup: %(name)s')
+            continue
+         
+        # check if there have been any archive files created since we
+        # last ran htdig and skip list if not. well actually we only
+        # test if the archive volume directories mod times have 
+        # changed        
+        recent_posts = None
+        rundig_run_file = os.path.join(list_htdig_dir, 'rundig_last_run')
+        archive = HyperArch.HyperArchive(mlist)
+        try:
+            last_rundig_time = os.stat(rundig_run_file)[ST_MTIME]
+        except OSError, e:
+            if e.errno <> errno.ENOENT: raise
+            open(rundig_run_file, 'w').close()
+            recent_posts = 1
+        else:
+            for volume in archive.archives:
+                archive_name = os.path.join(archive_dir, volume)
+                last_archive_change = os.stat(archive_name)[ST_MTIME]
+                if last_archive_change > last_rundig_time:
+                    recent_posts = 1
+                    break
+        if not recent_posts:
+            if verbose:
+                print _('Skipping htdig for list; no recent posts: %(name)s')
+            continue
+        
+        # ok, so running htdig is worthwhile
+        if verbose:
+            print _("htdig'ing archive of list: %(name)s")
+        htdig_conf_file = os.path.join(list_htdig_dir, name + '.conf')
+        cmd = '%s -c %s' % (mm_cfg.HTDIG_RUNDIG_PATH, htdig_conf_file)
+        status = (os.system(cmd) >> 8) & 0xff
+        if status:
+            print _('rundig failed for list %(name)s, exit code: %(status)s')
+        else:
+            os.utime(rundig_run_file, None)
+            archive.write_TOC()
+
+if __name__ == '__main__' and \
+   mm_cfg.USE_HTDIG and \
+   mm_cfg.ARCHIVE_TO_MBOX in (0, 2) and \
+   os.path.exists(mm_cfg.HTDIG_RUNDIG_PATH):
+    # we're only going to run the nightly rundig if messages are
+    # archived to the internal archiver, we are using htdig to provide
+    # archive search and we know where rundig is.
+    omask = os.umask(002)
+    try:
+        main()
+    finally:
+        os.umask(omask)
Index: mailman-2.1.9/cron/remote_nightly_htdig
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/cron/remote_nightly_htdig	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,163 @@
+#! @PYTHON@
+# 
+# Copyright (C) 2002 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+#
+"""Python script to re-generate the htdig archive search files. Read 
+INSTALL.htdig-mm to determine if you should be running this script.
+
+This script has to be edited before use to provide a value for the
+configuration parameter MAILMAN_PATH. The value should be the path 
+to Mailman's installation directory as seen by the script.
+
+This script should normally be run nightly from cron.  When run from the
+command line, the following usage is understood:
+
+Usage: %(program)s [-v] [-h] [listnames]
+
+Where:
+    --verbose / -v
+        print each list as htdig is run for it
+
+    --help / -h
+        print this message and exit
+
+    listnames
+        Optionally, only runs htdig for the named lists.  Without 
+        this, all archivable lists are processed.
+
+"""
+
+# this code was derived from the nightly_gzip cron script
+
+MAILMAN_PATH = ''
+
+import sys
+import os
+from stat import *
+import time
+import getopt
+import string
+from types import *
+import errno
+
+import urllib, urlparse
+import paths
+
+program = sys.argv[0]
+
+def usage(code, msg=''):
+    print >> sys.stderr, _( __doc__)
+    if msg:
+        print msg
+    sys.exit(code)
+
+def main():
+    try:
+        opts, args = getopt.getopt(sys.argv[1:], 'vhm', ['verbose', 'help'])
+    except getopt.error, msg:
+        usage(1, msg)
+    # defaults
+    verbose = 0
+    for opt, arg in opts:
+        if opt in ('-h', '--help'):
+            usage(0)
+        elif opt in ('-v', '--verbose'):
+            verbose = 1
+    # limit to the specified lists?
+    if args:
+        listnames = map(string.lower, args)
+    else:
+        listnames = Utils.list_names()
+    # process all the specified lists
+    for name in listnames:
+        mlist = MailList.MailList(name, lock=0)
+        if not mlist.archive:
+            continue
+        archive_dir = os.path.join(mm_cfg.REMOTE_PRIVATE_ARCHIVE_FILE_DIR,
+                                   name + '/')
+        try:
+            os.listdir(archive_dir)
+        except os.error:
+            # has the list received any messages?  if not, last_post_time 
+            # will be zero, so it's not really a bogus archive dir.
+            if mlist.last_post_time > 0:
+                print _(
+                     'List %(name)s has a bogus archive dir: %(archive_dir)s')
+            continue
+        # check htdig has been set up for this list and skip it if not
+        list_htdig_dir = os.path.join(archive_dir, 'htdig')
+        if not os.path.exists(list_htdig_dir):
+            if verbose:
+                print _(
+		  'Skipping remote htdig for list; nno htdig setup: %(name)s')
+            continue
+        # check if there have been any archive files created since we
+        # last ran htdig and skip list if not. well actually we only
+        # test if the archive volume directories mod times have changed        
+        recent_posts = None
+        rundig_run_file = os.path.join(list_htdig_dir, 'rundig_last_run')
+        archive = HyperArch.HyperArchive(mlist)
+        try:      
+            last_rundig_time = os.stat(rundig_run_file)[ST_MTIME]
+        except OSError, e:
+            if e.errno <> errno.ENOENT: raise
+            open(rundig_run_file, 'w').close()
+            recent_posts = 1
+        else:
+            for volume in archive.archives:
+                archive_name = os.path.join(archive_dir, volume)
+                last_archive_change = os.stat(archive_name)[ST_MTIME]
+                if last_archive_change > last_rundig_time:
+                    recent_posts = 1
+                    break
+        if not recent_posts:
+            if verbose:
+                print _('Skipping htdig for list; no recent posts: %(name)s')
+            continue
+        # ok, so running htdig is worthwhile
+        if verbose:
+            print _("htdig'ing archive of list: %(name)s")
+        htdig_conf_file = os.path.join(list_htdig_dir, name + '.conf')
+        cmd = '%s -c %s' % (mm_cfg.HTDIG_RUNDIG_PATH, htdig_conf_file)
+        status = (os.system(cmd) >> 8) & 0xff
+        if status:
+            print _('rundig failed for list %(name)s, exit code: %(status)s')
+        else:
+            os.utime(rundig_run_file, None)
+
+if __name__ == '__main__' and os.path.exists(MAILMAN_PATH):
+    # Access the mailman installation
+    sys.path = [MAILMAN_PATH] + sys.path
+    from Mailman import MailList
+    from Mailman import Utils
+    from Mailman import mm_cfg
+    from Mailman.Archiver import HyperArch
+    from Mailman.i18n import _
+    if mm_cfg.USE_HTDIG and \
+       mm_cfg.ARCHIVE_TO_MBOX in (0, 2) and \
+       os.path.exists(mm_cfg.HTDIG_RUNDIG_PATH):
+        # we're only going to run the nightly rundig if messages are archived to
+        # the internal archiver, we are using htdig to provide archive search
+        # and we know where rundig is.
+        omask = os.umask(002)
+        try:
+            main()
+        finally:
+            os.umask(omask)
+else:
+    print  'Invalid configuration variables'  
+    print  'Edit this script in accordance with INSTALL.htdig-mm'
Index: mailman-2.1.9/cron/remote_nightly_htdig.pl
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/cron/remote_nightly_htdig.pl	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,151 @@
+#! /usr/bin/env perl
+# 
+# Copyright (C) 2002 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+#
+
+# this code was derived from the nightly_gzip cron script
+
+my $REMOTE_PRIVATE_ARCHIVE_FILE_DIR = '';
+my $HTDIG_RUNDIG_PATH = '';
+
+use strict;
+use File::Spec;
+use File::stat;
+use LWP::Simple;
+use Getopt::Long;
+
+my $doc = <<EOT;
+Perl version of the script to re-generate the htdig archive search files.
+
+Read INSTALL.htdig-mm to determine if you should be running this script.
+
+This script has to be edited before use to provide values for the
+configuration parameters REMOTE_PRIVATE_ARCHIVE_FILE_DIR and
+HTDIG_RUNDIG_PATH. The values should be the same as those acquired by
+Mailman's python scripts from \$prefix/Mailman/Defaults.py or overridden
+in \$prefix/Mailman/mm_cfg.py.
+
+This script should normally be run nightly from cron.  When run from the
+command line, the following usage is understood:
+
+Usage: remote_nightly_htdig.pl [-v] [-h] [listnames]
+
+Where:
+    --verbose / -v
+        print each list as htdig is run for it
+
+    --help / -h
+        print this message and exit
+
+    listnames
+        Optionally, only runs htdig for the named lists.  Without 
+        this, all archivable lists are processed.
+
+EOT
+
+my $VERBOSE = 0;
+my $omask;
+
+sub usage {
+    my ($code, $msg) = @_;
+    print $doc;
+    print $msg if $msg;
+    umask($omask);
+    exit($code);
+}
+
+sub main {
+    my $help;
+    GetOptions("verbose" => \$VERBOSE,
+               "help" => \$help);
+    if ($help) {
+        usage(0);
+    }
+    # limit to the specified lists?
+    my @listnames = ();
+    if (scalar(@ARGV)) {
+        @listnames = map lc, @ARGV;
+    } else {
+        opendir(DIR, $REMOTE_PRIVATE_ARCHIVE_FILE_DIR);
+        @listnames = grep { $_ ne '.' and $_ ne '..' and ! /\.mbox$/ } readdir DIR;
+        closedir(DIR);
+    }
+    # process all the specified lists
+    foreach my $name (@listnames) {
+        my $archive_dir = File::Spec->catfile($REMOTE_PRIVATE_ARCHIVE_FILE_DIR, $name);
+        next if (-e not $archive_dir);
+        # check htdig has been set up for this list and skip it if not
+        my $list_htdig_dir = File::Spec->catfile($archive_dir, 'htdig');
+        if (not -e $list_htdig_dir) {
+            print "Skipping remote htdig for list $name, no htdig setup\n" if $VERBOSE;
+            next
+        }
+        # check if there have been any archive files created since we
+        # last ran htdig and skip list if not. well actually we only
+        # test if the archive volume directories mod times have changed        
+        my $recent_posts = 0;
+        my $rundig_run_file = File::Spec->catfile($list_htdig_dir, 'rundig_last_run');
+        if (-e $rundig_run_file){      
+            my $last_rundig_time = stat($rundig_run_file)->mtime();
+            opendir(DIR, $archive_dir);
+            my @volumes = grep { $_ ne '.' and $_ ne '..' } readdir DIR;
+            closedir(DIR);
+            foreach my $volume (@volumes) {
+                my $archive_name = File::Spec->catfile($archive_dir, $volume);
+                my $last_archive_change = stat($archive_name)->mtime();
+                if ($last_archive_change > $last_rundig_time) {
+                    $recent_posts = 1;
+                    last;
+                }
+            }
+        } else {
+            $recent_posts = 1;
+        }
+        if (not $recent_posts) {
+            if ($VERBOSE) {
+                print "Skipping htdig for list $name, no recent posts\n";
+            }
+            next;
+        }
+        # ok, so running htdig is worthwhile
+        if ($VERBOSE) {
+            print "htdig'ing archive of list $name\n";
+        }
+        my $htdig_conf_file = File::Spec->catfile($list_htdig_dir, $name.'.conf');
+        my @cmd = ($HTDIG_RUNDIG_PATH, '-c', $htdig_conf_file);
+        my $status = system(@cmd) >> 8 & 0xFF;
+        if ($status) {
+            print "rundig failed for list, $name, exit code, $status\n";
+        } else {
+            system(("touch", $rundig_run_file));
+        }
+    }
+}
+
+if (-x $HTDIG_RUNDIG_PATH  and
+    -d $REMOTE_PRIVATE_ARCHIVE_FILE_DIR) {
+    # we're only going to run the nightly rundig if we have a sensible
+    # set of configuration variables and we know where rundig is.
+    $omask = umask;
+    umask(002);
+    eval { main() };
+    my $res = $@;
+    umask($omask);
+    die $res if ($res);
+} else {
+    die "Invalid configuration variables.\nEdit this script in accordance with INSTALL.htdig-mm\n";
+}
Index: mailman-2.1.9/cron/remote_nightly_htdig_noshare
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/cron/remote_nightly_htdig_noshare	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,151 @@
+#! @PYTHON@
+# 
+# Copyright (C) 2002 by the Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software 
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+#
+"""Python script to re-generate the htdig archive search files. Read
+INSTALL.htdig-mm to determine if you should be running this script.
+
+This script has to be edited before use to provide values for the
+configuration parameters REMOTE_PRIVATE_ARCHIVE_FILE_DIR and
+HTDIG_RUNDIG_PATH. The values should be the same as those acquired by
+other of Mailman's python code from $prefix/Mailman/Defaults.py or 
+overridden in $prefix/Mailman/mm_cfg.py.
+
+This script should normally be run nightly from cron.  When run from the
+command line, the following usage is understood:
+
+Usage: %(program)s [-v] [-h] [listnames]
+
+Where:
+    --verbose / -v
+        print each list as htdig is run for it
+
+    --help /-h
+        print this message and exit
+
+    listnames
+        Optionally, only runs htdig for the named lists.  Without 
+        this, all archivable lists are processed.
+
+"""
+
+# this code was derived from the nightly_gzip cron script
+
+REMOTE_PRIVATE_ARCHIVE_FILE_DIR = ''
+HTDIG_RUNDIG_PATH = ''
+
+import sys
+import os
+from stat import *
+import time
+from types import *
+import getopt
+import urllib
+import urlparse
+import string
+import errno
+
+program = sys.argv[0]
+
+def usage(code, msg=''):
+    print __doc__ % globals()
+    if msg:
+        print msg
+    sys.exit(code)
+
+def main():
+    try:
+        opts, args = getopt.getopt(sys.argv[1:], 'vhm', ['verbose', 'help'])
+    except getopt.error, msg:
+        usage(1, msg)
+
+    # defaults
+    verbose = 0
+    for opt, arg in opts:
+        if opt in ('-h', '--help'):
+            usage(0)
+        elif opt in ('-v', '--verbose'):
+            verbose = 1
+    # limit to the specified lists?
+    if args:
+        listnames = map(string.lower, args)
+    else:
+        listnames = filter(lambda m: m[-5:] != '.mbox',
+                           os.listdir(REMOTE_PRIVATE_ARCHIVE_FILE_DIR))
+    # process all the specified lists
+    listnames.sort()
+    for name in listnames:
+        archive_dir = os.path.join(REMOTE_PRIVATE_ARCHIVE_FILE_DIR, name)
+        # check if this list has an archive and skip it if not
+        if not os.path.exists(archive_dir):
+            if verbose:
+                print 'Skipping remote htdig for list', name, 'no archive'
+            continue
+        # check htdig has been set up for this list and skip it if not
+        list_htdig_dir = os.path.join(archive_dir, 'htdig')
+        if not os.path.exists(list_htdig_dir):
+            if verbose:
+                print 'Skipping remote htdig for list', name, 'no htdig setup'
+            continue         
+        # check if there have been any archive files created since we
+        # last ran htdig and skip list if not. well actually we only
+        # test if the archive volume directories mod times have changed        
+        recent_posts = None
+        rundig_run_file = os.path.join(list_htdig_dir, 'rundig_last_run')
+        try:
+            last_rundig_time = os.stat(rundig_run_file)[ST_MTIME]
+        except OSError, e:
+            if e.errno <> errno.ENOENT: raise
+            open(rundig_run_file, 'w').close()
+            recent_posts = 1
+        else:
+            for volume in os.listdir(archive_dir):
+                archive_name = os.path.join(archive_dir, volume)
+                last_archive_change = os.stat(archive_name)[ST_MTIME]
+                if last_archive_change > last_rundig_time:
+                    recent_posts = 1
+                    break
+        if not recent_posts:
+            if verbose:
+                print 'Skipping htdig for list', name, 'no recent posts'
+            continue
+        # ok, so running htdig is worthwhile
+        if verbose:
+            print "htdig'ing archive of list", name
+        htdig_conf_file = os.path.join(list_htdig_dir, name + '.conf')
+        cmd = '%s -c %s' % (HTDIG_RUNDIG_PATH, htdig_conf_file)
+        status = (os.system(cmd) >> 8) & 0xff
+        if status:
+            print 'rundig failed for list %s, exit code: %s' % (name, status)
+        else:
+            os.utime(rundig_run_file, None)
+
+if __name__ == '__main__' and \
+   os.path.exists(REMOTE_PRIVATE_ARCHIVE_FILE_DIR) and \
+   os.path.exists(HTDIG_RUNDIG_PATH):
+    # we're only going to run the nightly rundig if we have a sensible
+    # set of configuration variables and we know where rundig is.
+    omask = os.umask(002)
+    try:
+        main()
+    finally:
+        os.umask(omask)
+else:
+    print "Invalid configuration variables"
+    print "Edit this script in accordance with INSTALL.htdig-mm"
+
+
Index: mailman-2.1.9/src/Makefile.in
===================================================================
--- mailman-2.1.9.orig/src/Makefile.in	2007-07-01 17:37:42.000000000 +0000
+++ mailman-2.1.9/src/Makefile.in	2007-07-01 17:38:09.000000000 +0000
@@ -71,7 +71,8 @@
 # Fixed definitions
 
 CGI_PROGS= admindb admin confirm create edithtml listinfo options \
-	private rmlist roster subscribe
+	private rmlist roster subscribe \
+	htdig mmsearch
 
 COMMONOBJS= common.o vsnprintf.o
 
@@ -79,7 +80,7 @@
 
 #ALIAS_PROGS= addaliases
 
-SUID_CGI_PROGS= private
+SUID_CGI_PROGS= private htdig mmsearch
 
 SUID_MAIL_PROGS=
 
Index: mailman-2.1.9/templates/da/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/da/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/da/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       eller du kan <a href="%(fullarch)s">downloade hele arkivet</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/en/TOC_htsearch.html
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/templates/en/TOC_htsearch.html	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,40 @@
+     <p>
+     To search this archive fill in the following form:
+     </p>
+     <p>
+       <form method="post" action="%(mmsearchcgi)s">
+       <font size="-1">
+       Match: <select name="method">
+         <option value="and">All
+         <option value="or">Any
+         <option value="boolean">Boolean
+       </select>
+       Format: <select name="format">
+         <option value="short">Short
+         <option value="long">Long
+       </select>
+       Sort by: <select name="sort">
+         <option value="score">Score
+         <option value="time">Time
+         <option value="title">Title
+         <option value="revscore">Reverse Score
+         <option value="revtime">Reverse Time
+         <option value="revtitle">Reverse Title
+       </select>
+       </font>
+       <input type="hidden" name="config" value="%(listname)s%(htsearchconf)s">
+       <!-- input type="hidden" name="restrict" value="">
+       <input type="hidden" name="exclude" value="" -->
+       <br>
+       Search:
+         <input type="text" size="30" name="words" value="">
+         <input type="submit" value="Search">
+       </form>
+     </p>
+     <p>
+         <STRONG>Note:</STRONG>The archive search index was last rebuilt at 
+         %(lastrun)s. Any postings after that will not be found by 
+         a search. Index rebuild is usally done once every 24 hours for 
+         this list. You can use a "View by date" link below to access 
+         more recent postings.
+     </p>
Index: mailman-2.1.9/templates/en/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/en/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/en/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       or you can <a href="%(fullarch)s">download the full raw archive</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/en/archtocnombox.html
===================================================================
--- mailman-2.1.9.orig/templates/en/archtocnombox.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/en/archtocnombox.html	2007-07-01 17:38:09.000000000 +0000
@@ -11,6 +11,7 @@
      <p>
       You can get <a href="%(listinfo)s">more information about this list</a>.
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/en/htdig.html
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/templates/en/htdig.html	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,43 @@
+<html>
+<head>
+    <title>%(realname)s Private Archives Authentication</title>
+</head>
+<body bgcolor="#ffffff">
+<FORM METHOD=POST ACTION="%(action)s">
+%(message)s
+  <TABLE WIDTH="100%%" BORDER="0" CELLSPACING="4" CELLPADDING="5">
+    <TR>
+      <TD COLSPAN="2" WIDTH="100%%" BGCOLOR="#99CCFF" ALIGN="CENTER">
+	<B><FONT COLOR="#000000" SIZE="+1">%(realname)s Private
+	    Archives Authentication</FONT></B>
+      </TD>
+    </TR>
+    <tr>
+        <TD><div ALIGN="Right">Email address:</div></TD>
+        <TD><INPUT TYPE="text" NAME="username" SIZE="30"></TD>
+    </tr>
+    <tr>
+      <TD><div ALIGN="Right">Password:</div></TD>
+      <TD><INPUT TYPE="password" NAME="password" SIZE="30"></TD>
+    </tr>
+    <tr>
+      <td colspan=2 align="middle"><INPUT type="SUBMIT"
+                                          name="submit"
+					  value="Let me in...">
+      </td>
+    </tr>
+  </TABLE>
+      <p><strong><em>Important:</em></strong> From this point on, you
+      must have cookies enabled in your browser, otherwise no
+      administrative changes will take effect.
+
+      <p>Session cookies are used in Mailman's
+      administrative interface so that you don't need to
+      re-authenticate with every administrative operation.  This
+      cookie will expire automatically when you exit your browser, or
+      you can explicitly expire the cookie by hitting the
+      <em>Logout</em> link under <em>Other Administrative
+      Activities</em> (which you'll see once you successfully log in).
+</FORM>
+</body>
+</html>
Index: mailman-2.1.9/templates/en/htdig_access_error.html
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/templates/en/htdig_access_error.html	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,22 @@
+<HTML>
+<HEAD>
+    <TITLE>htdig Archives Access Failure</TITLE> 
+</HEAD>
+<BODY BGCOLOR="#ffffff">
+<H1>htdig Archives Access Failure</H1> 
+%(error)s
+<P>
+    If you want to make another attempt to access a list archive then go via the 
+    list users <A HREF="%(listinfo_link)s">information page</A>.
+</P>
+<P>
+    If this problem persists then please e-mail the following information to the 
+<A HREF="mailto:%(mailto)s">%(mailto)s</A>:
+</P>
+<PRE>
+    %(referer)s
+    %(uri)s
+</PRE>
+<HR>
+</BODY>
+</HTML>
Index: mailman-2.1.9/templates/en/htdig_auth_failure.html
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/templates/en/htdig_auth_failure.html	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,22 @@
+<P>
+    You are not authorised to access the URL referenced.
+</P>
+<P>
+    This access failure may be due to: 
+</P>
+<OL>
+    <LI>
+        If cookies are disabled in your browser then your attempt to 
+        authenticate yourself for access to the desired list will have 
+        been compromised. You should enable cookies in your browser and 
+        try again. 
+    </LI>
+    <LI>
+        You have not attempted to authenticate yourself and are trying 
+        to access private data. 
+    </LI>
+    <LI>
+        An earlier attempt to authenticate yourself for access to private 
+        data failed. 
+    </LI>
+</OL>
Index: mailman-2.1.9/templates/en/htdig_conf.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ mailman-2.1.9/templates/en/htdig_conf.txt	2007-07-01 17:38:09.000000000 +0000
@@ -0,0 +1,53 @@
+# There is nothing to language translate in this template which is for the
+# Mailman-htdig integration
+#
+# This is taken from the example config file for ht://Dig, with most comments excised
+# See the htdig.conf from the distribution you have installed
+#
+# This is the template for the per mailing list htddig.conf files
+#
+%(htdig_extras)s
+database_dir: %(databases)s
+start_url: %(starturl)s
+limit_urls_to: ${start_url}
+local_urls: %(urlpath)s=%(filepath)s
+local_urls_only: true
+url_part_aliases: %(url_part_aliases)s
+script_name: %(mmsearchcgi)s
+noindex_end: %(indexing_enable)s
+noindex_start: %(indexing_disable)s
+exclude_urls: %(excluded_urls)s
+bad_extensions: .wav .gz .z .sit .au .zip .tar .hqx .exe .com .gif \
+                .jpg .jpeg .aiff .class .map .ram .tgz .bin .rpm .mpg .mov .avi 
+maintainer: %(maintainer)s
+max_head_length: 10000
+max_doc_size: 200000
+no_excerpt_show_top: true
+search_algorithm: exact:1 synonyms:0.5 endings:0.1
+template_map: Long long ${common_dir}/long.html \
+              Short short ${common_dir}/short.html
+template_name: short
+next_page_text: <img src="%(htdig_url)s/buttonr.gif" border="0" align="middle" width="30" height="30" alt="next">
+no_next_page_text:
+prev_page_text: <img src="%(htdig_url)s/buttonl.gif" border="0" align="middle" width="30" height="30" alt="prev">
+no_prev_page_text:
+page_number_text: '<img src="%(htdig_url)s/button1.gif" border="0" align="middle" width="30" height="30" alt="1">' \
+            '<img src="%(htdig_url)s/button2.gif" border="0" align="middle" width="30" height="30" alt="2">' \
+            '<img src="%(htdig_url)s/button3.gif" border="0" align="middle" width="30" height="30" alt="3">' \
+            '<img src="%(htdig_url)s/button4.gif" border="0" align="middle" width="30" height="30" alt="4">' \
+            '<img src="%(htdig_url)s/button5.gif" border="0" align="middle" width="30" height="30" alt="5">' \
+            '<img src="%(htdig_url)s/button6.gif" border="0" align="middle" width="30" height="30" alt="6">' \
+            '<img src="%(htdig_url)s/button7.gif" border="0" align="middle" width="30" height="30" alt="7">' \
+            '<img src="%(htdig_url)s/button8.gif" border="0" align="middle" width="30" height="30" alt="8">' \
+            '<img src="%(htdig_url)s/button9.gif" border="0" align="middle" width="30" height="30" alt="9">' \
+            '<img src="%(htdig_url)s/button10.gif" border="0" align="middle" width="30" height="30" alt="10">'
+no_page_number_text: '<img src="%(htdig_url)s/button1.gif" border="2" align="middle" width="30" height="30" alt="1">' \
+            '<img src="%(htdig_url)s/button2.gif" border="2" align="middle" width="30" height="30" alt="2">' \
+            '<img src="%(htdig_url)s/button3.gif" border="2" align="middle" width="30" height="30" alt="3">' \
+            '<img src="%(htdig_url)s/button4.gif" border="2" align="middle" width="30" height="30" alt="4">' \
+            '<img src="%(htdig_url)s/button5.gif" border="2" align="middle" width="30" height="30" alt="5">' \
+            '<img src="%(htdig_url)s/button6.gif" border="2" align="middle" width="30" height="30" alt="6">' \
+            '<img src="%(htdig_url)s/button7.gif" border="2" align="middle" width="30" height="30" alt="7">' \
+            '<img src="%(htdig_url)s/button8.gif" border="2" align="middle" width="30" height="30" alt="8">' \
+            '<img src="%(htdig_url)s/button9.gif" border="2" align="middle" width="30" height="30" alt="9">' \
+            '<img src="%(htdig_url)s/button10.gif" border="2" align="middle" width="30" height="30" alt="10">'
Index: mailman-2.1.9/templates/fr/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/fr/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/fr/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -12,6 +12,7 @@
 	propos de cette  liste</a> ou vous pouvez&nbsp; <a href="%(fullarch)s">t&eacute;l&eacute;charger les archives compl&egrave;tes</a>
        (%(size)s).      
 	</p>
+     %(htsearch)s
         %(noarchive_msg)s      
 	%(archive_listing_start)s      
 	%(archive_listing)s 
Index: mailman-2.1.9/templates/hr/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/hr/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/hr/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       ili moæete <a href="%(fullarch)s">downloadati cijelu arhivu</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/hu/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/hu/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/hu/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       vagy letˆltheted a <a href="%(fullarch)s">teljes nyers archÌvum·t</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/it/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/it/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/it/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
      o puoi <a href="%(fullarch)s">scaricare l'intero archivio grezzo</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/it/archtocnombox.html
===================================================================
--- mailman-2.1.9.orig/templates/it/archtocnombox.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/it/archtocnombox.html	2007-07-01 17:38:09.000000000 +0000
@@ -11,6 +11,7 @@
      <p>
       <a href="%(listinfo)s">Maggiori informazioni su questa lista</a>.
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/ja/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/ja/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/ja/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       <a href="%(fullarch)s">¡¥…Ù§Œ•·°º•Î§Úmbox∑¡º∞§«•¿•¶•Û•Ì°º•…</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/lt/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/lt/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/lt/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -12,6 +12,7 @@
       <a href="%(fullarch)s">»ia - atsisi¯sti vis‡ forumo archyv‡</a>.
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/no/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/no/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/no/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       eller du kan <a href="%(fullarch)s">laste ned hele arkivet</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/no/archtocnombox.html
===================================================================
--- mailman-2.1.9.orig/templates/no/archtocnombox.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/no/archtocnombox.html	2007-07-01 17:38:09.000000000 +0000
@@ -11,6 +11,7 @@
      <p>
       Du kan se <a href="%(listinfo)s">mer informasjon om denne listen</a>.
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/pl/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/pl/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/pl/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       albo <a href="%(fullarch)s">∂ci±gn±Ê ca≥e archiwum</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/pt/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/pt/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/pt/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -14,6 +14,7 @@
 	  n„o processado</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/ro/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/ro/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/ro/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -14,6 +14,7 @@
       sau pute˛i <a href="%(fullarch)s">desc„rca Óntreaga arhiv„ Ón form„ brut„</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/ru/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/ru/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/ru/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -12,6 +12,7 @@
      “¡””ŸÃÀ….  ˜Ÿ ‘¡À÷≈ Õœ÷≈‘≈ <a href="%(fullarch)s">⁄¡«“’⁄…‘ÿ</a> ◊≈”ÿ
      ¡“»…◊ ◊ ∆œ“Õ¡‘≈ mbox (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/sl/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/sl/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/sl/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       ali pa <a href="%(fullarch)s">prenesete celoten raw arhiv</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/tr/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/tr/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/tr/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       veya <a href="%(fullarch)s">t¸m ar˛ivi indirebilirsiniz</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
Index: mailman-2.1.9/templates/uk/archtoc.html
===================================================================
--- mailman-2.1.9.orig/templates/uk/archtoc.html	2007-07-01 17:38:09.000000000 +0000
+++ mailman-2.1.9/templates/uk/archtoc.html	2007-07-01 17:38:09.000000000 +0000
@@ -13,6 +13,7 @@
       –∞–±–æ <a href="%(fullarch)s">–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ mbox</a>
       (%(size)s).
      </p>
+     %(htsearch)s
      %(noarchive_msg)s
      %(archive_listing_start)s
      %(archive_listing)s
