.TH withlist 8 2004-03-24
.SH NAME
withlist \- General framework for interacting with a mailing list object.

.SH SYNOPSIS
withlist [options] listname [args ...]

There are two ways to use this script: interactively or programmatically.
Using it interactively allows you to play with, examine and modify a MailList
object from Python's interactive interpreter.  When running interactively, a
MailList object called `m' will be available in the global namespace.  It also
loads the class MailList into the global namespace.

Programmatically, you can write a function to operate on a MailList object,
and this script will take care of the housekeeping (see below for examples).
In that case, the general usage syntax is:

.SH OPTIONS
.PP
.TP
\fB\-l\fB, \fB\-\-lock\fB
Lock the list when opening.  Normally the list is opened unlocked
(e.g. for read-only operations).  You can always lock the file after
the fact by typing `m.Lock()'

Note that if you use this option, you should explicitly call m.Save()
before exiting, since the interpreter's clean up procedure will not
automatically save changes to the MailList object (but it will unlock
the list).
.TP
\fB\-i\fB, \fB\-\-interactive\fB
Leaves you at an interactive prompt after all other processing is
complete.  This is the default unless the \fB\-r\fB option is given.
.TP
\fB\-r\fB \fI[module.]callable\fI, \fB\-\-run\fB \fI[module.]callable\fI
This can be used to run a script with the opened MailList object.
This works by attempting to import \fImodule\f[] (which must already be
accessible on your sys.path), and then calling \fIcallable\f[] from the
module.  \fIcallable\f[] can be a class or function; it is called with the
MailList object as the first argument.  If additional args are given
on the command line, they are passed as subsequent positional args to
the callable.

Note that \fImodule.\f[] is optional; if it is omitted then a module with
the name \fIcallable\f[] will be imported.

The global variable `r' will be set to the results of this call.
.TP
\fB\-a\fB, \fB\-\-all\fB
This option only works with the \fB\-r\f[] option.  Use this if you want to
execute the script on all mailing lists.  When you use \fB\-a\f[] you should
not include a listname argument on the command line.  The variable `r'
will be a list of all the results.
.TP
\fB\-q\fB, \fB\-\-quiet\fB
Suppress all status messages.
.TP
\fB\-h\fB, \fB\-\-help\fB
Print a small help text and exit
.PP

.SH EXAMPLES
Here's an example of how to use the \fB\-r\f[] option.  Say you have a file in the
Mailman installation directory called `listaddr.py', with the following
two functions:

  def listaddr(mlist):
      print mlist.GetListEmail()

  def requestaddr(mlist):
      print mlist.GetRequestEmail()

Now, from the command line you can print the list's posting address by running
the following from the command line:

  % bin/withlist -r listaddr mylist
  Loading list: mylist (unlocked)
  Importing listaddr ...
  Running listaddr.listaddr() ...
  mylist@myhost.com

And you can print the list's request address by running:

  % bin/withlist -r listaddr.requestaddr mylist
  Loading list: mylist (unlocked)
  Importing listaddr ...
  Running listaddr.requestaddr() ...
  mylist-request@myhost.com

As another example, say you wanted to change the password for a particular
user on a particular list.  You could put the following function in a file
called `changepw.py':

  from Mailman.Errors import NotAMemberError

  def changepw(mlist, addr, newpasswd):
      try:
          mlist.setMemberPassword(addr, newpasswd)
          mlist.Save()
      except NotAMemberError:
          print 'No address matched:', addr

 and run this from the command line:
 % bin/withlist -l -r changepw mylist somebody@somewhere.org foobar
.PP

.SH AUTHOR
Author of Mailman is the Mailman Cabal, see http://www.list.org/ for
information.  This manpage is written for Debian by Bernd S. Brentrup
<bsb@debian.org>.

.SH SEE ALSO
Mailman documentation on http://www.list.org/ and in
/usr/share/doc/mailman.

