#!/usr/bin/perl
# ybmaint - perl script to maintain yearbook database
# Copyright (C) 2001  Simon James Kissane
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
use strict;
use DBI;

# Configuration Section
my $yearbook_db = "dbi:mysql:yr";
my $yearbook_user = "perl";
# End Configuration Section

my $dbh;

if ($#ARGV != 0) {
    die "invalid number of arguments - try 'ybmaint help' for instructions\n";
}
elsif ($ARGV[0] eq "help") {
    cmd_help ();
}
elsif ($ARGV[0] eq "init") {
    cmd_init ();
}
elsif ($ARGV[0] eq "clear") {
    cmd_clear ();
}
elsif ($ARGV[0] eq "load") {
    cmd_load ();
}
elsif ($ARGV[0] eq "dump") {
    cmd_dump ();
}
elsif ($ARGV[0] eq "hclear") {
    cmd_hclear ();
}
elsif ($ARGV[0] eq "hload") {
    cmd_hload ();
}
elsif ($ARGV[0] eq "hdump") {
    cmd_hdump ();
}
else {
    die "invalid command argument - try 'ybmaint help' for instructions\n";
}

# init_db - initialize connection to databae
sub init_db
{
    $dbh = DBI->connect("dbi:mysql:yr", "perl", "",
		       { RaiseError => 1 })
	|| die $DBI::errstr;
} 

# exit_db - terminate connection to database
sub exit_db
{
    $dbh->disconnect() || die $DBI::errstr;
}

# cmd_help - print usage
sub cmd_help
{
    print "ybmaint - maintain yearbook database\n";
    print "usage: ybmaint COMMAND\n";
    print "where COMMAND is one of:\n";
    print "\thelp\t- display this message\n";
    print "\tinit\t- initialize database\n";
    print "\tclear\t- empty database of facts\n";
    print "\tload\t- load facts into database from standard input\n";
    print "\tdump\t- dump facts to standard output\n";
    print "\thclear\t- empty database of headings\n";
    print "\thload\t- load headings into database from standard input\n";
    print "\thdump\t- dump headings to standard output\n";
}

# cmd_init - initialize database
sub cmd_init
{
    init_db ();
    $dbh->do("create table headings (etype varchar(6) primary key, heading varchar(255), name varchar(40), prio int(11) not null)")
	 || die DBI::errstr;
    $dbh->do("create table facts (year int(11) not null, month int(11) not null, day int(11) not null, etype varchar(6)," .
	     "txt text, id int(11) auto_increment primary key)") || die DBI::errstr;
    exit_db ();
}

# cmd_clear - empty database of facts
sub cmd_clear
{
    init_db ();
    $dbh->do("delete from facts") || die DBI::errstr;
    exit_db ();
}

# cmd_load - load facts into database from standard input
sub cmd_load
{
    init_db ();

    my $sth = $dbh->prepare("insert into facts(year,month,day,etype,txt) values(?,?,?,?,?)");

  REC:
    while(<STDIN>) {
	chomp;

	if (/^\#/) { next REC; }
	if (/^[:white:]*$/) { next REC; }
      
	my ($era,$year,$month,$day,$etype,$txt) = split /,/, $_, 6;
	$txt =~ s/^\"(.*)\"$/$1/;
	
	if ($era eq "BC") {
	    $year = 1-$year;
	}
	
	$sth->execute($year,$month,$day,$etype,$txt)
	    || die $DBI::errstr;
    }
    
    exit_db ();
}

# cmd_dump - dump facts to standard output
sub cmd_dump
{
   init_db ();

   print ("# BEGIN DUMP " . gmtime() . "\n");

   my $count = 0;

   my $sth = $dbh->prepare("select year,month,day,etype,txt from facts") ;

   $sth->execute() || die ($sth->errstr);

   while (my @row = ($sth->fetchrow_array)) {
       my ($year,$month,$day,$etype,$txt) = @row;
       
       my $era;

       if ($year < 1) {
	   $era = "BC";
	   $year = 1 - $year;
       }
       else { $era = "AD"; }

       if ($month == 0 || !defined ($month)) { $month = ""; }
       if ($day == 0 || !defined ($day)) { $day = ""; }

       print "$era,$year,$month,$day,$etype,\"$txt\"\n";
       $count++;
   }

   print ("# END DUMP - $count records\n");

   exit_db ();
}

# cmd_hclear - empty database of headings
sub cmd_hclear
{
    init_db ();
    $dbh->do("delete from headings") || die DBI::errstr;
    exit_db ();
}

# cmd_hload - load headings into database from standard input
sub cmd_hload
{
    init_db ();

    my $sth = $dbh->prepare("insert into headings(etype,name,prio,heading) values(?,?,?,?)");

  REC:
    while(<STDIN>) {
	chomp;

	if (/^\#/) { next REC; }
	if (/^[:white:]*$/) { next REC; }
      
	my ($etype,$name,$prio,$heading) = split /,/, $_, 4;
	$heading =~ s/^\"(.*)\"$/$1/;
		
	$sth->execute($etype,$name,$prio,$heading)
	    || die $DBI::errstr;
    }
    
    exit_db ();
}


# cmd_hdump - dump headings to standard output
sub cmd_hdump
{
   init_db ();

   print ("# BEGIN DUMP " . gmtime() . "\n");

   my $count = 0;

   my $sth = $dbh->prepare("select etype,name,prio,heading from headings") ;

   $sth->execute() || die ($sth->errstr);

   while (my @row = ($sth->fetchrow_array)) {
       my ($etype,$name,$prio,$heading) = @row;
       
       print "$etype,$name,$prio,\"$heading\"\n";
       $count++;
   }

   print ("# END DUMP - $count records\n");

   exit_db ();
}
