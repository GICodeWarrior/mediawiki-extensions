This is the RequestTracker (RT) extension for MediaWiki. It allows
you to view information from RT tickets on your wiki in real time.

Written by Greg Sabino Mullane, End Point Corporation <greg@endpoint.com>

This is only a quick overview. Full documentation can be found at:

http://www.mediawiki.org/wiki/Extension:RT


PREREQUISITES
=============

This module requires the use of the balloons extension:

http://www.mediawiki.org/wiki/Extension:Balloons


INSTALLATION
============

To install the RT module, add this line to your LocalSettings.php file:

require_once("$IP/extensions/RT/RT.php");

You should also add the global configuration values directly below
this line. Each is described below by example below:

$wgRequestTrackerURL = 'https://rt.endpoint.com/Ticket/Display.html?id';

This should be the URL to your RT instance, and is used for generating links.


$wgRequestTrackerDBconn = 'user=rt dbname=rt';

This is the connection string to get to your RT database. This is passed directly
to pg_connect, so you can also use 'port' and 'host' as needed.

$wgRequestTrackerFormats = array
	(
	 'normal' => "Subject: <b>?subject?</b> Status:?status?",
	);

This is a list of specific named formats you wish to use. Items to be
replaced as placeholders should be surrounded by question marks.


USAGE
=====

To use this extension, simply add <rt></rt> tags to the source of
your wiki. To view specific tickets, simply put the number between
the tags like so:

<rt>1234</rt>

This will create an external link to ticket 1234. If the ticket does
not exist, the non-hyperlinked text "RT #1234" will appear.

You can also control what information is displayed. The best way to do
this is to create a global format by adding entries to the
$wgRequestTrackerFormats array. Placeholders should be entered as words
with question marks on both sides of them. Current information that
can be displayed is:

subject
status
lastupdated
created
owner
queue
priority
resolved

The RT links also have a balloon mouseover effect that gives all of the current
information (as of the last page load) for the ticket. This allows you to save
valuable screen real-estate.

You can also generate a list of tickets, either by owner, or by queue. To view
a table of all new and open tickets by a specific user, use this syntax:

<rt o="Greg"></rt>

By default, the table will show columns with the RT ticket id, the subject,
the status, and the queue. Each of these can be turned off by adding noxxx
to the inside of the rt tag. You can also add in the additional fields
'update' and 'create'. For example, the following line will show a table with
all new or open tickets owned by the user 'Greg', with no status, and
an additional column showing the last update time:

<rt o="greg" nostatus update></rt>

The owner name is case-insensitive. Multiple owners can be separated by commas,
in which case an additional column named "Owner" will be added. This can be turned
off by adding "noowner", or forced on by using "owner".

Rows are ordered with the most recently updated tickets at the top.

In a similar way to the 'owner' query, you can search by the name of an RT queue.
The following line will show all open or new tickets in the sales queue:

<rt q="sales"></rt>

The queue name is case-insensitive. Multiple queues can be separated by commas,
in which case an additional column named "Queue" will be added. This can be turned
off by adding "noqueue", or forced on by using "queue".

For table outputs, the status criteria can be changed from the default of
'new and open' by adding a "c" argument to tell it what criteria to use
for the status. For example, to view all resolved RT ticket in the queue 'Postgres':

<rt q="postgres" c="resolved"></rt>

To add a limit to any table output, add a "l" argument as the maximum number of
sorted rows to show. Remember that rows sort with the most recently updated tickets
at the top.


WARNING
=======

These tags will query the RT database on every page load, so don't put these on
very highly trafficed page unless your database can handle the load.

Use of these tags is akin to making your entire RT database available to anyone who
can edit the wiki. Hopefully, those communities have a complete overlap.

