= JS2 Support Extension =

To add the base js2 library support simply add the following to your LocalSettings.php: 
require_once( "$IP/extensions/JS2Support/JS2Support.php" );

== LocalSettings.php to enable all js2 components == 

# Base JS2 Support 
require_once( "$IP/extensions/JS2Support/JS2Support.php"  );

# Add Media Wizard
require_once( "$IP/extensions/JS2Support/AddMediaWizard/AddMediaWizard.php" ); 

# Upload Wizard
require_once( "$IP/extensions/JS2Support/UploadWizard/UploadWizard.php" );

# Ogg Handler with new player, transcoding + subtitle support. 
require_once( "$IP/extensions/JS2Support/OggHandler/OggHandler.php" );

== Developing and Debug mode ==

By default js2 support groups script and css requests, disable script grouping set: 
$wgEnableScriptLoader = false;  

If you want a fresh copy of the scripts and to disable minification in grouped requests set: 
$wgDebugJavaScript = true;


== Using JS2 with existing extensions ==

Simply add the Named path to wgScriptLoaderNamedPaths variable
$wgScriptLoaderNamedPaths[ 'myExtension' ] = 'extensions/myExtension/myExtension.js';

If you would like to keep compatibility with non-js2 extension support you can then
just use the base outputPage addScriptFile method
$wgOut->addScriptFile( 'extensions/myExtension/myExtension.js' )

If you want to have JS2Support be a dependency of your extension you can then use something like:  
$wgOut->addScriptClass( 'myExtension', 'page' );
This lets you use the namedPath for includes and gives you control over script grouping. 
For more info see  ScriptLoaderOutputPage.php $mScriptLoaderClassList


== Using JS2 with js-modules ==

JS Modules are reusable pieces of javascript that can be dynamically configured, loaded 
and executed in arbitrary javascript contexts. 

JS modules include "module loaders" that build request sets of the dependent javascript 
and css classes for a given interface component in the context of user or application
configuration. 

When an application wants to use that interface component it calls the module loader.
The module loader checks relevant configuration and javascript application state for existing
satisfied dependencies or browser specific libraries, then issues a single script-loader
request that retrieves all the needed javascript, css and localized message text for 
that interface in minfied,  gziped

For now see example modules, more documentation to follow. 

== Using JS2 localization system ==

The JS2 Localization system works similar to its php counterpart. 
( it even support for {{PLURAL}} transforms )

To enable JS2 localization of included scripts include the
msg keys you want included with a given class in the head of the javascript file:

mw.addMessegeKeys( ['list', 'of', 'msg-keys' ] );

