This extension allows users to create client side graphs (like pie, bar, etc) from data using javascript. The javascript is created by sysops in the MediaWiki namespace. Adding new scripts works like the Gadgets extension (as this extension borrows heavily from Gadgets).

Preprocessing scripts, and plotting scripts are available, and the javascript function for each should be defined as follows:

/* For preprocessing scripts */
function plotter_<functionname>_process( name, data, labels, arguments ) {
    /* example preprocessor: */
    for ( var i = 0; i < data.length; ++i ) {
        for ( var j = 1; j < data[i].length; ++j ) {
            data[i][j] = data[i][j] * 2;
        }
    }
}

/* For plotting scripts */
function plotter_<functionname>_draw( name, data, labels, arguments ) {
    /* example plotkit script: */
    var plotkitlabels = [];
    for ( var i = 0; i < labels.length; ++i ) {
        plotkitlabels[i] = { v:i, label:labels[i] };
    }
    var options = { "xTicks": plotkitlabels };
    var layout = new PlotKit.Layout("bar", options);
    layout.addDataset("data", data);
    layout.evaluate();
    var canvas = MochiKit.DOM.getElement(name);
    var plotter = new PlotKit.SweetCanvasRenderer(canvas, layout, options);
    plotter.render();
}

You can use these in a parser function like so:

{{#plot:
|script=<scriptname>
|scriptarguments=arg1,arg2,...
|preprocessors=<preprocessorname1>,<preprocessorname2>,...
|preprocessorarguments=<preprocessor1argument1>,<preprocessor1argument2>,...:preprocessor2argument1>,<preprocessor2argument2>,...:...,...
|labels=label1,label2
|data=1,2
2,4}}

To specify multiple plots in a single article, you need to use the name argument; the default is name=plot; here is an example of multiple plots:

{{#plot:
|name=plot1
|script=<scriptname>
|data=1,2}}

{{#plot:
|name=plot2
|script=<scriptname>
|data=2,3}}

If javascript is disabled, the extension will instead show a table. To specify the CSS class of the fallback table, use the tableclass argument; the default is tableclass=wikitable

{{#plot:
|script=<scriptname>
|tableclass=sortable
|data=0,1}}

The height and width of the canvas can be changed with the width and height arguments; the defaults are width=300 height=300

To change the renderer, use the renderer argument. Currently, only PlotKit (renderer=plotkit), and generic canvas drawing (renderer=generic) is supported; but other javascript plotting libraries will be supported in the future; the default is renderer=plotkit.

The data separator can be changed using the datasep argument; the default is datasep=,

script, preprocessors, name, and tableclass arguments are alphanumeric only, and are limited to 255 characters per script/preprocessor/etc.

This code is alpha quality right now; many features may not work.
