= Semantic MediaWiki Writer =

You can find this in a more readable format in
 <http://semantic-mediawiki.org/wiki/Semantic_MediaWiki_Writer>

Semantic MediaWiki Writer (SMWWriter) is an extension for Semantic MediaWiki
(SMW) that provides an API and further tools to edit facts within the wiki.
This documentation describes the why, how, and what of this extension.

Contents

    * 1 Background
    * 2 Philosophy
    * 3 Installation
          o 3.1 Requirements
          o 3.2 Instructions
    * 4 API documentation
          o 4.1 Web-service based API
          o 4.2 Internal API
    * 5 Examples
    * 6 Development
          o 6.1 Why not in the core?
          o 6.2 Dependency on PageObjectModel
          o 6.3 Smarter functions and best effort
          o 6.4 SPARQL and SMWWriter
          o 6.5 UI extensions on top of SMWWriter

Background

SMW extends the well-known MediaWiki wiki software, which powers a few
thousands wikis all over the world. It allows to add metadata to each page,
meant for describing the entity this page is about, and then to query the wiki
knowledgebase that is collaboratively created this way. This improves the
consistency of the wiki content, decreases the maintenance of the wiki, and
further-more allows to access the knowledge within the wiki from external
applications using web-standards like RDF or JSON.

Adding, changing, or removing the metadata inside an SMW was not easily
performed by a machine, due to the growing number of annotation schemes and
practices. Whereas it is possible to use the existing MediaWiki-API to access
the current text and change it, changing a single fact required to understand
how annotations are performed within SMW. SMWWriter offers an API to do exactly
that, and offers an abstraction layer over the existing MediaWiki API to simply
and without a big code overhead can edit the wiki's knowledgebase.

Philosophy

SMWWriter offers a "best-effort" functionality. In general the given task --
change metadata -- is a challenge that requires human-level intelligence. As
soon as we have that, the whole point of SMW becomes somewhat moot, though :)

So instead of guarantueeing certain functionality, SMWWriter will always try
to achieve a task as good as it can. Because of that, programmers are advised
to program defensively, i.e. to check if a certain change has actually been
done, etc., and to, in general, distrust the results of the API.

Having said that we expect that most situations allow for the API to work
without any problems, and we are always interested in improving the API (see
development section below). The API is developed in such a way to offer a
stable interface, and that any improvements in intelligence can happen behind
the scenes.

Installation

SMWWriter installs like any other MediaWiki extension.

Requirements

We have tested the extension using the following system:

    * MediaWiki 1.16
    * Semantic MediaWiki 1.5
    * PageObjectModel SVN revision XXXXX 

Note that the extension may work with older versions, but that it has not been
tested with them. Note also that it should work with newer versions, but that
it neither has been tested with them. If you test it with other settings,
please update the documentation appropriately.

Instructions

    * If using a release:
          o Download the extension from XXX
          o Decompress it in your MediaWiki's extensions/ folder 
    * If using the SVN version:
          o From within your MediaWiki's extensions/ folder call 

svn checkout http://svn.wikimedia.org/XXX/extensions/SMWWriter/

    * In both cases:
          o Check the accompanying README file for any new information
          o add the following line to your MediaWiki's LocalSettings.php
            (after you included SMW): 

 include_once("$IP/extensions/SMWWriter/SMWWriter_Settings.php");

Now SMWWriter should be installed. Check out

Special:Version

to see if SMWWriter is listed.

API documentation

There is actually not one, but two APIs: a web-service based API to be used by
external tools and by AJAX-based extensions to the wiki, and the internal API
that offers the same functionality.

Web-service based API

The web-service based API extends the existing MediaWiki API. It provides two
new actions, smwwriter and smwwritable. The interfaces are described just as
all other MediaWiki web-service absed APIs are described.

smwwriter requires a POST action (since you ask the wiki to change resources).
The followin parameters are regarded:

    * title: Title of the page to modify
    * token: Edit token. You can get one of these through prop=info
    * add: Annotations to add. The format is like simple wiki annotations, i.e.
      [[property::value]]
    * remove: Annotations to remove. The format is like simple wiki
      annotations, i.e. [[property::value]]. If value is * then all values of
      that property will be replaced. If remove is *, then all annotations
      will be removed. If remove is empty, then content simply gets added and
      no metadata is removed
    * flags: Flags for the edit process. The following flags exist:
      ATOMIC_CHANGE, CHANGE_TEXT, EDIT_MINOR, IGNORE_CONSTANT. The flags are
      described below. The flags are connected with the | symbol
    * summary: Edit summary for the change history 

smwwritable offers a list of all metadata of a single page that SMWWriter
thinks it can change. smwwritable only has a single parameter:

    * title: Title of the page 

Internal API

The internal API consists of one class with four public methods (including the
constructor). The SMWWriter class has a constructor and three further methods,
the update, getUpdateable, and getError methods.

An SMWWriter object needs to be created using the constructor with a single,
required parameter, the Title object representing the page to be changed. An
SMWWriter object can only be used for this one page. In order to change a
different page, a new SMWWriter object needs to be created.

The update method offers no output and the following input parameters:

    * remove: an SMWSemanticData object that contains the metadata that should
      be removed. If the value of a property-value pair is created with false,
      all the property-value pairs with this property will be deleted. If there
      are no property-value pairs, all property-value pairs will be deleted. If
      the subject of SMWSemanticData has been created with false, no
      property-value pairs will be deleted and the facts in add will be added
      instead.
    * add: an SMWSemanticData object that contains the metadata that should be
      added. Note that if it requests to add metadata that is already there
      this will be recognized as superfluous and ignored.
    * editsummary: Edit summary for the change history. If empty, a text will
      be autogenerated. Advised not to leave empty.
    * flags: an integer bitfield using the following constants: ATOMIC_CHANGE,
      CHANGE_TEXT, EDIT_MINOR, IGNORE_CONSTANT.
          o ATOMIC_CHANGE: if the API thinks that it cannot perform the
            complete request, it will not perform any of it, e.g. if it is
            requested to remove a specific property-value pair that does not
            exist it will not perform the request but rather set an error
          o CHANGE_TEXT: if possible we will change the text. Usually the API
            is defensive with regards to changing the text, i.e. it rather
            removes annotated links from the text and adds a #set statement
            instead. If CHANGE_TEXT is set, it will instead change the text
            in the annotated links. This may lead to wrong grammar
          o IGNORE_CONSTANT: if an ATOMIC_CHANGE is requested, the request
            will fail if it asks to remove a property-value pair that the API
            thinks it can not remove. If IGNORE_CONSTANT is set, then such
            constants (i.e. not updateable parts of the metadata) will not be
            required to be changed for an ATOMIC_CHANGE 

The getUpdateable method has no input parameters and returns a SMWSemanticData
object that includes all the metadata that SMWWriter thinks it is able to
change it.

The getError method can be called to get a string to describe what and if
something has gone awry. In case the API thinks everything is OK, it will
return an empty string. The method has no input parameters.

Examples

This section lists a few examples of what you can do with the new API, and how
it is done with the internal API and the webservice API. Note: the webservice
calls need to be using the POST method. You also have to be careful in doing
the proper URL encoding.

Add a new book to the wishlist of Johnny. Do not remove anything from the page.

$writer   = new SMWWriter( Title::newFromText("Johnny") );
$add      = new SMWSemanticData(SMWWikiPageValue::makePage("Johnny", 0));
$remove   = new SMWSemanticData(SMWWikiPageValue::makePage(false, 0));
$property = SMWPropertyValue::makeUserProperty("wishes");
$value    = SMWDataValueFactory::newPropertyObjectValue($property, "The End of Mr Y");
$add->addPropertyObjectValue($property, $value);
$writer->update( $remove, $add, "Adding Johnny's new wish" );

Using the webservice API, this would be done like the following:

/api.php?action=smwwrite&title=Johnny&add=[[wishes::The End of Mr Y]]&summary=Adding Johnny's new wish&token=token

Replacing the prize for the book, whatever it was before:

$writer   = new SMWWriter( Title::newFromText("The End of Mr Y") );
$add      = new SMWSemanticData(SMWWikiPageValue::makePage("The End of Mr Y", 0));
$remove   = new SMWSemanticData(SMWWikiPageValue::makePage("The End of Mr Y", 0));
$property = SMWPropertyValue::makeUserProperty("prize");
$value    = SMWDataValueFactory::newPropertyObjectValue($property, "14,80 ï¿½");
$add->addPropertyObjectValue($property, $value);
$value    = SMWDataValueFactory::newPropertyObjectValue($property, false);
$remove->addPropertyObjectValue($property, $value);
$writer->update( $remove, $add, "Changing the prize" );

With the webservice API, this would look like:

/api.php?action=smwwrite&title=The End of Mr Y&add=[[prize::14,80 ï¿½]]&remove=[[prize::*]]&summary=Changing the prize&token=token

And after you bought the book for Johnny, you may want to remove it:

$writer   = new SMWWriter( Title::newFromText("Johnny") );
$add      = new SMWSemanticData(SMWWikiPageValue::makePage("Johnny", 0));
$remove   = new SMWSemanticData(SMWWikiPageValue::makePage("Johnny", 0));
$property = SMWPropertyValue::makeUserProperty("wishes");
$value    = SMWDataValueFactory::newPropertyObjectValue($property, "The End of Mr Y");
$remove->addPropertyObjectValue($property, $value);
$writer->update( $remove, $add, "Removing Johnny's new wish" );

Using the webservice API, this would be done like the following:

/api.php?action=smwwrite&title=Johnny&remove=[[wishes::The End of Mr Y]]&summary=Removing Johnny's new wish&token=token

And finally, if you want to remove all the current existing metadata from
Johnny (for whatever reason), you would do it like the following:

$writer   = new SMWWriter( Title::newFromText("Johnny") );
$add      = new SMWSemanticData(SMWWikiPageValue::makePage("Johnny", 0));
$remove   = new SMWSemanticData(SMWWikiPageValue::makePage("Johnny", 0));
$writer->update( $remove, $add, "Removing Johnny's metadata" );

Using the webservice API, this would be done like the following:

/api.php?action=smwwrite&title=Johnny&remove=*&summary=Removing Johnny's metadata&token=token

We hope the examples are helpful in order to get started writing tools using
the API.

Development

External developers are explicitly encouraged to contribute (actually, I
wouldn't even mind if they took over the lead on the further development of
this extension -- denny). This section outlines some basic thoughts on the
further development of SMWWriter and on current development decisions. The
source code contains further spots that are marked with TODO and that would
require further improvement.

Why not in the core?

Our current aim is to keep SMW a lean and small extension. Our first thought
was to have SMWWriter be a proper part of SMW core, but as we started
developing it we noticed that the code got bigger than expected. Also it was
decided that the dependency on PageObjectModel was not desired for SMW core.
If the dependency can be removed and the code turns out to be a manageable
size, SMWWriter may be merged into the core, but this is not a priority
currently.

Dependency on PageObjectModel

PageObjectModel (POM) is an extension to MediaWiki that was developed in order
to enable a web-service based editing of templates. Unluckily the maturity of
POM was first overestimated. In order to develop SMWWriter we had to extend
POM considerably, but we still do not regard POM as a mature piece of software
as it is now (sorry, Sergey).

There are three possible options to deal with this dependency in a medium
timeframe. We list them in what we consider is an order of increasing
desireability:

    * re-implement the POM function within SMWWriter properly and thus remove
      the dependency. Basically increases redundancy, but makes SMWWriter a
      stand-alone extension.
    * take ownership of POM and improve it considerably.
    * actually replace the dependency of POM with calls to the internal
      MediaWiki parser model of PPNodes and PPFrames and PPWhatevers,
      understand the MediaWiki parser and use its model instead. This may
      require to extend the parser with a wiki-text serializer and methods
      to actually change the values. This also will remove the inherent
      redundancy of POM with regards to the parser's own DOM, and make
      SMWWriter solely depend on MediaWiki's core technology. This is the
      hardest, but also the most rewarding path. 

We hope that someone will pick up on this challenge.

Smarter functions and best effort

Currently, the update methods themselves are not terrifically smart and could
be vastly improved. This is especially true for the updatePropertyValues method
that solely deletes the property values and then add new ones instead of
replacing the values within the already existing annotations. Also the
addPropertyValues method could check if there are fitting templates and use
their parameters instead of simply adding #set statements. Furthermore, text
with annotations may be treated more cleverly. Imagine a list in an article on
the European Union:

* [[member::France]]
* [[member::Germany]]
* [[member::Italy]]

etc. Requesting to add [[member::Romania]] for the most recent expansion could,
instead of adding a #set call somewhere in the article, add a further bullet
point with the new member. It should be obvious that this is not a trivial
task. :)

SPARQL and SMWWriter

The current SMWWriter offers a proprietary MediaWiki-based web-service API for
changing the wiki-based knowledgebase. It would be much, much nicer if
additionally SMWWriter would accept SPARQL requests. Hereby we mean the new
SPARQL standard that is currently being developed under the auspices of the
W3C and that also allows updates. These updates can be parsed, checked if they
fit into SMWWriter, rewritten and executed, which would make it easier to make
SMW a component within the Semantic Web ecology.

This is especially true for using external URIs, i.e. it would be interesting
to be able to add the following triple:

<http://www.aifb.kit.edu/id/Denny_Vrandecic> <http://xmlns.com/foaf/0.1/lives_in> <http://dbpedia.org/resource/Stuttgart>

and meanwhile the wiki checks if it knows about the resources that are mapped
to the given external URIs, translates them to the local entities, and then
adds the given metadata on the appropriate page (i.e. it could be
[[city::Stuttgart]] on the page [[Denny]])

UI extensions on top of SMWWriter

Based on the API it should be easy to build new extensions that use the API to
display, change, update, and synchronize the wiki knowledgebase. Here are some
possible tools we expect to be developed:

    * PIM synchronizer for address books, birthdays in calendars, tasks
    * Synchronizer for data like stock exchange value, weather information,
      currency conversion
    * Knowledge apps that display information of a specific type and allow to
      quickly change them, e.g. an App that displays all your books and allow
      you to quickly skim through them and quickly change the metadata on them
    * External tools that communicate with the SMW and use it as a knowledge
      backend, e.g. a multimedia player that pulls and displays additional
      information about played tracks
    * A UI within the wiki similar to Semantic Forms or the Halo Annotation
      Sidebar, that allows to quickly add and change metadata 

We expect that small such extensions can be maintained within the SMWWriter
directory on the WikiMedia SVN, just like the different Semantic Result
Formats are mostly gathered in one extension. These would be both example
implementations as well as small useful tools in themselves.
