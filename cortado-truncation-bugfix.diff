Index: src/com/fluendo/plugin/AudioSink.java
===================================================================
--- src/com/fluendo/plugin/AudioSink.java	(revision 5517)
+++ src/com/fluendo/plugin/AudioSink.java	(working copy)
@@ -200,6 +200,9 @@
 
       return res;
     }
+    public synchronized boolean isAcquired() {
+      return opened;
+    }
     public boolean release() {
       stop();
 
@@ -430,6 +433,8 @@
       case Event.NEWSEGMENT:
         break;
       case Event.EOS:
+	// wait for completion, perform blocking drain of buffers
+	drain();
         break;
     }
     return true;
@@ -498,6 +503,32 @@
     return result;
   }
 
+  /*
+   * Block until audio playback is finished
+   */
+  protected void drain() {
+    if (ringBuffer.rate <= 0) {
+      return;
+    }
+
+    /* need to start playback before we can drain, but only when
+     * we have successfully negotiated a format and thus acquired the
+     * ringbuffer. */
+    if (!ringBuffer.isAcquired()) {
+      // FIXME make it work like it does in GstBaseAudioSink
+      // ringBuffer.acquire(...);
+      return;
+    }
+
+    if (ringBuffer.nextSample != -1) {
+      long time = ringBuffer.nextSample * Clock.SECOND / ringBuffer.rate;
+      Clock.ClockID id = audioClock.newSingleShotID(time);
+      Debug.log(Debug.DEBUG, this+" waiting until t=" + ((double)time / Clock.SECOND) + "s for playback to finish");
+      id.waitID();
+      ringBuffer.nextSample = -1;
+    }
+  }
+
   protected abstract RingBuffer createRingBuffer();
   protected abstract boolean open (RingBuffer ring);
   protected abstract boolean close (RingBuffer ring);

