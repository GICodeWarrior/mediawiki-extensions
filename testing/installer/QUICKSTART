Document: (C) 2009 Kim Bruning, released as documentation under MIT license

Quickstart guide:

============
0. Contents
============
1. Installation
1.1 installer
1.2 testing

2. Using the installer
2.1 In general
2.2 Basic Commands

3. But what was it for, again?
3.1 Why we made it.
3.2 What else can you use it for?
3.3 Calling from bash, elsewhere

4. What if my mediawiki extension is special
4.1 What if my extension is not special
4.2 My extension is still special

5. Installation subsystems

6. Full path syntax

7. Common problems
7.0 After solving a problem
7.1 Database problems
7.2 mixing up instances_dir with base_scriptpath



===============
1. Installation
===============

This system *should* work on most unix-like systems. I've only tested on linuxes so far though: ubuntu, gentoo, and debian.
-------------
1.1 INSTALLER
-------------
1. svn checkout http://svn.wikimedia.org/svnroot/mediawiki/trunk/testing/
2. (optional): configure for use outside your homedir:
2a. cd testing/installer
2b. copy settings.example to settings.py  and  edit. Check the settings_handler.py file for a comprehensive list of settings are availa ... if you leave out this step, it'll only work in your homedir.
	watch out for the differences between instancesdir and base_scriptpath (it's how apache refers to your directory:

	EXAMPLE 1: (if using  mod_userdir )
		instancesdir="/home/johndoe/public_html/revisions"
		base_scriptpath="/~johndoe/revisions"
	and your browser will access wikis from:
		http://www.johndoesserver.com/~johndoe/revisions
	(this is the default)
	It may help to set  apache's    Options Indexes   for your instancesdir. Else you'll
	need to directly refer to your a particular wiki as  http://www.johndoesserver.com/~johndoe/revisions/myfirstwiki

	EXAMPLE 2: (A fairly typical apache setup)
		instancesdir="/var/www/localhost/htdocs/instances"
		base_scriptpath="/instances"
	and your browser will access wikis from:
		http://www.johndoesserver.com/~revisions
	once again,  Options Indexes is your friend	

3. mkdir ~/public_html/revisions   (if you are indeed working in your homedir)
	or at any rate, ensure that the directory you are going to put mediawiki
	exists, and is accessible to apache

# installer now works.

-----------
1.2 TESTING
------------
4. To get testing working
./installer.py install toolkit:pywikipedia 
5. also, in exttest, copy settings.py.example to settings.py, and edit.

testing can still use a lot of coding work.

====================
2. USING THE INSTALLER:
====================

--------------
2.1 In general 
--------------

To get something installed. There's a REPL (command line) and you can also
access the same commands from bash (or some other shell, or popen, or what have
you) The interface and back end are somewhat separate (installer.py is current
interface,  installers.py is the basic back end), so someone might be able to
create a GUI or web front end someday soon. :-)

--------------
2.2 Basic commands
---------------

basic commands are:
	ls
	install
	uninstall
	help

to get a quick reminder of commands available, type:
	help

to see what you can install:
-mediawiki revisions
	ls available.mediawiki:
-extensions
	ls available.extensions:

to see what is already installed:
-mediawiki revisions
	ls installed.mediawiki:
-extensions
	ls installed.extensions: in myfirstwiki	

	(where myfirstwiki is the name of an existing wiki, see below)

to install something:
	install mediawiki:REL1_14_0 as myfirstwiki
	install extension:ImageMap in myfirstwiki

to uninstall things
	uninstall extension:ImageMap in myfirstwiki
	uninstall myfirstwiki

(incidentally, uninstall myfirstwiki will uninstall all extensions and drop the database automatically)

The installer automatically creates the first user on the wiki with admin and bureaucrat permissions. Username: admin  , pass admin1234   (caps are significant)

And that's basically it!

==============================
3. But what was it for, again?
==============================

-------------------
3.1 Why we made it.
--------------------

Well, imagine if you want to install many different wikis with slightly
different settings and extensions, so you can test how things interact. (this
is a testing environment, after all ;-) ). We found that setting up tests
actually took longer than the actual tests! Hence we made this tool.

For examples of some ready made scripts, for existing environments, see ../util/environment/

Now you too can make a duplicate of the wikipedia setup (dataabase not
included, though you could conceivably get one from
http://download.wikimedia.org/ ), or start playing with this new faluting
semantic mediawiki concept (../util/Referata.sh see also: www.referata.com) ,
or... etc...

---------------------------------
3.2 What else can you use it for?
---------------------------------

It's also fairly handy for maintaining large numbers of wikis in a production
environment. Or for maintaining backups of even just a single wiki

if you hadn't uninstalled your first wiki yet:

	duplicate myfirstwiki mysecondwiki

Will create a clone of the first wiki, which you can either leave online and
allow to grow and change by itself, or you can move it away
someplace safe as a backup.

(near future: we should also generate tarballs or zips for you to use as backups)


--------------------------------
3.3 Calling from bash, elsewhere
--------------------------------


calling from bash is easy too

	./installer.py install mediawiki:latest as cuttingedgedude


Once again, 
	example scripts can be found at ../util/environment


============================================
4. What if my mediawiki extension is special?
============================================

----------------------------------------
4.1 What if my extension is not special
----------------------------------------
if your extension is listed at
	http://svn.wikimedia.org/svnroot/mediawiki/trunk/extensions/

if the name of the primary .php script is the same as the extension name

(near future: and if your script can do its setup when /YOURWIKI/maintenance/update.php is called)

your extension is not special, and the installer will install it automagically.

---------------------------------
4.2 My extension is still special
---------------------------------

No problem. We maintain a list of exceptions in installfiles/extensions
ImageMap is a plain vanilla extension, and doesn't really need an exception,
but we put it there as an example. Copy over ImageMap.install and fill in the
different files as you see fit.

FILES

is_installed.sh		checks whether the extension is installed,
			and echo's "true" if so, or "false" if not. Make
			as sophisticated as you like.

download.sh		downloads the files for the extension

setup.sh		(not needed for imagemap): Does sundry setup. Put
			anything here that doesn't go anywhere else.

uninstall.sh		removes the extension cleanly. (no mess left in db)

update.sh		reserved for future expansion (intended to use 
			svn update)

info			information about the extension, if you'd like
			to provide some. (can be accessed using the
			installer "info" command)


VARIABLES

These are environment variables that the installer passes to installation
scripts.

    * $DATABASE_NAME - the name of the MySQL database associated with the mediawiki instance you are working with.

          eg: "minuteelectron_test1", "kim_documentationwiki", "MWE_documentation" 

    * $DESTINATION_DIR - the location where you're installing to. (typically the extensions directory of a particular mediawiki instance)

          eg: "/home/gerardm/public_html/revisions/MWE_documenation/extensions", "/home/kim/public_html/revisions/documentationwiki/extensions", "/var/www/localhost/htdocs/revisions/test22/extensions" 

    * $INSTALL_DIR - the .install directory you are working from

          eg:"/home/gerardm/testing/installer/installfiles/extensions/ImageMap.install" 

    * $MYSQL_COMMAND - A mysql command sufficient to give mysql access (ie, on your local system, it might be something like: mysql -u<user_name> -p<password> )

          eg: "mysql -uroot" ; "mysql -uroot -psecret --host=db.remote.net --port=1234" 

    * $NAME - the name of the thing you are installing

          eg: "ImageMap","SemanticMediawiki" 

    * $REVISION - specific (svn) revision if provided (can be blank)

          eg: "48822" 

    * $TAG - specific (svn) tag if provided (can be blank)

          eg: "REL1_12_1", "REL1_14_0" 

==========================
5. Installation subsystems
==========================

Installer.py is actually just a front-end for several different installation systems, each specialized to do certain kinds of installation. From previous chapters, you already know mediawiki: and extension: , the other installation systems work in a similar manner.

toolkit:	toolkit components
scripted:	those extensions for which exist specialised scripts
mediawiki:	install a mediawiki instance
naive:		Assumes an extension is perfectly standard.
download:	downloads an extension
extension:	a combined installer, first tries a scripted install, failing
		that, it attempts a naive install.
(combined)	(API only) Is instantiated using multiple other installers.
		it will try each installer in turn, until one knows how to
		perform the installation, or -alternately- all fail.


===================
6. Full path syntax
===================

For commands with paths:

statement:= <command> <path>
command:= <install|uninstall|info|ls>

path:= [ai.][system:]installer [in iii] [as aaa] [revision rrr] [tag ttt] [limit n]

ai:=<available|installed|revisions|tags>
system:=< (see under systems) >

installer       is some name of a script to install an item or the item name to be installed (depends on system)
in              where to install things *in* (typically used with the extension installer)
as              give something a name or alias    
			install mediawiki:REL1_13_3 as my_mediawiki_example 
		creates a new mediawiki instance (release 1.13.3)  with the name my_mediawiki_example
revision        use a particular (svn) revision number
tag             use a particular (svn) tag
limit n         limits output to at most n items (analogous to the sql command of same name) (useful with ls)



==================
7. Common problems
==================

----------------------------
7.0 After solving a problem
----------------------------

If you solved a problem with the installer itself while
installing, the install will likely not have gone off
well.

Uninstall the mediawiki instance you were working on,
and take it from the top.

-----------------------------
7.1 Database problems
-----------------------------

Symptoms:
* "WARNING: Mysql settings do not seem to be correct."
* "Cannot access database. (Is your settings.py correct?)"

Check to make sure your settings.py is set up correctly,
then try again. (Are your database username and password correct?)

if you get a
* "Failed to create admin user on ..."
The database was set up correctly, but for some reason the
wiki maintenance scripts can't find it.

Check in your mediawiki directory to see if you can locate 
the problem in LocalSettings.php or InstallerUniqueSettings.php
, and please report a bug, if
appropriate.

------------------------------------------------
7.2 mixing up instances_dir with base_scriptpath
-------------------------------------------------

Symptom:
	the installer finishes installing and reports
	that it has completed successfully, but
	apache can't find the wiki, or won't run it.

* Apache reports 403 Forbidden:
	* Add Options indexes  to your apache settings, vhost, or .htaccess file
	* Make sure the directory you installed the wiki is world readable.
	* instead of cehcking base_scriptdir, try point your browser at base_scriptdir/<the name of your wiki>

* Apache reports 404:
	* Are you sure the installer ran ok?
	* your base_scriptdir is likely set wrong, try place a simple test.html in the directory
	  you are installing in, and see what happens.


* Apache fails to run PHP:
	* make sure php is properly installed.
