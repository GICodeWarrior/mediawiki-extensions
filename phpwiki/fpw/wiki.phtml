<?
# THIS IS THE MAIN FILE OF THE PHP WIKIPEDIA SCRIPT

#$nclose = 0;
#function mysql_closeX ($connection) {
#	global $nclose;
#	$nclose++;
#	echo "(($nclose mysql_close($connection)))";
#	mysql_close($connection);
#}

# Includes the necessary parts
include_once ( "./wikiText.php" ) ;
include_once ( "./basicFunctions.php" ) ;
include_once ( "./databaseFunctions.php" ) ;
include_once ( "./wikiTitle.php" ) ;
include_once ( "./wikiPage.php" ) ;
include_once ( "./wikiUser.php" ) ;

# Checking for talk subpage
function fixTalk ( $title ) {
	$sp = explode ( "/" , $title ) ;
	$ns = explode ( ":" , $title ) ;
	$lsp = array_pop ( $sp ) ;
	if ( strtolower ( $lsp ) == "talk" and count ( $sp ) > 0 ) {
		if ( count ( $ns ) == 1 or strtolower ( $ns[0] ) == "talk" )
			$title = "talk:".implode ( "/" , $sp ) ;
		}
	return $title ;
	}

#EXPERIMENTAL!
function framepage () {
	global $title ;
	$p = "wiki.phtml?" ;
	$v = get_defined_vars() ;
	$vk = array_keys ( $v ) ;
	foreach ( $vk as $x ) {
		$p .= "&$x=".$v[$x] ;
		}

	$ret = "" ;
	$ret .= "<html><head></head><body><FRAMESET rows=\"150,*\"><FRAME src=\"$p&framed=top\">" ;
	$ret .= "<FRAMESET cols=\"*,140\"><FRAME src=\"$p&framed=main\"><FRAME src=\"$p&framed=bar\">" ;
	$ret .= "</FRAMESET></FRAMESET></body></html>" ;

	return $ret ;
	}

function getmicrotime(){
    list($usec, $sec) = explode(" ",microtime());
    return ((float)$usec + (float)$sec);
    }

# Main program
	global $action , $title , $pageTitle ;
	global $user , $search , $expiration ;
	global $THESCRIPT ;

	global $metaDescription , $metaKeywords , $wikiCharset ; # For meta tags in the HTML code
	$expiration = time()+315360000 ; # Cookies set will expire in ten years from now
	$pageTitle = "" ;

#	$mt = getmicrotime() ;

	# Verifying the current user. Logged in? Password in a cookie?
	$user = new WikiUser ;
	$user->scanCookies () ;


	# Check charset/encoding -- should send correct header as early as possible
	if ( isset($encoding) && ($encoding != $user->options["encoding"]) ) {
		$user->options["encoding"] = $encoding; # Manual override
		if ( $user->isLoggedIn ) {
	 		$user->saveSettings () ;
			$user->loadSettings () ;
		} else {
			# Can't save setting for those who aren't logged in
		}
	}
	$charset = $wikiEncodingCharsets[$user->options["encoding"]];
	if ( $charset == "") # Fall back to the encoding used in the database
		$charset = $wikiCharset;
	if ( $charset != "")
		header("Content-type: text/html; charset=$charset");

	# Default settings
	if ( $action == "" ) $action = "view" ;
	if ( $title == "" ) $title = $wikiMainPage ;

	$title = fixTalk ( $title ) ;
	$theTitle = new wikiTitle ;
	$theTitle->title = urldecode ( $title ) ;
	$theTitle->makeSecureTitle () ;
	$title = $theTitle->secureTitle ;

	$action = strtolower ( trim ( $action ) ) ;
	$title = urldecode ( $title ) ;

	# Do what is asked
	if ( isset ( $search ) ) {
		include_once ( "./specialPages.php" ) ;
		$out = doSearch () ;
		unset ( $search ) ;
	} else  if ( $action == "watch" ) {
		global $mode ;
		include_once ( "./specialPages.php" ) ;
		$out = watch ( $title , $mode ) ;
	} else if ( $action == "view" ) {
		global $FromEditForm ;
		if ( $user->options["viewFrames"] == "yes" and substr ( $title , 0 , 8 ) != "Special:" and !isset ( $framed ) and !isset ( $FromEditForm ) )
			{ exit ( framepage() ) ; }
		$out = view ( $title ) ;
		}
	else if ( $action == "edit" ) $out = doEdit ( $title ) ;
	else if ( $action == "print" ) $out = doPrint ( $title ) ;
	else if ( $action == "history" ) {
		include_once ( "./specialPages.php" ) ;
		$out = doHistory ( $title ) ;
	} else $out = error ( "No such action \"$action\"" ) ;

	# Cleaning up, setting <title>, etc.
	global $bodyOptions , $headerScript , $styleSheet;
	global $wikiEditTitle ;
	if ( $action == edit ) $pageTitle = str_replace ( "$1" , $title , $wikiEditTitle ) ;
	$pageTitle = str_replace ( "_" , " " , $pageTitle ) ;
	$pageTitle = str_replace ( "$1" , $pageTitle , $wikiTitleTag ) ;
	#$bodyOptions .= $user->options["background"] ;
	#$bodyOptions .= $user->options["text"] ;
	if ( $user->options["underlineLinks"] == "no" ) $bodyOptions .= " link=blue vlink=blue alink=blue " ;

	if ( $metaDescription != "" ) $metaDescription = "<META name=\"description\" content=\"$metaDescription\">" ;
	if ( $metaKeywords != "" ) $metaKeywords = "<META name=\"keywords\" content=\"$metaKeywords\">" ;
	if ( $charset != "") $metaCharset = "<META HTTP-EQUIV=\"Content-type\" content=\"text/html; charset=$charset\">" ;

	# FIXME: Is there a better place to set up the style sheet?
	$styleSheet = "<style type=\"text/css\"><!--\n";
	$textcolor = $user->options["text"];
	$bgcolor = $user->options["background"];
	$styleSheet .= "body { ";
	if ( $textcolor == "" ) {
		$textcolor = "black"; # A reasonable default, I guess?
	} else {
		$styleSheet .= "color: $textcolor; ";
		$bodyOptions .= " textcolor=\"$textcolor\"";
	}
	if ( $bgcolor == "" ) {
		$bgcolor = "white";
	} else {
		$styleSheet .= "background: $bgcolor; ";
		$bodyOptions .= " bgcolor=\"$bgcolor\"";
	}
	$styleSheet .= "}\n";

	$styleSheet .= "p.bodytext { " . (($user->options[justify] == yes) ? "text-align: justify; " : "") . "}\n";
	$styleSheet .= "a { text-decoration: " . (($user->options[underlineLinks] == "no") ? "none" : "underline") . "; }\n";
	$qbside = ( $user->options["quickBar"] == "left" ) ? "right" : "left";
	$styleSheet .= "a.interwiki, a.external { color: #3333BB; text-decoration: none; }\n" .
			"a.red { color: red; text-decoration: none; }\n" .
			"a.green { color: green; text-decoration: none; }\n" .
			".topbar { border-bottom-width: 2; border-bottom-style: ridge; }\n" .
			".middle { }\n" .
			".quickbar { border-$qbside-width: 2; border-$qbside-style: ridge; }\n" .
			".footer { border-top-color: black; border-top-width: 2; border-top-style: groove; }\n";
	if ( $user->options[markupNewTopics] == "red") {
		$styleSheet .= "a.newlink { color: red; }\n.newlinkedge { display: none; }\n";
	} elseif ( $user->options[markupNewTopics] == "inverse") {
		$styleSheet .= "a.newlink { color: white; background: blue; }\n";
		$styleSheet .= ".newlinkedge { display: inline; }\n";
	} else {
		$styleSheet .= "a.newlink { color: $textcolor; text-decoration: none; }\n";
		$styleSheet .= ".newlinkedge { display: inline; }\n";
	}
	$styleSheet .= "//--></style>";

	$head = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n" ;
	$head .= "<HTML><HEAD><TITLE>$pageTitle</TITLE>\n" ;
	$head .= "$metaCharset\n" ;
	$head .= "$metaDescription\n$metaKeywords\n$headerScript\n$styleSheet\n" ;
	$head .= "</HEAD><BODY $bodyOptions>\n" ;
	$tail = "</BODY></HTML>" ;

#	$mt = getmicrotime()-$mt ;	$out = "$mt<br>\n$out" ;

	global $append , $framed ;
	$out = $head.$out.$tail.$append ;
	if ( isset ( $framed ) ) $out = str_replace ( "<a " , "<a target=_top " , $out ) ;

	print wikiRecodeOutput($out) ; # FINALLY!!!!
?>
