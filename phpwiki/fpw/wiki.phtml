<?
# THIS IS THE MAIN FILE OF THE PHP WIKIPEDIA SCRIPT

$styleSheet = "" ;

# Includes the necessary parts
include_once ( "./wikiSettings.php" ) ;
include_once ( "./basicFunctions.php" ) ;
include_once ( "./databaseFunctions.php" ) ;
include_once ( "./wikiTitle.php" ) ;
include_once ( "./wikiPage.php" ) ;
include_once ( "./wikiUser.php" ) ;

# Checking for talk subpage
function fixTalk ( $title ) {
	global $wikiTalk ;
	$sp = explode ( "/" , $title ) ;
	$ns = explode ( ":" , $title ) ;
	$lsp = array_pop ( $sp ) ;
	if ( strtolowerIntl ( $lsp ) == $wikiTalk and count ( $sp ) > 0 ) {
		if ( count ( $ns ) == 1 or strtolowerIntl ( $ns[0] ) == $wikiTalk )
			$title = "$wikiTalk:".implode ( "/" , $sp ) ;
		}
	return $title ;
	}

#EXPERIMENTAL!
function framepage () {
	global $title ;
	$p = "wiki.phtml?" ;
	$v = get_defined_vars() ;
	$vk = array_keys ( $v ) ;
	foreach ( $vk as $x ) {
		$p .= "&$x=".$v[$x] ;
		}

	$ret = "" ;
	$ret .= "<html><head></head><body><FRAMESET rows=\"150,*\"><FRAME src=\"$p&framed=top\">" ;
	$ret .= "<FRAMESET cols=\"*,140\"><FRAME src=\"$p&framed=main\"><FRAME src=\"$p&framed=bar\">" ;
	$ret .= "</FRAMESET></FRAMESET></body></html>" ;

	return $ret ;
	}

function getmicrotime(){
    list($usec, $sec) = explode(" ",microtime());
    return ((float)$usec + (float)$sec);
    }

# Main program
	global $action , $title , $pageTitle ;
	global $user , $search , $expiration ;
	global $THESCRIPT , $namespaceBackground , $wikiNamespaceBackground ;

	global $metaDescription , $metaKeywords , $wikiCharset ; # For meta tags in the HTML code
	$expiration = time()+31536000 ; # Cookies set will expire in one year from now
	$pageTitle = "" ;
	
	# Set locale, needed for correct string functions in various non-English wikis
	if ( $wikiLocale != "" )
		setlocale ( LC_ALL , $wikiLocale ) ;

#	$mt = getmicrotime() ;

	# Verifying the current user. Logged in? Password in a cookie?
	$user = new WikiUser ;
	$user->scanCookies () ;


	# Check charset/encoding -- should send correct header as early as possible
	if ( isset($encoding) && ($encoding != $user->options["encoding"]) ) {
		$user->options["encoding"] = $encoding; # Manual override
		if ( $user->isLoggedIn ) {
	 		$user->saveSettings () ;
			$user->loadSettings () ;
			$encodinghack = 0;
		} else {
			# Can't save setting for those who aren't logged in
			$encodinghack = 1;
		}
	}
	$charset = $wikiEncodingCharsets[$user->options["encoding"]];
	if ( $charset == "") # Fall back to the encoding used in the database
		$charset = $wikiCharset;
	if ( $charset != "")
		header("Content-type: text/html; charset=$charset");
	if ( $wikiLanguage != "")
		header ( "Content-Language: $wikiLanguage" ) ;

	# Default settings
	if ( $action == "" ) $action = "view" ;
	if ( $title == "" ) $title = $wikiMainPage ;

	$title = fixTalk ( $title ) ;
	$theTitle = new wikiTitle ;
	$theTitle->title = urldecode ( $title ) ;
	$theTitle->makeSecureTitle () ;
	$title = $theTitle->secureTitle ;
	
	# Check for alternate encoding in the URL
	if ( !$theTitle->doesTopicExist() && count ( $wikiEncodingCharsets ) > 1 ) {
		$aTitle = new wikiTitle ;
		$aTitle->setTitle ( $wikiRecodeInput ( $title ) ) ;
		if ( $aTitle->doesTopicExist() ) {
			$theTitle = $aTitle ;
			$title = $theTitle->secureTitle ;
		}
	}

	$action = strtolower ( trim ( $action ) ) ;
	$title = urldecode ( $title ) ;

	if ( strtolower ( substr ( $title , 0 , 8 ) ) == "special:" ) $namespaceBackground = $wikiNamespaceBackground["special"] ;

	# Do what is asked
	if ( isset ( $search ) ) {
		include_once ( "./special_dosearch.php" ) ;
		$out = doSearch () ;
		unset ( $search ) ;
	} else  if ( $action == "watch" ) {
		global $mode ;
		include_once ( "./special_watchlist.php" ) ;
		$out = watch ( $title , $mode ) ;
	} else if ( $action == "view" ) {
		global $FromEditForm ;
		if ( $user->options["viewFrames"] == "yes" and substr ( $title , 0 , 8 ) != "Special:" and !isset ( $framed ) and !isset ( $FromEditForm ) )
			{ exit ( framepage() ) ; }
		$out = view ( $title ) ;
		}
	else if ( $action == "edit" ) $out = doEdit ( $title ) ;
	else if ( $action == "print" ) $out = doPrint ( $title ) ;
	else if ( $action == "history" ) {
		include_once ( "./special_dohistory.php" ) ;
		$out = doHistory ( $title ) ;
	} else $out = error ( "No such action \"$action\"" ) ;

	# Cleaning up, setting <title>, etc.
	global $bodyOptions , $headerScript , $styleSheet;
	global $wikiEditTitle , $wikiRecodeOutput ;
	if ( $action == edit ) $pageTitle = str_replace ( "$1" , $title , $wikiEditTitle ) ;
	$pageTitle = str_replace ( "_" , " " , $pageTitle ) ;

	if ( !isset ( $vpage ) or !$vpage->isSpecialPage )
		$pageTitle = str_replace ( "$1" , $pageTitle , $wikiTitleTag ) ;


	#if ( $user->options["underlineLinks"] == "no" ) $bodyOptions .= " link=blue vlink=blue alink=blue " ;
#	$styleSheet = $user->styleSheet ( $action ) ;
	# Netscape 4 doesn't do well with the stylesheet text/background color
	if ( $user->options[text] != "" ) $bodyOptions .= " textcolor=\"" . $user->options[text] . "\"";
	if ( $user->options[background] != "" ) $bodyOptions .= " bgcolor=\"" . $user->options[background] . "\"";

	if ( $metaDescription != "" ) $metaDescription = "<META name=\"description\" content=\"$metaDescription\">" ;
	if ( $metaKeywords != "" ) $metaKeywords = "<META name=\"keywords\" content=\"$metaKeywords\">" ;
	if ( $charset != "") $metaCharset = "<META HTTP-EQUIV=\"Content-type\" content=\"text/html; charset=$charset\">" ;

	$head = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">
<HTML><HEAD><TITLE>$pageTitle</TITLE>
$metaCharset\n$metaDescription\n$metaKeywords\n$headerScript\n$styleSheet
<link rel=\"shortcut icon\" href=\"/favicon.ico\">
</HEAD><BODY $bodyOptions>\n" ;
	$tail = "\n</BODY></HTML>";

#	$mt = getmicrotime()-$mt ;	$out = "$mt<br>\n$out" ;

	global $append , $framed ;
	$out = $head.$out.$tail.$append ;
	if ( isset ( $framed ) ) $out = str_replace ( "<a " , "<a target=_top " , $out ) ;
	if ( $encodinghack )
		$out = preg_replace ( "/(<a[^>]+href=\"|<form[^>]+action=\")(" . strtr ( $wikiCurrentServer , array( "/" => "\/" , "." => "\." ) ) . "[^\"]*)(?=\")/ie" ,
			"\"\$1\" . (\$u = preg_replace(\"/[\\?\\&]encoding=[0-9]+/\", \"\", \"\$2\")) . ((!strchr(\$u, '?') && strstr(\$THESCRIPT,\$u)) ? '?' : '&') . \"encoding=\" . \$user->options[\"encoding\"]",
			$out ) ;

	print $wikiRecodeOutput ( $out ) ; # FINALLY!!!!
?>
