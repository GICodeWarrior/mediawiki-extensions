# Test cases for MediaWiki inline scripts engine

!! test
Basic mathematics
!! input
{{#inline:2 + 2 * 2 ** 2 - 3 * 7 % 5}}
!! result
<p>9
</p>
!! end

!! test
String contecation and out()
!! input
<wikiscript>
out( "foo" + "bar" );
</wikiscript>
!! result
<p>foobar
</p>
!! end

!! test
Multiple variable assignment
!! input
{{#inline: a = b = 3; a + b }}
!! result
<p>6
</p>
!! end

!! test
Assigment with arithmetics (+=, -=, etc)
!! input
{{#inline: a = 2; a += 3; a -= 7; a }}
!! result
<p>-2
</p>
!! end

!! test
Boolean shortcut
!! input
<wikiscript>
!(b = 2) | (b = 3) | (b = 4);
out( b );
</wikiscript>
!! result
<p>3
</p>
!! end

!! test
Equality
!! input
{{#inline: "2" == 2 & "2" !== 2 & 4 === (2 + 2) &
null == "" & false == null & 0 == "" }}
!! result
<p>1
</p>
!! end

!! test
Comments
!! input
{{#inline: 2 + /* 2 + */ 2}}
!! result
<p>4
</p>
!!end

!! test
Comparsions
!! input
{{#inline: 2 > 1 & 2 >= 2 & 2 <= 2 & 1 < 2}}
!! result
<p>1
</p>
!! end

!! test
Tag integration
!! input
{{lc:<wikiscript>out("AA")</wikiscript>}}
!! result
<p>aa
</p>
!! end

!! test
Conditions (?)
!! input
{{#inline: 2 + 2 == 4 ? "a" : "b"}}
!! result
<p>a
</p>
!! end

!! test
Conditions (if-then, if-then-else)
!! input
<wikiscript>
if 2 * 7 > 3 * 4 then
	a = 7
else {
	a = 10;
};

if a ** 2 < 50 then
	out( "ok" );
</wikiscript>
!! result
<p>ok
</p>
!! end

!! article
Template:Bullets
!! text
<wikiscript>
foreach a in args() do
	out( "* " + a + "\n" );
</wikiscript>
!! endarticle

!! test
args() function
!! input
{{bullets|a|b|c}}
!! result
<ul><li> a
</li><li> b
</li><li> c
</li></ul>

!! end

!! article
Template:TranscludedSwitch
!! text
{{#inline: isTranscluded() ? arg(1) : "?!"}}
!! endarticle

!! test
isTranscluded()/arg() check
!! input
{{TranscludedSwitch|11}}
!! result
<p>11
</p>
!! end

!! test
Empty argument handling check
!! input
{{#inline: arg("test") === null}}
!! result
<p>1
</p>
!! end

!! test
Casts
!! input
{{#inline: string(float(2)) === "2.0" & int(7.99) === 7}}
!! result
<p>1
</p>
!! end

!! test
Exception handling
!! input
{{#inline: try 2 / 0 catch e e }}
!! result
<p>dividebyzero
</p>
!! end

!! article
Template:Numberofsomething
!! text
721
!! endarticle

!! test
Template access via parse()
!! input
<wikiscript noparse="1">
numofsmth = int( parse( '{{numberofsomething}}' ) ) + 279;
out( '{{numberofsomething}}: ' + numofsmth );
</wikiscript>
!! result
<p>{{numberofsomething}}: 1000
</p>
!! end

!! test
String functions 1
!! input
{{#inline: lc( 'FOO' ) == 'foo' & uc( 'foo' ) == 'FOO' &
ucfirst( 'bar' ) == 'Bar' & urlencode( 'a="b"' ) == "a%3D%22b%22" }}
!! result
<p>1
</p>
!! end

!! test
String functions 2
!! input
{{#inline: strlen( "тест" ) == 4 & substr( "слово", 1, 2 ) == "ло" &
 strreplace( "abcd", 'bc', 'ad' ) == 'aadd'
}}
!! result
<p>1
</p>
!! end

!! test
split()/join()
!! input
{{#inline: join( '!', split( ':', 'a:b:c:d' ) ) + join( ' ', '', 'e', 'f' ) }}
!! result
<p>a!b!c!d e f
</p>
!! end

!! test
isset/unset
!! input
<wikiscript>
a = null;
b = 1;
unset( b );
out( 'a: ' + isset( a ) + '; b: ' + int( isset( b ) ) );
!! result
<p>a: 1; b: 0
</p>
!! end

#
## Lists
#
!! test
Lists: basics
!! input
<wikiscript>
a = [ b = "a", b = "b", b = "c" ];
out( a[1] + b )
</wikiscript>
!! result
<p>bc
</p>
!! end

!! test
Lists: foreach
!! input
<wikiscript>
a = [ 1, 2, 3, 4, 5 ];
foreach n in a do
	out( n * n + "\n\n");
</wikiscript>
!! result
<p>1
</p><p>4
</p><p>9
</p><p>16
</p><p>25
</p>
!! end

!! test
List merging
!! input
<wikiscript>
foreach element in [ 7, 4 ] + [ 2, 8 ] do
	out( element );
</wikiscript>
!! result
<p>7428
</p>
!! end

!! test
Lists: loop control (break/continue)
!! input
<wikiscript>
a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
foreach e in a do {
	if e >= 6 & e < 9 then continue;
	out( e );
};
foreach e in a do {
	if e == 3 then break;
	out( e );
}
</wikiscript>
!! result
<p>12345912
</p>
!! end

!! test
Lists: changing value of an element
!! input
<wikiscript>
a = [ [ 2, 3 ], [ 5, 6 ], 7 ];
a[1][0] = 3;
a[0][] = 1;
out( a );
</wikiscript>
!! result
<p>2
3
1
</p><p>3
6
</p><p>7
</p>
!! end

!! test
Lists: isset
!! input
<wikiscript>
lst = [ 'a', 'b', 'c' ];
out( isset( lst[1] ) + isset( lst[2] ) + isset( list[3] ) );
</wikiscript>
!! result
<p>2
</p>
!! end

#
## Error handling
#
!! test
Error handling: unexcepted token
!! input
{{#inline: 2 2}}
!! result
<p><strong class="error">Unexpected token at char 3</strong>
</p>
!! end

!! test
Error handling: missing second argument
!! input
{{#inline: 2 + }}
!! result 
<p><strong class="error">Not enough aruments for operator at char 3</strong>
</p>
!! end

!! test
Error handling: token limit
!! config
wgInlineScriptsParserParams=array('parserClass'=>'ISCodeParserShuntingYard', 'limits' => array( 'tokens' => 10, 'evaluations' => 1000, 'depth' => 100 ) )
!! input
{{#inline: 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2}}
!! result
<p><strong class="error">Exceeded tokens limit</strong>
</p>
!! end

!! test
Error handling: evaluations limit
!! config
wgInlineScriptsParserParams=array('parserClass'=>'ISCodeParserShuntingYard', 'limits' => array( 'tokens' => 25000, 'evaluations' => 5, 'depth' => 100 ) )
!! input
{{#inline: 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2}}
!! result
<p><strong class="error">Exceeded evaluations limit</strong>
</p>
!! end

!! test
Error handling: AST depth limit
!! config
wgInlineScriptsParserParams=array('parserClass'=>'ISCodeParserShuntingYard', 'limits' => array( 'tokens' => 25000, 'evaluations' => 1000, 'depth' => 5 ) )
!! input
{{#inline: 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 * 2 + 2 + 2}}
!! result
<p><strong class="error">Too deep abstract syntax tree</strong>
</p>
!! end

!! test
Error handling: missing arguments
!! input
{{#inline: arg()}}
!! result
<p><strong class="error">Not enough arguments for function at char 3</strong>
</p>
!! end
