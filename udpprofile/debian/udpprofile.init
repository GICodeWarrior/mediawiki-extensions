#! /bin/sh
### BEGIN INIT INFO
# Provides:          udp-profile-collector
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: UDP Profile Collector
# Description:       UDP Profile Collector
### END INIT INFO

# Author: Ryan Lane <rlane@wikimedia.org>
#
# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="UDP Profile Collector"
DAEMON="/usr/udpprofile/sbin/collector"
DAEMON2="/usr/udpprofile/sbin/profiler-to-carbon"
DAEMON3="/opt/graphite/bin/carbon-cache.py"

USER="nobody"
SCRIPTNAME=/etc/init.d/udpprofile

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet -m --pidfile /var/lock/collector -d /tmp -c $USER --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet -m --pidfile /var/lock/collector -d /tmp -c $USER --exec $DAEMON \
		|| return 2

	if [ -x "$DAEMON2" ] ; then
		start-stop-daemon --start --quiet -m --pidfile /var/lock/profiler-to-carbon -d /tmp -b -c $USER \
			--exec /usr/bin/python --test -- /usr/udpprofile/sbin/profiler-to-carbon > /dev/null || return 1
		start-stop-daemon --start --quiet -m --pidfile /var/lock/profiler-to-carbon -d /tmp -b -c $USER \
			--exec /usr/bin/python -- /usr/udpprofile/sbin/profiler-to-carbon > /dev/null || return 2
	fi

	if [ -x "$DAEMON3" ] ; then
		start-stop-daemon --start --quiet --pidfile /opt/graphite/storage/carbon-cache-a.pid -d /tmp \
			--exec /usr/bin/python --test -- $DAEMON3 start > /dev/null || return 1
		start-stop-daemon --start --quiet --pidfile /opt/graphite/storage/carbon-cache-a.pid -d /tmp \
			--exec /usr/bin/python -- $DAEMON3 start > /dev/null || return 2
	fi

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet -c $USER --exec $DAEMON
	RETVAL="$?"
	[ -x "$DAEMON2" ] && start-stop-daemon --stop --quiet -c $USER --exec $DAEMON2
	[ -x "$DAEMON2" ] && start-stop-daemon --stop --quiet -c $USER --exec $DAEMON3
	[ "$RETVAL" = 2 ] && return 2
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	do_stop
	do_start
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
