viaf.user.js, a Greasemonkey script
which detects VIAF, PND or GND numbers on web pages and creates related links.
It also fetches names for the detected numbers from the toolserver.

Provisionally homepages and screenshots:

	http://de.wikipedia.org/wiki/Wikipedia:WikiConvention/ \
	Programm/VIAF/en#Greasemonkey_script (en)

	http://de.wikipedia.org/wiki/Wikipedia:WikiConvention/ \
	Programm/VIAF#Greasemonkey-Skript (de)

Version: 0.401
README last updated: 20110925

What are VIAF numbers ?

  http://en.wikipedia.org/wiki/Wikipedia:Authority_control#VIAF
  "The VIAF ID corresponding to the subject of the article can be found on
  http://viaf.org, which combines authority records from many organizations
  worldwide into single datasets..."
  
The viaf.user.js script tries to generously detect VIAF numbers as part of a web
page's text, and also as part of links (urls). It detects them also as part
of texts like " ... VIAF2= ..." (see program code of viaf.user.js for details)
by applying some magic regular expressions.

Detected numbers are indicated with bright cyan colour to attract the
user's attention.

While detecting the numbers, the script adds new links to additional servers.

Such new links come in yellow and have the detected VIAF number as part of the
url, i.e. are deep links (single-click solution).

Those VIAF numbers which are only part of a url (i.e not in the text) are not
apparent - without using this script. Numbers as part of urls are treated in the
same way as numbers in the text. The script adds a dotted red underline to urls
which contain a VIAF and when matching a magic regular expression
(see program code for details).

The VIAF number is then extracted from the url and also shown on the page
in cyan colour with a black dotted underline as indication.

The script calls asynchronously the toolserver with all detected VIAF numbers
and receives as response names which correspond to the numbers, i.e. the
authors' names. Names are shown on magenta labels.

A summary box lsts all distinct VIAF numbers to facilitate cut & paste of
the extracted numbers; this can be disabled in the program code.

The set of further server urls can be adapted in the program code.

It relies on jQuery and two further javascripts, which are fetched automatically
and has an integrated update checker (currently disabled) which looks for newer
versions of it and prompts the user in such case.

It does not automatically install a newer version.

JSON data layout for data exchange with Toolserver
==================================================
the request url has the general form:
http://toolserver.org/~apper/pd/x.php?format=json&data=name&for=

Example 1
=========
simple example, one viaf requested, one name returned
sent to server: [{"viaf":["40254510"]}]

received from server:
[{"viaf":["40254510"],"names":[{"lang":"de,en,fr","name":"Herbert Matar\u00e9"}]}]


Example 2
=========
simple example, one pnd requested, on name returned
sent to server: [{"pnd":["122837231"]}]

received from server:
[{"pnd":["122837231"],"names":[{"lang":"de,en","name":"Jan Josef Liefers"}]}]

Example 3
=========
request with a persons with two viaf numbers, only one has a name in the toolserver
sent to server: [{"viaf":["2878675"]},{"viaf":["122255788"]}]

received from server:
[
{"viaf":["2878675"],
"names":[
{"lang":"de,cs,en,es,fr,hu,id,it,pl,pt,ro","name":"Constantin Noica"},
{"lang":"ar","name":"\u0643\u0648\u0646\u0633\u062a\u0627\u0646\u062a\u064a\u0646 \u0646\u0648\u064a\u0643\u0627"}
]},
{"viaf":["122255788"],"names":[]}
]

Example 4
=========
request with two viaf numbers for two different persons
sent to server: [{"viaf":["2878675"]},{"viaf":["15571981"]}]

received from server:
[
{"viaf":["2878675"],
"names":[
{"lang":"de,cs,en,es,fr,hu,id,it,pl,pt,ro","name":"Constantin Noica"},
{"lang":"ar","name":"\u0643\u0648\u0646\u0633\u062a\u0627\u0646\u062a\u064a\u0646 \u0646\u0648\u064a\u0643\u0627"}
]},
{"viaf":["15571981"],
"names":[
{"lang":"de,lb","name":"Jitzchak Schamir"},
{"lang":"ar","name":"\u0625\u0633\u062d\u0627\u0642 \u0634\u0627\u0645\u064a\u0631"},
{"lang":"be,uk","name":"\u0406\u0446\u0445\u0430\u043a \u0428\u0430\u043c\u0456\u0440"},
{"lang":"be-x-old","name":"\u0406\u0446\u043a\u0430\u0445 \u0428\u0430\u043c\u0456\u0440"},
{"lang":"bg","name":"\u0418\u0446\u0445\u0430\u043a \u0428\u0430\u043c\u0438\u0440"},
{"lang":"ca,es","name":"Isaac Shamir"},
{"lang":"cs","name":"Jicchak \u0160amir"},
{"lang":"da,en,fr,id,it,ms,nl,nn,no,pt,sv","name":"Yitzhak Shamir"},
{"lang":"eo","name":"Jic\u0125ak \u015camir"},
{"lang":"et","name":"Yits'\u1e96ak Shamir"},
{"lang":"fi","name":"Jitzhak Shamir"},
{"lang":"he,yi","name":"\u05d9\u05e6\u05d7\u05e7 \u05e9\u05de\u05d9\u05e8"},
{"lang":"ja","name":"\u30a4\u30c4\u30cf\u30af\u30fb\u30b7\u30e3\u30df\u30eb"},
{"lang":"ko","name":"\uc774\uce20\ud558\ud06c \uc0e4\ubbf8\ub974"},
{"lang":"pl","name":"Icchak Szamir"},{"lang":"ro","name":"I\u021bhak \u0218amir"},
{"lang":"ru","name":"\u0428\u0430\u043c\u0438\u0440, \u0418\u0446\u0445\u0430\u043a"},
{"lang":"sr","name":"\u0408\u0438\u0446\u0430\u043a \u0428\u0430\u043c\u0438\u0440"},
{"lang":"tr","name":"\u0130zak \u015eamir"}
]}
]

Example 5
=========
request with both a viaf and pnd number for one person
sent to server: [{"viaf":["30359946"]},{"pnd":["120155567"]}]

received from server:
[
{"viaf":["30359946"],"names":[{"lang":"de","name":"Sabine Ludwig"}]},
{"pnd":["120155567"],"names":[{"lang":"de","name":"Sabine Ludwig"}]}
]

the same response in array notation:
'0' ...
   'viaf' ...
      '0' => "30359946"
   'names' ...
      '0' ...
         'lang' => "de"
         'name' => "Sabine Ludwig"
'1' ...
   'pnd' ...
      '0' => "120155567"
   'names' ...
      '0' ...
         'lang' => "de"
         'name' => "Sabine Ludwig"

== To Do ==
* add a user-interface or mechanism to enable/disable the summary alert box
  without the need to change program code
* revise and enable the update mechanism
