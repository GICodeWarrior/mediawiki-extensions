#!/usr/bin/python

import sys, os, os.path, signal, socket, re, time

def redirectOutput(fileName):
	os.close(1)
	os.close(2)
	fd = os.open(fileName, os.O_WRONLY|os.O_CREAT|os.O_APPEND, 0666)
	os.dup2(fd, 1)
	os.dup2(fd,2)

def dumpHTML(outputFile, *params):
	fullParams = ["nice", "nice", "-n15", "php","-n","dumpHTML.php"].extend(params)
	pid = os.fork()
	if pid == 0:
		redirectOutput(outputFile)
		os.execvp(params)
		sys.exit(1)

	# Wait for the child to exit (or the parent)
	status = os.waitpid(pid, os.WNOHANG)
	while status == (0,0) and os.getppid() > 1:
		time.sleep(5)
		status = os.waitpid(pid, os.WNOHANG)

	# If the parent exited, then kill the child
	if status == (0,0):
		os.kill(pid, signal.SIGKILL)

def finishWiki(outputFile, lang):
	global edition, siteDir, baseDir
	if (os.path.isdir(siteDir+"/"+lang+"-new")):
		print "Already compressed "+lang+"\n"
		return
	print "Finishing language "+lang+"\n"
	os.system("%(baseDir)/scripts/finish-lang %(lang) %(edition) 2>&1 >> %(outputFile)" % {
		'baseDir' : baseDir, 'lang' : lang, 'edition' : edition, 'outputFile': outputFile })

def writeStatus(jobID, status):
	global baseDir
	f = open(basedir+"/jobs/"+jobID, "w")
	print >> f, socket.gethostname(), os.getpid()
	print >> f, status
	f.close()

def isDone(checkpoint, jobType):
	test = jobType+'=done'
	f = open(checkpoint, "r")
	try:
		for line in f:
			if line.rstrip() == test:
					return true
	finally:
		f.close()


queueHost = sys.argv[1]
queuePort = int(sys.argv[2])
baseDir = sys.argv[3]
edition = sys.argv[4]
siteDir = baseDir+"/wikipedia"

queueSock = socket.socket()
queueSock.connect((queueHost, queuePort))
queueFile = queueSock.makefile()

os.chdir("/home/wikipedia/common/php-1.5/maintenance")
waiting = False

dataRegex = re.compile("data (\w+) ([a-z_-]+) (\w+) (\d+/\d+)")

# Loop until the parent exits
while (os.getppid() > 1):
	queueFile.write("deq\n")
	queueFile.flush()
	s = queueFile.readline()
	m = dataRegex.match(s)
	if m != None:
		waiting = False
		jobID = m.group(1)
		wiki = m.group(2)
		type = m.group(3)
		slice = m.group(4)
		lang = wiki.replace( 'wiki', '' )
		dest = siteDir+"/"+lang+"-new"
		jobString = wiki+"_" + type + "_" + slice.replace( '/', '_' )
		outputFile = baseDir+"/logs/"+jobString
		checkpoint = baseDir+"/checkpoints/"+jobString

		if type == "articles":
			writeStatus(jobID, 'running')
			print wiki + ' articles ' + slice
			dumpHTML(outputFile, wiki,"--no-shared-desc", #"--force-copy",
				"--image-snapshot","--interlang","-d",dest,"--slice",slice,
				"--checkpoint",checkpoint,"--no-overwrite")
			
			if isDone(checkpoint, 'everything'):
				writeStatus(jobID, 'done')
			else:
				writeStatus(jobID, 'terminated')

		elif type == "shared":
			writeStatus(jobID, 'running')
			print wiki + ' shared ' + slice
			dumpHTML(outputFile, wiki,"--shared-desc", #"--force-copy",
				"--image-snapshot","--interlang","-d",dest,"--slice",slice,
				"--checkpoint",checkpoint,"--no-overwrite")
			if isDone(checkpoint, 'shared image'):
				writeStatus(jobID, 'done')
			else:
				writeStatus(jobID, 'terminated')

		elif type == "finish":
			writeStatus(jobID, 'running')
			print wiki + ' finishing'
			finishWiki(outputFile, wiki)
			writeStatus(jobID, 'done')
	else:
		if not waiting:
			print "Waiting..."
			waiting = True
		time.sleep(5)


