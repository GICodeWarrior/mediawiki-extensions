#!/usr/bin/python

''' plot editor life cycle '''

import sys
import numpy as np
from argparse import ArgumentParser
import os

__prog__ = os.path.basename(os.path.abspath(__file__))

parser = ArgumentParser(description=__doc__)
parser.add_argument('data_files', metavar='data', nargs='+')
parser.add_argument('-l', '--label', metavar='TEXT', action='append',
        dest='labels_list', default=[])
parser.add_argument('-inset', dest='inset_data_file', metavar='FILE')
parser.add_argument('-batch', action='store_true', help='uses PDF backend')
parser.add_argument('-title')
parser.add_argument('-fmt', default='pdf', help='default: %(default)s')

if __name__ == '__main__':
    ns = parser.parse_args()
    
    # checks
    if len(ns.data_files) != len(ns.labels_list):
        print >> sys.stderr, '%s: error: please provide as many labels '\
                'as lines' % __prog__
        sys.exit(1)

    # import pyplot, make lists of colors and markers
    if ns.batch:
        import matplotlib
        matplotlib.use('PDF')
    import matplotlib.pyplot as pp
    from matplotlib.lines import lineMarkers as markers
    markers = dict(filter(
            lambda k : isinstance(k[0],str) and k[1] is not '_draw_nothing',
            markers.items())).keys()
    colors = 'krbgm'

    # create figure and axes
    fig = pp.figure()
    ax = pp.axes([.1, .1, .85, .8])
    
    # add lines
    N = len(ns.data_files)
    for i in xrange(N):
        data_file = ns.data_files[i]
        label = ns.labels_list[i]
        color = colors[i % N]
        marker= markers[i % N]
        x, y, ye = np.loadtxt(data_file, unpack=1)
        ax.errorbar(x, y, ye, color=color, marker=marker, mfc='none', 
            mec=color, ls=':', label=label)

    ax.legend(loc=2)
    ax.set_xlabel('days since registration')
    ax.set_ylabel('edits/day')
    if ns.title is not None:
        ax.set_title(ns.title)
    ax.axis('tight')

    # plot hist of lifetimes in inset axes 
    lt = np.loadtxt(ns.inset_data_file)
    inax = pp.axes([.55, .6, .35, .25], axisbg='none')
    inax.hist(lt, bins=20, fc='none', cumulative=-1, normed=0)
    for l in inax.xaxis.get_ticklabels():
        l.set_rotation(30)
        l.set_fontsize('x-small')
    for l in inax.yaxis.get_ticklabels():
        l.set_fontsize('x-small')
    inax.set_xlabel('lifespan $x$ (days)', fontsize='small')
    inax.set_ylabel('no. of users older\n more than $x$ days', fontsize='small')
    inax.set_title('account lifetime')
    inax.axis('tight')

    pp.draw()
    if ns.title is not None:
        fn = ns.title.replace(' ', '_').lower() + '.' + ns.fmt
    else:
        fn = 'output.' + ns.fmt
    print 'output saved to %s' % fn

    pp.savefig(fn, fmt=ns.fmt)
    pp.show()
