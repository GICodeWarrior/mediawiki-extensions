#!/usr/bin/python

'''
computes average activity rates from downloaded user counts archive files
'''

'''
Copyright (C) 2011 GIOVANNI LUCA CIAMPAGLIA, GCIAMPAGLIA@WIKIMEDIA.ORG
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
http://www.gnu.org/copyleft/gpl.html
'''

__author__ = "Giovanni Luca Ciampaglia"
__email__ = "gciampaglia@wikimedia.org"

import sys
import os
import numpy as np

from argparse import ArgumentParser

from lifecycle.rates import computerates

parser = ArgumentParser(description=__doc__)
parser.add_argument('input_path_list', metavar='data', nargs='+')
parser.add_argument('-outdir', dest='output_dir', default=os.curdir)
parser.add_argument('-every', type=int, help='default: average over %(default)d days',
        default=30, metavar='NUM')
parser.add_argument('-n', '--namespace', type=int, action='append', help='select only these NS',
        dest='only')
parser.add_argument('-G', '--geometric', action='store_true', help='compute '
        'geometric mean and standard deviation of data')

__prog__ = os.path.basename(__file__)

def main(ns):

    for path in ns.input_path_list:

        # define output path
        output_path = os.path.basename(path)
        output_path = os.path.splitext(output_path)[0] + '.tsv'
        output_path = os.path.join(ns.output_dir, output_path)

        # compute rates for this cohort and save them to file
        rates = computerates(path, ns.every, onlyns=ns.only,
                geometric=ns.geometric)
        np.savetxt(output_path, rates, fmt='%d\t%12.8g\t%12.8g\t%d')
        print '%s: output saved to %s' % (__prog__, output_path)

if __name__ == '__main__':
    # get arguments from command line
    ns = parser.parse_args()
    main(ns)

