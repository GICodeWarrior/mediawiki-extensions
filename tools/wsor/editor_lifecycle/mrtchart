#!/usr/bin/python
# coding: utf8

''' Plots mean relaxation time chart '''

'''
Copyright (C) 2011 GIOVANNI LUCA CIAMPAGLIA, GCIAMPAGLIA@WIKIMEDIA.ORG
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
http://www.gnu.org/copyleft/gpl.html
'''

__author__ = "Giovanni Luca Ciampaglia"
__email__ = "gciampaglia@wikimedia.org"

import re
import os
import sys

import numpy as np
import matplotlib.pyplot as pp

from argparse import ArgumentParser
from datetime import datetime
from dateutil.parser import parser as DateParser
from matplotlib.font_manager import FontProperties

__prog__ = os.path.basename(__file__)

parser = ArgumentParser(description=__doc__)
parser.add_argument('data_paths', metavar='data', nargs='+')
parser.add_argument('-o', '--output', dest='output_path', metavar='FILE')
parser.add_argument('-T', '--title')
parser.add_argument('-s', '--significance', default=0, help='plot MRT only '
        'for fits with significance >= %(metavar)s', metavar='LEVEL', type=float)

markers = 'ov^<>sp*+xD'
colors = 'bgrcmykw'

dateparser = DateParser()

class UnsupportedFileFormatError(Exception):
    pass

def load(path):
    ''' detect extension and loads data using numpy.io functions '''
    _, ext = os.path.splitext(path)
    if re.match('^\.npy$', ext, re.I):
        return np.load(path)
    elif re.match('^\.tsv$', ext, re.I) or re.match('^\.txt$', ext, re.I):
        default = datetime(2001,1,1)
        def parse(timestamp):
            return dateparser.parse(timestamp, default)
        conv = {0: parse, 1: int, 2: float, 3: float, 4: float, 5: float}
        data = np.loadtxt(path, delimiter='\t', converters=conv, dtype=object)
        return data
    raise UnsupportedFileFormatError(path)

def clean(data, level=0):
    data = filter(lambda k : k[2] < 3000 and k[2] > 0 and k[-1] >= level, data)
    data = sorted(data, key=lambda k : k[0])
    return np.asarray(data)

def main(ns):
    
    # create figure and axis
    fig = pp.figure(figsize=(10,4))
    ax = fig.add_axes(pp.axes([.1,.15,.65,.75], axisbg='ghostwhite'))
    M = len(markers)
    C = len(colors)

    print 'date: %s' % datetime.now()

    # plot lines
    for i, path in enumerate(ns.data_paths):
        try:
            name, ext = os.path.splitext(path)
            name = name.replace('_',' ')
            data = clean(load(path), ns.significance)
            if len(data):
                dates, a, mrt, R2, Chi2, pval = data.T
                ax.plot(dates, mrt, ':'+markers[i % M]+colors[i % C], label=name)
                print 'dataset: %s, average R^2: %.5g, points at Î± > %d%%: %d'\
                        % (path, np.mean(R2), ns.significance * 100, len(data))
            else:
                print 'dataset: %s, average R^2: N/A, points at %d%%: 0'\
                        % (path, ns.significance * 100)
        except UnsupportedFileFormatError,e:
            print >> sys.stderr, '%s: error: unsupported file type %s (.npy,'\
                    '.tsv, .txt accepted)' % (__prog__, e.args[0])
            sys.exit(1)


    # decorate
    pp.ylabel('average time to inactivity')
    pp.xlabel('')
    pp.figlegend(ax.lines, [ l.get_label() for l in ax.lines ], 
            loc='center right', prop=FontProperties(size='small'))
    for label in ax.xaxis.get_ticklabels():
        label.set_rotation(-20)
    pp.minorticks_on()
    pp.grid("on")
    if ns.title is not None:
        pp.title(ns.title)
    pp.draw()

    # save to file, is output path specified
    if ns.output_path is not None:
        _, ext = os.path.splitext(ns.output_path)
        fmt = ext.strip('.') or 'pdf'
        pp.savefig(ns.output_path, fmt=ext)
        print '%s: output saved to %s' % (__prog__, ns.output_path)

    pp.show()

if __name__ == '__main__':
    ns = parser.parse_args()
    main(ns)

