#!/usr/bin/python
# vim:ft=python:
# coding : utf-8

# TODO: obsolete

'''
Copyright (C) 2011 GIOVANNI LUCA CIAMPAGLIA, GCIAMPAGLIA@WIKIMEDIA.ORG
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
http://www.gnu.org/copyleft/gpl.html
'''

''' fetches a cohort based on year of registration and editing activity '''

from argparse import ArgumentParser
from oursql import connect
import os
import sys
import datetime as dt
import csv

prog = os.path.basename(os.path.abspath(__file__))

parser = ArgumentParser(description=__doc__, fromfile_prefix_chars='@')
parser.add_argument('registration_year', metavar='year', type=int)
parser.add_argument('min_activity', metavar='minedits', type=int)
parser.add_argument('max_activity', metavar='maxedits', type=int)
parser.add_argument('-c', '--config', dest='config_file')
parser.add_argument('-l', '--limit', type=int)

query = '''
select 
    user_id, 
    user_name, 
    user_registration, 
    user_editcount
from user u left join user_groups ug
on u.user_id = ug.ug_user 
where 
    (ug_group <> 'bot' or ug_user is null)
    and year(user_registration) = ?
    and user_editcount > ? 
    and user_editcount < ?
'''

if __name__ == '__main__':
    ns = parser.parse_args()
    if ns.min_activity >= ns.max_activity:
        print >> sys.stderr, '%s: error: min_activity >= max_activity' % prog
        sys.exit(1)
    if ns.registration_year < 2001 or ns.registration_year > dt.datetime.now().year:
        print >> sys.stderr, '%s: error: illegal year: %d' % (prog,
                ns.registration_year)
        sys.exit(1)

    if ns.limit is not None:
        query += 'limit %d' % ns.limit

    if ns.config_file is None:
        ns.config_file = os.path.expanduser('~/.my.cnf')

    conn = connect(read_default_file=ns.config_file)
    writer = csv.writer(sys.stdout, dialect='excel-tab')
    cursor = conn.cursor()
    cursor.execute(query, (ns.registration_year, ns.min_activity, ns.max_activity))
    for row in cursor:
        writer.writerow(row)
