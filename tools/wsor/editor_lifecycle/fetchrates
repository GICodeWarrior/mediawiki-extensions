#!/usr/bin/python

import sys
import os
import numpy as np

from zipfile import ZipFile
from contextlib import closing
from tempfile import mkdtemp
from oursql import connect
from argparse import ArgumentParser
from datetime import datetime

from lifecycle.rates import computerates

parser = ArgumentParser(description=__doc__)
parser.add_argument('input_path', metavar='cohort')
parser.add_argument('-config', dest='config_file')
parser.add_argument('-outdir', dest='output_dir', default=os.curdir)
parser.add_argument('-v','--verbose', action='store_true')
parser.add_argument('-every', type=int, help='default: average over %(default)d days',
        default=30, metavar='NUM')
parser.add_argument('-ns', type=int, action='append', help='select only these NS',
        dest='only')
parser.add_argument('--save-cohort', dest='rates_only', action='store_false')

query = """
select unix_timestamp(rev_timestamp)/86400.0, page_namespace
from revision r join page p
on r.rev_page = p.page_id
where rev_user = ?
order by rev_timestamp
"""

__prog__ = os.path.basename(os.path.abspath(__file__))

# def iterateoversets(cursor):
#     yield list(cursor)
#     while cursor.nextset():
#         yield list(cursor)

def process(rows, user_id, output_dir=os.path.curdir):
    if len(rows) == 0:
        print >> sys.stderr, '%s: error: empty revision history for user %d' % (__prog__,
                user_id)
        return

    rev_time, rev_ns = np.asfarray(rows).T
    m, M = np.floor(rev_time.min()), np.ceil(rev_time.max())
    uns = sorted(np.unique(rev_ns))
    bins_time = np.arange(m,M + 1)
    bins_ns = uns + [uns[-1] + 1]
    rates, days, _ = np.histogram2d(rev_time, rev_ns, bins=(bins_time, bins_ns))
    I,J = np.nonzero(rates)
    data = [ (days[i],uns[j],rates[i,j]) for i, j in zip(I,J) ] # in coordinate format
    dtype=np.dtype([('day', int), ('ns', int), ('edits', int)])
    data = np.asarray(data, dtype=dtype)
    out_path = os.path.join(output_dir, '%d.npy' % user_id)
    np.save(out_path, data)
    return out_path

def main(ns):
    # get mysql client configuration file
    mycnf = os.path.expanduser('~/.my.cnf')
    if ns.config_file is None and not os.path.exists(mycnf):
        print >> sys.stderr, '%s: no config file specified and $HOME/.my.cnf'
        ' not found' % __prog__
        sys.exit(1)
    elif ns.config_file is None:
        ns.config_file = mycnf

    # test output directory exists
    if not os.path.exists(ns.output_dir):
        print >> sys.stderr, '%s: output directory does not exist: %s' % (
                __prog__, ns.output_dir)
        sys.exit(1)
    if not os.path.isdir(ns.output_dir):
        print >> sys.stderr, '%s: not a directory: %s' % (__prog__, ns.output_dir)
 
    # read user ids from cohort file, create zip archive and temp dir
    with closing(open(ns.input_path)) as f:
        line = f.readline().strip()
        if line:
            user_ids = map(int, line.split('\t'))
        else:
            print >> sys.stderr, '%s: error: empty input file: %s' % ns.input_path
            sys.exit(1)
    zip_path = os.path.splitext(os.path.basename(ns.input_path))[0] + '.npz'
    zip_path = os.path.join(ns.output_dir, zip_path)
    temp_dir = mkdtemp()

    with closing(ZipFile(zip_path, 'w')) as zf:

        # connect and run query 
        conn = connect(read_default_file=ns.config_file)
        for uid in user_ids:
            # compute rates and save to file
            with conn.cursor() as cursor:
                cursor.execute(query, (uid,))
                rows = list(cursor)
                path = process(rows, uid, temp_dir)
                if path is None:
                    continue
                zf.write(path, os.path.basename(path))
                os.remove(path)

    # remove temp dir
    os.removedirs(temp_dir)

    # compute rates for this cohort and save them to file
    rate_path = os.path.splitext(os.path.basename(ns.input_path))[0] + '.tsv'
    rate_path = os.path.join(ns.output_dir, rate_path)
    rates = computerates(zip_path, ns.every, onlyns=ns.only)
    np.savetxt(rate_path, rates, fmt='%d\t%12.8g\t%12.8g\t%d')
    if ns.rates_only:
        os.remove(zip_path)
        print '%s: output saved to %s' % (datetime.now(), rate_path)
    else:
        print '%s: output saved to %s, cohort data to %s' % (datetime.now(),
                rate_path, zip_path)

if __name__ == '__main__':
    # get arguments from command line
    ns = parser.parse_args()
    main(ns)

