#!/usr/bin/python

import sys
from oursql import connect
from argparse import ArgumentParser
import numpy as np
import os
from time import time

parser = ArgumentParser(description=__doc__)
parser.add_argument('user_id', type=int)
parser.add_argument('-config', dest='config_file')
parser.add_argument('-outdir', dest='output_dir', default=os.curdir)

# TODO get also deleted revisions!

query = """
select unix_timestamp(rev_timestamp)/86400.0
from revision 
where rev_user = ?
order by rev_timestamp
"""

prog = os.path.basename(os.path.abspath(__file__))

def main(ns):
    # get mysql client configuration file
    mycnf = os.path.expanduser('~/.my.cnf')
    if ns.config_file is None and not os.path.exists(mycnf):
        print >> sys.stderr, '%s: no config file specified and $HOME/.my.cnf'
        ' not found' % prog
        sys.exit(1)
    elif ns.config_file is None:
        ns.config_file = mycnf

    # test output directory exists
    if not os.path.exists(ns.output_dir):
        print >> sys.stderr, '%s: output directory does not exist: %s' % (
                prog, ns.output_dir)
        sys.exit(1)
    if not os.path.isdir(ns.output_dir):
        print >> sys.stderr, '%s: not a directory: %s' % (prog, ns.output_dir)
    
    # start timer
    tstart = time()

    # connect run query 
    conn = connect(read_default_file=ns.config_file)
    cursor = conn.cursor()
    cursor.execute(query, (ns.user_id,))

    # compute rates and save to file
    revs = np.asfarray(list(cursor))
    m, M = np.floor(revs.min()), np.ceil(revs.max())
    rates, days = np.histogram(revs, range=(m,M), bins=(M-m))
    data = np.c_[days[:-1], rates]
    out_path = os.path.join(ns.output_dir, '%d.npy' % ns.user_id)
    np.save(out_path, data)

    # stop timer
    tstop = time()
    print '%s: output saved to %s (execution time: %g sec, fetched: %d rows)' % (
            prog, out_path, tstop - tstart, len(revs))

if __name__ == '__main__':
    # get arguments from command line
    ns = parser.parse_args()
    main(ns)

