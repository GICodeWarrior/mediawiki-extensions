#!/usr/bin/python
# :vim:ft=python

''' plot cohort activity peak date and peak value trends '''

'''
Copyright (C) 2011 GIOVANNI LUCA CIAMPAGLIA, GCIAMPAGLIA@WIKIMEDIA.ORG
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
http://www.gnu.org/copyleft/gpl.html
'''

import os
import sys

import numpy as np
import matplotlib.pyplot as pp

from argparse import ArgumentParser
from collections import defaultdict
from datetime import datetime
from matplotlib.font_manager import FontProperties
from dateutil.parser import parser as DateParser

__prog__ = os.path.basename(__file__)

parser = ArgumentParser(description=__doc__)
parser.add_argument('data_paths', metavar='data', nargs='+')
parser.add_argument('-o', '--output', dest='output_path', metavar='FILE')
parser.add_argument('-T', '--title')
parser.add_argument('-s', '--splitted', action='store_true')
parser.add_argument('-y', '--stretch-ylim', action='store_true', help='works'
        ' only in twin-axes mode')

date_parser = DateParser()
default_date = datetime(2001,1,1)

markers = 'ov^<>sp*+xD'
colors = 'brcmgykw'
conv = defaultdict(lambda k : float)
conv[0] = lambda k : date_parser.parse(k, default=default_date)

if __name__ == '__main__':
    ns = parser.parse_args()

    # create figure
    fig = pp.figure(figsize=(12,4))

    if ns.splitted:
        ax1 = fig.add_subplot(121)
        ax2 = fig.add_subplot(122)
    else:
        ax1 = fig.add_axes(pp.axes([.1,.15,.65,.75], axisbg='ghostwhite'))
        ax2 = ax1.twinx()

    M = len(markers)
    C = len(colors)

    lines = []

    for i, path in enumerate(ns.data_paths):

        # load cohort data and filter out estimates based on samples with size
        # smaller than minimum requested
        arr = np.loadtxt(path, delimiter='\t', dtype=object, converters=conv, 
                skiprows=1)

        if len(arr) == 0:
            print >> sys.stderr, '%s: warning: skipping empty dataset: %s' % \
                    (__prog__, path)
            continue
 
        date = arr[:, 0]
        idx = np.argsort(date)
        arr = arr[idx]
        date = arr[:, 0]
        act, peak_date, peak_date_err, peak, peak_err = map(np.asfarray, 
                arr[:,1:].T)

        label = os.path.splitext(path)[0].replace('_',' ')

        if ns.splitted:
            color = colors[i % C]
        else:
            color = 'red'

        marker = markers[i % M]
        l, (wu, wd), mc = ax1.errorbar(date, peak_date, peak_date_err / 2.0, 
                marker=marker, mec=color, label=label, ecolor='lightgrey', 
                ls='none', lw=2, mfc='none')
        lines.append(l)

        if ns.splitted:
            color = colors[i % C]
        else:
            color = 'blue'

        l, (wu, wd), mc = ax2.errorbar(date, peak, peak_err / 2.0, 
                marker=marker, mec=color, label=label, ecolor='lightgrey', 
                ls='none', lw=2, mfc='none', color=color)

        lines.append(l)

        if not ns.splitted and ns.stretch_ylim:
            ym1, yM1 = ax1.get_ylim()
            d1 = (yM1 - ym1) * .3
            ax1.set_ylim(ym1, yM1 + d1)

            ym2, yM2 = ax2.get_ylim()
            d2 = (yM2 - ym2) * .3
            ax2.set_ylim(ym2 - d2, yM2)

    # decorate figure
    ax1.set_xlabel('cohorts')
    
    if ns.splitted:
        ax1.set_ylabel('peak day')
        ax2.set_ylabel('peak value (edits/day)')
    else:
        ax1.set_ylabel('peak day', color='red')
        ax2.set_ylabel('peak value (edits/day)', color='blue')
    pp.figlegend(lines, [ l.get_label() for l in lines ], 
            loc='upper right', prop=FontProperties(size='small'))

    ax1.minorticks_on()
    ax1.grid("on")

    if ns.splitted:
        ax2.minorticks_on()
        ax2.grid("on")

    if ns.title is not None:
        pp.title(ns.title)
    pp.draw()

    # save to file, is output path specified
    if ns.output_path is not None:
        _, ext = os.path.splitext(ns.output_path)
        fmt = ext.strip('.') or 'pdf'
        pp.savefig(ns.output_path, fmt=ext)
        print '%s: output saved to %s' % (__prog__, ns.output_path)

    pp.show()

