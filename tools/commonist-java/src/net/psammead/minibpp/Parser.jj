options { UNICODE_INPUT=true; STATIC=false; }

PARSER_BEGIN(Parser)
    package net.psammead.minibpp.parser;

    import java.io.*;
	import net.psammead.minibpp.Context;
	
    public class Parser {
        Context pp;
	public static void parse(Reader r, Context _pp) throws ParseException, IOException {
	  Parser p = new Parser(r);
	  p.pp=_pp;
          p.Line();
          p.pp.done();
       }
    }	

PARSER_END(Parser)

TOKEN_MGR_DECLS :
{
  static int pcount;
}

<DEFAULT> TOKEN: { < PLAIN : (~[])  > }
<DEFAULT> TOKEN: { < PLAIN_DOLLAR : "$$" > { 
	matchedToken.image="$"; matchedToken.kind=PLAIN; 
} }
<DEFAULT> TOKEN: { < LPAREN : "$(" > { matchedToken.image="("; pcount=1; } : JAVA }
<DEFAULT> TOKEN : { 
  < IDENTIFIER: "$" <LETTER> (<LETTER>|<DIGIT>)* > 
|
  < #LETTER:
      [
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

<NOWHERE> TOKEN: { < RPAREN: ")" > }
<JAVA> TOKEN: { < JLPAREN : "(" > { ++pcount; matchedToken.kind=JPLAIN; } }
<JAVA> TOKEN: { < JRPAREN : ")" > { 
  --pcount; 
  if (pcount == 0) {
    SwitchTo(DEFAULT);
    matchedToken.kind=RPAREN;
  } else {
    matchedToken.kind=JPLAIN;
  }
} }

<JAVA> TOKEN : { < JPLAIN : (~["\"","\'","\n","\r","(",")"])+ > }
<JAVA> TOKEN : { < JCHAR : 
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
> { matchedToken.kind=JPLAIN; } }
<JAVA> TOKEN : { < JSTRING : 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
> { matchedToken.kind=JPLAIN; } }

void Line() throws IOException :
{ StringBuffer sb=new StringBuffer(); Token t; StringBuffer m; }
{
  ( 
    t=<PLAIN> { sb.append(t.image);} 
  | 
    m=Magic() { 
//      if (m.length()==0) { sb.append("$"); }
//      else {
        if (sb.length()>0) { pp.literal(sb.toString()); sb=new StringBuffer(); }
	pp.magic(m.toString());
//      }
    }
  ) * <EOF>
  { if (sb.length() > 0) pp.literal(sb.toString()); }
}

StringBuffer Magic() throws IOException :
{ StringBuffer sb=new StringBuffer(); Token t; }
{
  t=<IDENTIFIER> { sb.append(t.image.substring(1)); return sb; }
| 
  ( t=<LPAREN> 
    ( t=<JPLAIN> { sb.append(t.image); } ) * 
    t=<RPAREN> { return sb; } )
} 
