#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This script has been copied from
# http://svn.openstreetmap.org/sites/tile.openstreetmap.org/cgi-bin/export
# and hacked to make it more suitable for Wikimedia.

import cairo
import cgi
import mapnik
import os
import shutil
import sys
import tempfile
import resource
import yaml

#
# Config data
#

config = yaml.load(open('/sql/etc/export-config.yml'))

cpu_min = config['limits']['rlimit']['cpu']['min']
cpu_max = config['limits']['rlimit']['cpu']['max']

as_min = config['limits']['rlimit']['as']['min']
as_max = config['limits']['rlimit']['as']['max']

max_load = config['limits']['max_load']

maptypes = config['maptypes']
locales = yaml.load(open(config['locales']))

# Limit maximum CPU time
# The Postscript output format can sometimes take hours
resource.setrlimit(resource.RLIMIT_CPU,(cpu_min, cpu_max))

# Limit memory usage
# Some odd requests can cause extreme memory usage
resource.setrlimit(resource.RLIMIT_AS,(as_min, as_max))

# Routine to output HTTP headers
def output_headers(content_type, length = 0):
  print "Content-Type: %s" % content_type
  if length:
    print "Content-Length: %d" % length
  print ""

# Routine to output the contents of a file
def output_file(file):
  file.seek(0)
  shutil.copyfileobj(file, sys.stdout)

# Routine to get the size of a file
def file_size(file):
  return os.fstat(file.fileno()).st_size

# Routine to report an error
def output_error(message):
  output_headers("text/html")
  print "<html>"
  print "<head>"
  print "<title>Error</title>"
  print "</head>"
  print "<body>"
  print "<h1>Error</h1>"
  print "<p>%s</p>" % message
  print "</body>"
  print "</html>"

# Parse CGI parameters
form = cgi.FieldStorage()

# Abort if the load average on the machine is too high
loadavg = float(open("/proc/loadavg").readline().split(" ")[0])
if loadavg > max_load:
  print "Status: 503 Service Unavailable"
  output_error("The load average on the server is too high at the moment. Please wait a few minutes before trying again.")
 
# Validate the parameters
elif not form.has_key("bbox"):
  # No bounding box specified
  output_error("No bounding box specified")
elif not form.has_key("scale"):
  # No scale specified
  output_error("No scale specified")
elif not form.has_key("format"):
  # No format specified
  output_error("No format specified")
elif not form.has_key("maptype"):
  # No format specified
  output_error("No maptype specified")
elif not form.has_key("locale"):
  # No format specified
  output_error("No locale specified")
elif not form.getvalue("maptype") in maptypes:
  output_error("Invalid maptype, valid types are %s" % maptypes)
elif not form.getvalue("locale") in locales:
  output_error("Invalid locale %s valid are %s" % (form.getvalue("locale"), locales))
else:
  # Create projection object
  prj = mapnik.Projection("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over");

  # Get the bounds of the area to render
  bbox = [float(x) for x in form.getvalue("bbox").split(",")]

  if bbox[0] >= bbox[2] or bbox[1] >= bbox[3]:
    # Bogus bounding box
    output_error("Invalid bounding box")
  else:
    # Project the bounds to the map projection
    bbox = mapnik.forward_(mapnik.Envelope(*bbox), prj)

    # Calculate the size of the final rendered image
    scale = float(form.getvalue("scale"))
    width = int(bbox.width() / scale / 0.00028)
    height = int(bbox.height() / scale / 0.00028)

    # Limit the size of map we are prepared to produce
    if width * height > 4000000:
      # Map is too large (limit is approximately A2 size)
      output_error("Map too large")
    else:
      # Create map
      map = mapnik.Map(width, height)

      # Load map configuration
      mapnik.load_map(map, "/sql/mapnik-stylesheets/%s/osm-%s.xml" % (form.getvalue("maptype"), form.getvalue("locale")))

      # Zoom the map to the bounding box
      map.zoom_to_box(bbox)

      # Render the map
      if form.getvalue("format") == "png":
        image = mapnik.Image(map.width, map.height)
        mapnik.render(map, image)
        png = image.tostring("png") 
        output_headers("image/png", len(png))
        print png
      else:
        output_error("Unknown format '%s'" % form.getvalue("format"))
