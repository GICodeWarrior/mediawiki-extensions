#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This script has been copied from
# http://svn.openstreetmap.org/sites/tile.openstreetmap.org/cgi-bin/export
# and hacked to make it more suitable for Wikimedia.

import cairo
import cgi
import mapnik
import os
import shutil
import sys
import tempfile
import resource
import yaml
import md5
import datetime
import math
import socket
import struct

#
# Config data
#

config = yaml.load(open('/sql/etc/export-config.yml'))

cpu_min = config['limits']['rlimit']['cpu']['min']
cpu_max = config['limits']['rlimit']['cpu']['max']

as_min = config['limits']['rlimit']['as']['min']
as_max = config['limits']['rlimit']['as']['max']

max_load = config['limits']['max_load']

maptypes = config['maptypes']
locales = yaml.load(open(config['locales']))

# Limit maximum CPU time
# The Postscript output format can sometimes take hours
resource.setrlimit(resource.RLIMIT_CPU,(cpu_min, cpu_max))

# Limit memory usage
# Some odd requests can cause extreme memory usage
resource.setrlimit(resource.RLIMIT_AS,(as_min, as_max))

# Routine to output HTTP headers
def output_headers(content_type, length = 0, etag = 0):
  print "Content-Type: %s" % content_type

  #Add caching headers
  print "Cache-Control: max-age=%i" % config['caching']['max-age']
  today = datetime.datetime.utcnow()
  delta = datetime.timedelta(days=(config['caching']['max-age']/86400), seconds = ((config['caching']['max-age']%86400)))
  expire = today + delta
  print "Expires: %s GMT" % expire.strftime("%a, %d %b %Y %H:%M:%S")
  if etag:
    print "Etag : \"%s\"" % etag

  if length:
    print "Content-Length: %d" % length
  print ""
  

# Routine to output the contents of a file
def output_file(file):
  file.seek(0)
  shutil.copyfileobj(file, sys.stdout)

# Routine to get the size of a file
def file_size(file):
  return os.fstat(file.fileno()).st_size

# Routine to report an error
def output_error(message):
  output_headers("text/html")
  print "<html>"
  print "<head>"
  print "<title>Error</title>"
  print "</head>"
  print "<body>"
  print "<h1>Error</h1>"
  print "<p>%s</p>" % message
  print "</body>"
  print "</html>"

# When generating a static map, also insert the relevant tiles into
# the rendering queue, as one might want to view the static map in a
# slippy map afterwards
def expire_tiles(bbox, zoom,renderd_xmlname):
  width = bbox[2] - bbox[0]
  height = bbox[3] - bbox[1]
  # Add a 10% margin around the bounding box
  bbox_bigger = [(bbox[0] - 0.10*width), (bbox[1] - 0.10*height), (bbox[2] + 0.10*width), (bbox[3] + 0.10*height)]
  notiles = math.pow(2,zoom)
  # Calculate the x/y coordinates of the tiles corresponding to the bbox
  mix = int(1 + math.floor((bbox_bigger[0] + 180.0) / (360.0 / notiles)))
  max = int(1 + math.ceil((bbox_bigger[2] + 180) / (360.0 / notiles)))

  # The tiles are merkator projected, so calculating y coordinates from the bbox is a little more
  # complicated. The formula was taken from http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#X_and_Y
  merc_miy = math.log(math.tan(bbox_bigger[1]/180*math.pi) + 1/math.cos(bbox_bigger[1]/180*math.pi))
  may = int(1 + math.floor(((1 - merc_miy/math.pi) / 2)*notiles))
  merc_may = math.log(math.tan(bbox_bigger[3]/180*math.pi) + 1/math.cos(bbox_bigger[3]/180*math.pi))
  miy = int(1 + math.floor(((1 - merc_may/math.pi) / 2)*notiles))

  CMD_DIRT = 2
  RENDERD_PROTOCOL_VER = 2

  # Open a socket to renderd 
  for x in range(mix, max):
    for y in range(miy, may):
      try:
          # TODO: It would be better to reuse the socket rather than
          # creating a new one everytime.
          s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
          s.connect(config['renderd']['socket'])
          s.send(struct.pack("iiiii44s",RENDERD_PROTOCOL_VER,CMD_DIRT,x,y,zoom,renderd_xmlname))
          s.close()
      except:
        # If we have an error here, just continue with the next one
        # and hope that works better.
        continue
  return

# Parse CGI parameters
form = cgi.FieldStorage()

# Abort if the load average on the machine is too high
loadavg = float(open("/proc/loadavg").readline().split(" ")[0])
if loadavg > max_load:
  print "Status: 503 Service Unavailable"
  output_error("The load average on the server is too high at the moment. Please wait a few minutes before trying again.")
 
# Validate the parameters
elif not form.has_key("bbox"):
  # No bounding box specified
  output_error("No bounding box specified")
elif not form.has_key("scale"):
  # No scale specified
  output_error("No scale specified")
elif not form.has_key("format"):
  # No format specified
  output_error("No format specified")
elif not form.has_key("maptype"):
  # No format specified
  output_error("No maptype specified")
elif not form.has_key("locale"):
  # No format specified
  output_error("No locale specified")
elif not form.getvalue("maptype") in maptypes:
  output_error("Invalid maptype, valid types are %s" % maptypes)
elif not form.getvalue("locale") in locales:
  output_error("Invalid locale, valid are %s" % locales.keys())
else:
  # Create projection object
  prj = mapnik.Projection("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over");

  # Get the bounds of the area to render
  bbox = [float(x) for x in form.getvalue("bbox").split(",")]

  if bbox[0] >= bbox[2] or bbox[1] >= bbox[3]:
    # Bogus bounding box
    output_error("Invalid bounding box")
  else:
    bbox_coords = bbox
    # Project the bounds to the map projection
    bbox = mapnik.forward_(mapnik.Envelope(*bbox), prj)

    # Calculate the size of the final rendered image
    scale = float(form.getvalue("scale"))
    width = int(bbox.width() / scale / 0.00028)
    height = int(bbox.height() / scale / 0.00028)

    # Limit the size of map we are prepared to produce
    if width * height > 4000000:
      # Map is too large (limit is approximately A2 size)
      output_error("Map too large")
    else:
      # Create map
      map = mapnik.Map(width, height)

      # Load map configuration
      mapnik.load_map(map, "/sql/mapnik-stylesheets/%s/osm-%s.xml" % (form.getvalue("maptype"), form.getvalue("locale")))

      # Zoom the map to the bounding box
      map.zoom_to_box(bbox)

      # Render the map
      if form.getvalue("format") == "png":
        image = mapnik.Image(map.width, map.height)
        mapnik.render(map, image)
        png = image.tostring("png")
        etag = md5.new(png)
        
        etagquotes = "\"%s\"" % etag.hexdigest()
        if os.environ.has_key('HTTP_IF_NONE_MATCH'):
          if (os.environ['HTTP_IF_NONE_MATCH'] == etagquotes):
            print "Status: 304 Not Modified"
            exit

        # Also make sure that the corresponding slippy map tiles exist
        # and are up to date The magic number of 2132 is taken from
        # http://lists.openstreetmap.org/pipermail/talk/2007-January/010349.html
        zoom = math.ceil(18 - math.log(map.scale_denominator()/2132.72958385,2))
        renderd_xmlname = form.getvalue('locale')
        expire_tiles(bbox_coords, zoom, renderd_xmlname)
        expire_tiles(bbox_coords, zoom - 1, renderd_xmlname)
        expire_tiles(bbox_coords, zoom + 1, renderd_xmlname)
                
        output_headers("image/png", len(png),etag.hexdigest())
        print png
      else:
        output_error("Unknown format '%s'" % form.getvalue("format"))
