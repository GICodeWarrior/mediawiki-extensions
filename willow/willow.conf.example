/*
 * @(#) $Id$
 *
 * This is an example configuration file.  You will need to modify it for
 * your installation.
 */

/*
 * As well as configuration, this file can contain the preprocessor directives
 * "%if", "%ifdef", "%ifndef", "%pragma" and "%include".
 *
 * %if allows a section of the file to be * dependant on a particular condition.
 * There are two built-in conditions: "true" (which is always true) and "false"
 * (which is always false).  You can add new true conditions by passing
 * -Dcond[=value] on the command line (value should be an integer; default is 1).
 *
 * The following operators are supported, with the same meaning as their C
 * counterparts: + - * / % ~ && || ! & | ^ << >> < > <= >= == != defined()
 *
 * Example:
 *
 *  %if (defined(testing_server) && !use_remote) || (force_localhost == 1)
 *    backend "localhost";
 *  %else
 *    backend "remote.host";
 *  %endif
 *
 * Also available are %ifdef and %ifndef.  These include the enclosed section
 * if the given condition is or isn't defined, respectively, no matter what its
 * value is.
 *
 * %include inserts the contents of an existing file at the point it's used.
 *
 * Example:
 *
 *  %include "backends.conf"
 *
 * %pragma sets options in the configuration parser.  Valid options are:
 *
 *   include_path    - add the argument to the search path used to locate
 *                     filenames used in %include.
 *
 * Example:
 *
 *  %pragma include_path "/etc/willow/conf.d"
 *
 */

/*
 * Any number of backends can be defined.  The name can be an IP
 * address or a hostname.  For hostnames, all addresses associated
 * with the interface will be added.
 */
backend "127.0.0.1" {
	/*
	 * port defaults to 80 if not specified.
	 */

	port = 8081;
};

/* A place to send requests for which no backend was found */
backend-group "failover";
backend "failover.mycompany.com" {
	group = "failover";
};

backend-group "primary" {
	/*
	 * lb-type can be "rr" (plain roundrobin), "carp" (use CARP
	 * algorithm) or "carp-host" (use CARP but only consider the
	 * request host, not the pathname).
	 */
	lb-type = carp;

	/*
	 * This group will always get requests for www[2].bar.com, no
	 * matter which listener received the request.
	 */
	hosts = "www.bar.com", "www2.bar.com";

	/*
	 * If all backends in the group are down, send requests to this
	 * group instead.
	 */
	failover-group = "failover";
};

backend "backends.mycompany.com" {
	/*
	 * You can also force a particular address family (v4 or v6) when
	 * using a hostname.
	 */
	aftype = ipv6;	/* only connect to IPv6 addresses */

	/*
	 * Put this backend into a specific group.  When a listener
	 * also has this group, requests to that listener will only
	 * go to backends in that group.
	 */
	group = "primary";
};

/*
 * Any number of listeners can be defined.  Hostnames are allowed,
 * the same as backend{}.
 */
listen "127.0.0.1" {
	port = 8080;
};

listen "10.0.0.2" {
	/*
	 * Send requests for this listener to the specified backend
	 * group.
	 */
	group = "backup";
};

/*
 * Controls global server parameters.
 */
server {
	/*
	 * Number of HTTP worker threads to start.  Something around
	 * ncpus+1 is probably a good value for this.
	 *
	threads = 2;

	/*
	 * The owner of this server.  Will be used in error messages.
	 */
	admin = "nobody@example.com";
};
	
/*
 * Controls global caching options.
 */
cache {
	/*
	 * How much memory to reserve for entity caching.  Once this
	 * much memory has been used, old objects will be removed from
	 * the cache to make room for new ones.
	 *
	 * Set to 0 to disable caching.
	 */
	cache-memory = 5MB;

	/*
	 * The largest object to cache.  An object larger than this
	 * will never be cached.  Set to 0 (the default) to cache
	 * objects of any size up to cache-memory.
	 */
	max-entity-size = 256KB;

	/*
	 * Listen for HTCP queries.  A list of IP[:port].  If %intf is
	 * present, this HTCP listener will join the specified multicast
	 * group.
	 */
	#htcp-listen = "127.0.0.1", "all-systems.mcast.net%bge0";

	/*
	 * Keys for HTCP authentication.  Use "whtcp -g" to generate this file.
	 * The keys should be considered confidential.
	 */
	#htcp-keys = "/etc/willow/htcp-keys";

	/*
	 * Refuse to reply to HTCP queries unless they're signed with a key
	 * we recognise.
	 */
	#htcp-sig-required = no;
};

/*
 * HTTP options.
 */
http {
	/*
	 * Compress data if the client indicates it supports deflate or
	 * gzip encoding.  Note that this has a large impact on raw
	 * throughput when serving cached documents.
	 *
	 * compress_level should be between 1 (fastest, worst compression)
	 * and 9 (slowest, best compression).  The default is 6.
	 */
        compress = yes;
	compress-level = 6;

	/*
	 * If a backend is not available, wait this amount of time before
	 * retrying it.
	 */
	backend-retry = 30 seconds;

	/*
	 * According to RFC2616, data marked as "private" should not be
	 * stored by a proxy cache which is shared by more than one user.
	 * If you want this cache to treat itself as private, and cache
	 * such data anyway, enable this.  Note that this means one user's
	 * private data may be served to other users, so don't enable this
	 * unless you're sure the backend application will never mark data
	 * which is actually private this way.
	 */
	cache-private = no;

	/*
	 * Certain versions of MSIE cannot properly handle HTTP/1.1 chunked
	 * encoding, and will crash when sent a chunked reply.  Enable this
	 * to detect MSIE and force fallback to HTTP 1.0.
	 */
	msie-http11-hack = yes;

	/*
	 * If an HTTP 1.0 request without a Host: header is received, it
	 * must normally be forwarded to the backend as HTTP 1.0, rather
	 * then being upgraded to HTTP 1.1.  This means that we can't
	 * take advantage of some 1.1 features.  If default-host is set,
	 * then these requests will be forwarded as 1.1 with this value as
	 * the Host: header.
	 */
	default-host = "localhost";

	/*
	 * These clients will be able to override the usual backend by
	 * sending a header of the form "X-Willow-Backend-Group: <name>"
	 * with their request.
	 */
	force-backend = "127.0.0.0/8";

	/*
	 * Enable HTTP keep-alive for backends or clients.  If enabled for
	 * backends, keepalive-max is the maximum number of backends to
	 * cache (0 = unlimited).  keepalive-max is per thread, e.g. if
	 * you have 5 threads and keepalive-max = 10, up to 50 backends
	 * will be cached.
	 */
	backend-keepalive = yes;
	client-keepalive = yes;
	keepalive-max = 0;

	/*
	 * Honour X-Willow-Follow-Redirect in backend replies.  If this
	 * enabled and a backend response with a 3xx status contains such
	 * a header, Willow will follow the redirect and deliver the
	 * referred-to document to the client.  Only max-redirects
	 * (default: 1, 0: unlimmited) redirects will be followed, to prevent
	 * infinite redirect loops.
	 */
	x-follow-redirect = true;
	max-redirects = 1;
};

log {
	/*
	 * Levels:
	 * 0 - debug (only if configured with --enable-debug)
	 * 1 - notice
	 * 2 - warning
	 * 3 - error
	 */
	level = 0;

	/*
	 * Log to a file on the filesystem.
	 */
	file = "/var/log/willow/willow.log";

	/*
	 * Log to system.
	 */
	syslog = yes;

	/*
	 * Facilities:
	 *
	 * user, mail, daemon, auth, lpr, news, uucp,
	 * cron, audit, local0 .. local7.
	 *
	 * If not specified, defaults to 'daemon'.
	 */
	facility = daemon;

	/*
	 * Log client requests.  Every 1/log-sample requests are logged.
	 *
	 * Note: this is quite slow; if you don't need this, you may find
	 * that disabling it or increasing the sample rate improves performance
	 * significantly.
	 */
	access-log = "/var/log/willow/access.log";
	log-sample = 2;

	/*
	 * Log client requests to a UDP socket.  Every 1/log-sample requests
	 * are logged.  This is much more efficient than a file-based access log.
	 *
	 * The wlogread binary (installed into <prefix>/bin) can read the UDP
	 * log and convert it into several formats.
	 */
	udp-log = yes;
	udp-port = 4445;
	udp-host = "127.0.0.1";
};

/*
 * Access control.
 *
 * access is a list of addresses that are granted or denied * permission to
 * use this proxy.  Denied networks will be sent an error page for any request.
 *
 * This is *not* an ACL; entries are not compared in order.  Rather, the best
 * match prefix for the client's address is used to decide whether they are
 * given access.
 *
 * There is no default-deny.  To deny access by default, add a deny entry for
 * all addresses (0.0.0.0/0 in IPv4 or ::0/0 in IPv6).
 *
 * If "apply-at = connect;" is set in an access block, clients matching a
 * deny rule in that block will be disconnected immediately, without waiting
 * for a request or sending any error message.  You can specify multiple
 * access blocks, with or without apply-at; they will be merged.
 */

access-v4 {
	/* allow localhost and the local network */
	allow = "127.0.0.1/32", "10.0.0.0/8";

	/* deny an evil network */
	deny = "1.2.3.0/24";

	/* allow everyone via IPv6 except localhost */
	allow = "::0/0";
	deny = "::1/128";
};

/*
 * Statistics.
 *
 * The server collects runtime statistics for use by the 'wgetstats' program.
 */
stats {
	enable = yes;

	/* Addresses to listen on */
	listen = "127.0.0.1";	/* port defaults to 4446 */;
	listen = "[::1]:4447";

	/* How often to re-calculate averages (default: 300) */
	interval = 30;

	/*
	 * Only allow stats requests from certain networks.  If you specify
	 * either any IPv4 or IPv6 entries, *both* will be set to default-deny.
	 */
	allow = "127.0.0.0/8";
	allow = "::0/0";
};
