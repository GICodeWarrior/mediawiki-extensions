# @(#) $Header$

AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(willow, [1.0.0])

AC_LANG_C
AC_PROG_CC

AC_ARG_ENABLE(epoll, AC_HELP_STRING([--enable-epoll],[Force epoll(4) use (Linux only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="epoll"
	else
		use_epoll=no
	fi
])

AC_ARG_ENABLE(kqueue, AC_HELP_STRING([--enable-kqueue],[Force kqueue(2) use (FreeBSD only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="kqueue"
	else
		use_kqueue=no
	fi
])

AC_ARG_ENABLE(devpoll, AC_HELP_STRING([--enable-devpoll],[Force /dev/poll use (Solaris only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="devpoll"
	else
		use_devpoll=no
	fi
])

AC_ARG_ENABLE(ports, AC_HELP_STRING([--enable-ports],[Force ports use (Solaris 10+ only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="ports"
	else
		use_ports=no
	fi
])

AC_ARG_ENABLE(poll, AC_HELP_STRING([--enable-poll],[Force poll() use]),
[	if test $enableval = yes; then
		FORCE_SELECT="poll"
	else
		use_poll=no
	fi
])

AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, inet_addr)
AC_CHECK_HEADERS([port.h poll.h sys/poll.h sys/epoll.h])
AC_CHECK_FUNC(port_create, [have_ports=yes], [have_ports=no])
AC_CHECK_FUNC(epoll_wait, [have_epoll=yes], [have_epoll=no])
AC_CHECK_FUNC(poll, [have_poll=yes], [have_poll=no])
AC_CHECK_FUNC(kqueue, [have_kqueue=yes], [have_kqueue=no])
AC_CHECK_HEADER([sys/devpoll.h], [have_devpoll=yes], [have_devpoll=no])

if test x$have_epoll = xyes; then
	AC_MSG_CHECKING(for epoll support in kernel)
	AC_TRY_RUN([
#include <sys/epoll.h>
#include <stdlib.h>
int main() {
	if (epoll_create(256) == -1)
		exit 1;
	else
		exit 0;
}], [	AC_MSG_RESULT(yes)
	epoll_in_kernel=yes],
[	AC_MSG_RESULT(no)
	epoll_in_kernel=no])
fi

SELECTTYPE=none
if test x$use_poll != xno -a x$have_poll = xyes; then
	SELECTTYPE=poll
fi
if test x$use_epoll != xno -a x$have_epoll = xyes -a x$epoll_in_kernel = xyes; then
	SELECTTYPE=epoll
fi
if test x$use_devpoll != xno -a x$have_devpoll = xyes; then
	SELECTTYPE=devpoll
fi
if test x$use_ports != xno -a x$have_ports = xyes; then
	SELECTTYPE=ports
fi
if test x$use_kqueue != xno -a x$have_kqueue = xyes; then
	SELECTTYPE=kqueue
fi
if ! test -z $FORCE_SELECT; then
	SELECTTYPE=$FORCE_SELECT
fi
if test $SELECTTYPE = none; then
	AC_MSG_ERROR([Couldn't find a suitable I/O system for your platform.])
fi

if test $SELECTTYPE = poll; then
	AC_DEFINE([USE_POLL],[],[Define this to use poll() for select])
fi
if test $SELECTTYPE = devpoll; then
	AC_DEFINE([USE_DEVPOLL],[],[Define this to use /dev/poll for select])
fi
if test $SELECTTYPE = ports; then
	AC_DEFINE([USE_PORTS],[],[Define this to use ports for select])
fi
if test $SELECTTYPE = epoll; then
	AC_DEFINE([USE_EPOLL],[],[Define this to use epoll for select])
fi
if test $SELECTTYPE = kqueue; then
	AC_DEFINE([USE_KQUEUE],[],[Define this to use kqueue() for select])
fi

AC_SUBST(SELECTTYPE)
datadir="${datadir}/willow"

AC_OUTPUT(Makefile src/Makefile)

if test x$epoll_in_kernel = xno; then
	echo "Warning: epoll support was detected in libc, but not in the kernel."
	echo "epoll support will be disabled.  If you wish to force the use of epoll"
	echo "anyway, reconfigure with --enable-epoll."
fi

echo ""
echo "Using I/O system      : $SELECTTYPE"

