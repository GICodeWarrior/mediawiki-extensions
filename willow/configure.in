# @(#) $Header$

AC_INIT(configure.in)

USER_CFLAGS="$CFLAGS"

# autoconf brokenness
if test -z "$CC"; then
	CC=cc
fi

gcc_common="-W -Wall -Wno-unused"
debug_cflags_gcc="$gcc_common -Werror -O0 -g"
prod_cflags_gcc="$gcc_common -O3"
sunpro_common="-errshort=tags -errtags -mc"
debug_cflags_sunpro="-g $sunpro_common -v -xs"
prod_cflags_sunpro="-fast $sunpro_common -xdepend=yes -xipo=2 -xalias_level=std"

AC_CONFIG_HEADER(config.h)
VERSION=1.0-cvs
AC_DEFINE([PACKAGE_VERSION], $VERSION, [Version number of program])
AC_SUBST(VERSION)

echo ""
echo "examining environment..."
AC_LANG_C
AC_PROG_CC

if test x${ac_compiler_gnu+no} = xyes; then
	debug_cflags=$debug_cflags_gcc
	prod_cflags=$prod_cflags_gcc
fi

AC_MSG_CHECKING(whether we are using the SunPro C compiler)
if $CC -V 2>&1 | grep "Sun C" >/dev/null; then
	AC_MSG_RESULT(yes)
	debug_cflags=$debug_cflags_sunpro
	prod_cflags=$prod_cflags_sunpro
fi

mycflags=$prod_cflags
AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug],[Compile with debug support]),
[	if test $enableval = yes; then
		AC_DEFINE([WILLOW_DEBUG], [], [Compile with debug support])
		mycflags=$debug_cflags
	fi
])

if test -z "$USER_CFLAGS"; then
	USE_CFLAGS=$mycflags
else
	USE_CFLAGS=$USER_CFLAGS
fi

echo "using CFLAGS: $USE_CFLAGS"

AC_PROG_INSTALL
AC_MAKE_INCLUDE
AC_PATH_PROG([YACC], [yacc],none)
if test x$YACC = xnone; then
	AC_MSG_ERROR([you don't have yacc])
fi

AC_PATH_PROG([LEX], [lex],none)
if test x$LEX = xnone; then
	AC_MSG_ERROR([you don't have lex])
fi

dependstyle=null

AC_CHECK_PROG(have_makedepend, makedepend, yes, no)
if test x$have_makedepend = xyes; then
	dependstyle=makedepend
fi

AC_MSG_CHECKING(if $CC supports -xM1)
cat >conftest.c <<eof
#include "conftest.h"
eof
touch conftest.h

if $CC -xM1 conftest.c >/dev/null 2>&1; then
	AC_MSG_RESULT(yes)
	dependstyle=dashM
	dashMflag=-xM1
	AC_SUBST(dashMflag)
else
	AC_MSG_RESULT(no)
fi

rm -f conftest.c conftest.h

AC_MSG_CHECKING(if $CC supports -MM)
cat >conftest.c <<eof
#include "conftest.h"
eof
touch conftest.h

if $CC -MM conftest.c >/dev/null 2>&1; then
	AC_MSG_RESULT(yes)
	dependstyle=dashM
	dashMflag=-MM
	AC_SUBST(dashMflag)
else
	AC_MSG_RESULT(no)
fi

rm -f conftest.c conftest.h

AC_SUBST(dependstyle)

threadflag=no
AC_MSG_CHECKING(if $CC supports -pthread)
cat >conftest.c <<eof
int main() { return 0; }
eof
if $CC -pthread conftest.c -o conftest >/dev/null 2>&1; then
	if ! $CC -pthread conftest.c -o conftest 2>&1 | grep unrecognized >/dev/null; then
		AC_MSG_RESULT(yes)
		THRCFLAGS="-pthread"
		threadflag=yes
	else
		AC_MSG_RESULT(no)
	fi
else
	AC_MSG_RESULT(no)
fi
rm -f conftest.c conftest

AC_MSG_CHECKING(if $CC supports -mt)
cat >conftest.c <<eof
int main() { return 0; }
eof	
if $CC -mt conftest.c -o conftest >/dev/null 2>&1; then
	AC_MSG_RESULT(yes)
	THRCFLAGS="-mt"
	threadflag=yes
else
	AC_MSG_RESULT(no)
fi
rm -f conftest.c conftest

if test x$threadflag = xno; then
	THRCPPFLAGS="-D_REENTRANT"
	THRLDFLAGS="$LDFLAGS -lpthread"
fi

echo ""
echo "looking for required C functions..."
AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(inet_addr, nsl)
AC_SEARCH_LIBS(log10, m)
AC_SEARCH_LIBS(sendfile, sendfile)
AC_CHECK_FUNC(strlcat,AC_DEFINE([HAVE_STRLCAT],,[Define this if you have strlcat()]),[AC_LIBOBJ(strlcat)])
AC_CHECK_FUNC(strlcpy,AC_DEFINE([HAVE_STRLCPY],,[Define this if you have strlcpy()]),[AC_LIBOBJ(strlcpy)])
AC_CHECK_FUNC(sendfilev,AC_DEFINE([HAVE_SENDFILE],,[Define this if you have sendfile()]))
AC_CHECK_FUNC(daemon,AC_DEFINE([HAVE_DAEMON],,[Define this if you have daemon()]),[AC_LIBOBJ(daemon)])
AC_CHECK_FUNC(setproctitle,AC_DEFINE([HAVE_SETPROCTITLE],,[Define this if you have setproctitle()]))
AC_CHECK_TYPE(socklen_t, AC_DEFINE([HAVE_SOCKLEN_T],,[Define this if you have socklen_t]),,[#include <sys/socket.h>])
AC_CHECK_HEADER(db.h, [], [
	AC_MSG_ERROR([cannot not find required Berkeley DB headers.])])
AC_CHECK_LIB(db-4.3, db_env_create, [], [
AC_CHECK_LIB(db, db_env_create, [], [
	AC_MSG_ERROR([cannot not find required libdb-4.3 or libdb.])])])
AC_CHECK_HEADER([sys/queue.h],AC_DEFINE([HAVE_SYS_QUEUE_H],,[Define this if you have <sys/queue.h]))
AC_CHECK_HEADER([sys/sendfile.h],AC_DEFINE([HAVE_SYS_SENDFILE_H],,[Define this if you have <sys/sendfile.h>]))
AC_MSG_CHECKING(for transaction support in libdb)
AC_COMPILE_IFELSE([
#include <db.h>
int main() {
	DB_ENV *env;
	DB_TXN *txn;
	env->txn_begin(env, NULL, &txn, 0);
}],AC_MSG_RESULT(yes),AC_MSG_ERROR([your db library is too old or doesn't support transactions]))

echo ""
echo "examining supported I/O systems..."
AC_ARG_ENABLE(epoll, AC_HELP_STRING([--enable-epoll],[Force epoll(4) use (Linux only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="epoll"
	else
		use_epoll=no
	fi
])

AC_ARG_ENABLE(kqueue, AC_HELP_STRING([--enable-kqueue],[Force kqueue(2) use (FreeBSD only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="kqueue"
	else
		use_kqueue=no
	fi
])

AC_ARG_ENABLE(devpoll, AC_HELP_STRING([--enable-devpoll],[Force /dev/poll use (Solaris only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="devpoll"
	else
		use_devpoll=no
	fi
])

AC_ARG_ENABLE(ports, AC_HELP_STRING([--enable-ports],[Force ports use (Solaris 10+ only)]),
[	if test $enableval = yes; then
		FORCE_SELECT="ports"
	else
		use_ports=no
	fi
])

AC_ARG_ENABLE(poll, AC_HELP_STRING([--enable-poll],[Force poll() use]),
[	if test $enableval = yes; then
		FORCE_SELECT="poll"
	else
		use_poll=no
	fi
])

AC_ARG_ENABLE(debug-alloc, AC_HELP_STRING([--enable-debug-alloc],[Compile with debugging memory allocator]),
[	if test $enableval = yes; then
		AC_DEFINE([WDEBUG_ALLOC], [], [Compile with debugging allocator])
	fi
])

use_threads=no
AC_ARG_ENABLE(threaded-io, AC_HELP_STRING([--enable-threaded-io],[Use threads for I/O operations]),
[	if test $enableval = yes; then
		use_threads=yes
	fi
])

if test x$use_threads = xyes; then
	AC_DEFINE([THREADED_IO], [], [Use threads for I/O operations])
	CPPFLAGS="$CPPFLAGS $THRCPPFLAGS"
	CFLAGS="$CFLAGS $THRCFLAGS"
	LDFLAGS="$LDFLAGS $THRLDFLAGS"
fi

AC_CHECK_HEADERS([port.h poll.h sys/poll.h sys/epoll.h])
AC_CHECK_FUNC(port_create, [have_ports=yes], [have_ports=no])
AC_CHECK_FUNC(epoll_wait, [have_epoll=yes], [have_epoll=no])
AC_CHECK_FUNC(poll, [have_poll=yes], [have_poll=no])
AC_CHECK_FUNC(kqueue, [have_kqueue=yes], [have_kqueue=no])
AC_CHECK_HEADER([sys/devpoll.h], [have_devpoll=yes], [have_devpoll=no])

if test x$have_epoll = xyes; then
	AC_MSG_CHECKING(for epoll support in kernel)
	AC_TRY_RUN([
#include <sys/epoll.h>
#include <stdlib.h>
int main() {
	if (epoll_create(256) == -1)
		exit(1);
	else
		exit(0);
}], [	AC_MSG_RESULT(yes)
	epoll_in_kernel=yes],
[	AC_MSG_RESULT(no)
	epoll_in_kernel=no])
fi

SELECTTYPE=none
if test x$use_poll != xno -a x$have_poll = xyes; then
	SELECTTYPE=poll
fi
if test x$use_epoll != xno -a x$have_epoll = xyes -a x$epoll_in_kernel = xyes; then
	SELECTTYPE=epoll
fi
if test x$use_devpoll != xno -a x$have_devpoll = xyes; then
	SELECTTYPE=devpoll
fi
if test x$use_ports != xno -a x$have_ports = xyes; then
	SELECTTYPE=ports
fi
if test x$use_kqueue != xno -a x$have_kqueue = xyes; then
	SELECTTYPE=kqueue
fi
if ! test -z "$FORCE_SELECT"; then
	SELECTTYPE=$FORCE_SELECT
fi
if test $SELECTTYPE = none; then
	AC_MSG_ERROR([Couldn't find a suitable I/O system for your platform.])
fi

if test $SELECTTYPE = poll; then
	AC_DEFINE([USE_POLL],[],[Define this to use poll() for select])
fi
if test $SELECTTYPE = devpoll; then
	AC_DEFINE([USE_DEVPOLL],[],[Define this to use /dev/poll for select])
fi
if test $SELECTTYPE = ports; then
	AC_DEFINE([USE_PORTS],[],[Define this to use ports for select])
fi
if test $SELECTTYPE = epoll; then
	AC_DEFINE([USE_EPOLL],[],[Define this to use epoll for select])
fi
if test $SELECTTYPE = kqueue; then
	AC_DEFINE([USE_KQUEUE],[],[Define this to use kqueue() for select])
fi

if test x$SELECTTYPE != xports -a x$use_threads = xyes; then
	AC_MSG_ERROR(threaded I/O may only be used with --enable-ports)
fi

AC_SUBST(SELECTTYPE)

datadir="${datadir}/willow"
CFLAGS="$USE_CFLAGS"

AC_OUTPUT(
	mk/prog.mk 
	mk/lib.mk
	mk/vars.mk 
	mk/rules.mk 
	mk/data.mk 
	mk/subdir.mk
	mk/depend.dashM.mk 
	mk/depend.makedepend.mk 
	mk/depend.null.mk
	mk/Makefile
	Makefile 
	src/Makefile 
	src/bin/Makefile
	src/bin/willow/Makefile
	src/lib/Makefile
	src/lib/wnet/Makefile
	src/lib/wlog/Makefile
	errors/Makefile)

if test x$epoll_in_kernel = xno; then
	echo "Warning: epoll support was detected in libc, but not in the kernel."
	echo "epoll support will be disabled.  If you wish to force the use of epoll"
	echo "anyway, reconfigure with --enable-epoll."
fi

echo ""
echo "Using I/O system      : $SELECTTYPE"
echo "Threaded I/O          : $use_threads"
