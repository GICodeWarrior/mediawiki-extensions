<?php

/**
 * This special page for Semantic MediaWiki implements a customisable form for
 * executing queries outside of articles.
 *
 * @file SMW_SpecialQueryCreator.php
 * @ingroup SMWSpecialPage
 * @ingroup SpecialPage
 *
 * @author Markus KrÃ¶tzsch
 * @author Jeroen De Dauw
 * @author Sergey Chernyshev
 * @author Devayon Das
 */
class SMWQueryCreatorPage extends SMWQueryUI {

	protected $m_params = array();

	/**
	 * Constructor.
	 */
	public function __construct() {
		parent::__construct( 'QueryCreator' );
		smwfLoadExtensionMessages( 'SemanticMediaWiki' );
	}

	/**
	 * The main entrypoint. Call the various methods of SMWQueryUI and
	 * SMWQueryUIHelper to build ui elements and to process them.
	 *
	 * @global OutputPage $wgOut
	 * @param string $p
	 */
	protected function makePage( $p ) {
		global $wgOut;
		$html_output = $this->makeResults( $p );
		if ( $this->uiCore->getQueryString() != "" ) {
			if ( $this->usesNavigationBar() ) {
				$html_output .= Html::rawElement( 'div', array( 'class' => 'smwqcnavbar' ),
									$this->getNavigationBar ( $this->uiCore->getLimit(), $this->uiCore->getOffset(), $this->uiCore->hasFurtherResults() )
								); // ? can we preload offset and limit?
			}

			$html_output .= Html::rawElement( 'div', array( 'class' => 'smw-qc-result' ), $this->uiCore->getHTMLResult() );

			if ( $this->usesNavigationBar() ) {
				$html_output .= Html::rawElement( 'div', array( 'class' => 'smwqcnavbar' ),
									$this->getNavigationBar ( $this->uiCore->getLimit(), $this->uiCore->getOffset(), $this->uiCore->hasFurtherResults() )
								); // ? can we preload offset and limit?
			}
		}
		$wgOut->addHTML( $html_output );
	}

	/**
	 * Displays a form section showing the options for a given format,
	 * based on the getParameters() value for that format's query printer.
	 *
	 * @param string $format
	 * @param array $paramValues The current values for the parameters (name => value)
	 * @param array $ignoredAttribs Attributes which should not be generated by this method.
	 *
	 * @return string
	 *
	 * Overridden from parent to ignore GUI parameters 'format' 'limit' and 'offset'
	 */
	protected function showFormatOptions( $format, array $paramValues, array $ignoredAttribs = array() ) {
		return parent::showFormatOptions( $format, $paramValues, array( 'format', 'limit', 'offset', 'mainlabel' ) );
	}
	/**
	 * Creates the input form
	 *
	 * @global OutputPage $wgOut
	 * @return string
	 */
	protected function makeResults() {
		global $wgOut;
		$result = "";
		$spec_title = $this->getTitle();
		$format_box = $this->getFormatSelectBoxSep( 'broadtable' );
		$result .= '<form name="ask" action="' . $spec_title->escapeLocalURL() . '" method="get">' . "\n" .
			'<input type="hidden" name="title" value="' . $spec_title->getPrefixedText() . '"/>';
		$result .= '<br>';
		$result .= wfMsg( 'smw_qc_query_help' );
		// Main query and format options
		$result .= '<table style="width: 100%; ">' .
					'<tr><th>' . wfMsg( 'smw_ask_queryhead' ) . "</th>\n<th>" . wfMsg( 'smw_ask_format_as' ) . "</th></tr>" .
					'<tr>' .
						'<td style="width: 70%; padding-right: 7px;">' . $this->getQueryFormBox() . "</td>\n" .
						'<td style="padding-right: 7px; text-align:center;">' . $format_box[0] . '</td>' .
					'</tr>' .
					"</table>\n";
		// sorting and prinouts
		$result .= '<div class="smw-qc-sortbox" style="padding-left:10px;">' . $this->getPoSortFormBox() . '</div>';
		// show|hide additional options and querying help
		$result .= '<br><span id="show_additional_options" style="display:inline;"><a href="#addtional" rel="nofollow" onclick="' .
			 "document.getElementById('additional_options').style.display='block';" .
			 "document.getElementById('show_additional_options').style.display='none';" .
			 "document.getElementById('hide_additional_options').style.display='inline';" . '">' .
			 wfMsg( 'smw_qc_show_addnal_opts' ) . '</a></span>';
		$result .= '<span id="hide_additional_options" style="display:none"><a href="#" rel="nofollow" onclick="' .
			 "document.getElementById('additional_options').style.display='none';" .
			 "document.getElementById('hide_additional_options').style.display='none';" .
			 "document.getElementById('show_additional_options').style.display='inline';" . '">' .
			 wfMsg( 'smw_qc_hide_addnal_opts' ) . '</a></span>';
		$result .= ' | <a href="' . htmlspecialchars( wfMsg( 'smw_ask_doculink' ) ) . '">' . wfMsg( 'smw_ask_help' ) . '</a>';
		// additional options
		$result .= '<div id="additional_options" style="display:none">';

		$result .= $format_box[1]; // display the format options

		if ( $this->uiCore->getQueryString() != '' ) // hide #ask if there isnt any query defined
			$result .= $this->getAskEmbedBox();

		$result .= '</div>'; // end of hidden additional options
		$result .= '<br /><input type="submit" value="' . wfMsg( 'smw_ask_submit' ) . '"/>' .
			'<input type="hidden" name="eq" value="no"/>' .
			"\n</form><br/>";

	return $result;

	}

	/**
	 * Decodes printouts and sorting - related form options generated by its
	 * complement, getPoSortFormBox(). UIs may overload both to change form
	 * parameters.
	 *
	 * Overrides method from SMWQueryUI (modal window added)
	 *
	 * @global boolean $smwgQSortingSupport
	 * @global Language $wgContLang
	 * @param WebRequest $wgRequest
	 * @return string
	 */
	protected function processPoSortFormBox( WebRequest $wgRequest ) {
		global $smwgQSortingSupport, $wgContLang;
		if ( !$smwgQSortingSupport ) return array();

		$params = array();
		$order_values = $wgRequest->getArray( 'order' );
		$property_values = $wgRequest->getArray( 'property' );
		$category_values = $wgRequest->getArray( 'category' );
		$category_label_values = $wgRequest->getArray( 'cat_label' );
		$main_column_labels = $wgRequest->getArray( 'maincol_label' );
		$po = array();
		$category_namespace = $wgContLang->getNsText( NS_CATEGORY );
		if ( is_array( $main_column_labels ) ) {
			foreach ( $main_column_labels as $key => $label ) {
				if ( $label == '' ) {
					$po[$key] = "?";
				} else {
					$po[$key] = "? = $label";
				}

			}
		}
		if ( is_array( $category_values ) ) {
			foreach ( $category_values as $key => $value ) {
				if ( trim( $value ) == '' ) {
					$po[$key] = "?$category_namespace" ;
				} else {
					$po[$key] = "?$category_namespace:$value";
				}
			}
		}
		if ( is_array( $category_label_values ) ) {
			foreach ( $category_label_values as $key => $value ) {
				if ( trim( $value ) != '' ) {
				 $po[$key] .= ' = ' . $value;
				}
			}
		}
		if ( is_array( $property_values ) ) {
			$params['sort'] = '';
			$params['order'] = '';
			foreach ( $property_values as $key => $property_value ) {
				$property_values[$key] = trim( $property_value );
				if ( $property_value == '' ) {
					unset( $property_values[$key] );
				}
				if ( is_array( $order_values ) and array_key_exists( $key, $order_values ) and $order_values[$key] != 'NONE' ) {
					$prop = substr( $property_values[$key], 1 ); // removing the leading '?'
					if ( !strpos( $prop, '#' ) === false ) $prop = strstr( $prop, '#', true ); // removing format options
					if ( !strpos( $prop, '=' ) === false ) $prop = strstr( $prop, '=', true ); // removing format options

					$params['sort'] .= ( $params['sort'] != '' ? ',':'' ) . $prop;
					$params['order'] .= ( $params['order'] != '' ? ',':'' ) . $order_values[$key];
				}
			}
			if ( $params['sort'] == '' ) {
				unset ( $params['sort'] );
			}
			if ( $params['order'] == '' ) {
				unset ( $params['order'] );
			}
			$display_values = $wgRequest->getArray( 'display' );
			if ( is_array( $display_values ) ) {
				foreach ( $display_values as $key => $value ) {
					if ( $value == '1' and array_key_exists( $key, $property_values ) ) {
					$property_values[$key] = trim( $property_values[$key] );
					$property_values[$key] = ( $property_values[$key][0] == '?' ) ? $property_values[$key]:'?' . $property_values[$key];
						$po[$key] = $property_values[$key];
					}
				}
			}
		}
		ksort( $po );
		$params = array_merge( $params, $po );
		return $params;

	}

	/**
	 * Generates the forms elements(s) for choosing printouts and sorting
	 * options. Use its complement processPoSortFormBox() to decode data
	 * sent by these elements.
	 *
	 * Overrides method from SMWQueryUI (modal window added)
	 *
	 * @return string
	 */
	protected function getPoSortFormBox( $enableAutocomplete = SMWQueryUI::ENABLE_AUTO_SUGGEST ) {
		global $smwgQSortingSupport, $wgRequest, $wgOut, $smwgScriptPath;

		if ( !$smwgQSortingSupport ) return '';
		$this->enableJQueryUI();
		$wgOut->addScriptFile( "$smwgScriptPath/libs/jquery-ui/jquery-ui.dialog.min.js" );
		$wgOut->addStyle( "$smwgScriptPath/skins/SMW_custom.css" );

		$result = '';
		$num_sort_values = 0;
		// START: create form elements already submitted earlier via form
		// attempting to load parameters from $wgRequest
		$property_values = $wgRequest->getArray( 'property' );
		$order_values = $wgRequest->getArray( 'order' );
		$display_values = $wgRequest->getArray( 'display' );
		$category_values = $wgRequest->getArray( 'category' );
		$category_label_values = $wgRequest->getArray( 'cat_label' );
		$main_column_labels = $wgRequest->getArray( 'maincol_label' );

		if ( is_array( $property_values ) or is_array( $category_values ) or is_array( $main_column_labels ) ) {
			/*
			 * Printouts were set via this Ui
			 */
			if ( is_array( $property_values ) ) {
				// remove empty property values
				foreach ( $property_values as $key => $property_value ) {
					$property_values[$key] = trim( $property_value );
					if ( $property_value == '' ) {
						unset( $property_values[$key] );
					}
				}
			}
		} else {
			/*
			 * Printouts and sorting were set via another widget/form/source, so
			 * create elements by fetching data from $uiCore. The exact ordering
			 * of Ui elements might not be preserved, if the above block were to
			 * be removed. This  is a bit of a hack, converting all strings to
			 * lowercase to simplify searching procedure and using in_array.
			 */

			$po = explode( '?', $this->getPOStrings() );
			reset( $po );
			foreach ( $po as $key => $value ) {
			 $po[$key] = strtolower( trim( $value ) );
			  if ( $po[$key] == '' ) {
				  unset ( $po[$key] );
			  }
			}

			$params = $this->uiCore->getParameters();
			if ( array_key_exists( 'sort', $params ) && array_key_exists( 'order', $params ) ) {
				$property_values = explode( ',', strtolower( $params['sort'] ) );
				$order_values = explode( ',', $params['order'] );
				reset( $property_values );
				reset( $order_values );
			} else {
				$order_values = array(); // do not even show one sort input here
				$property_values = array();
			}
			foreach ( $po as $po_value ) {
				 if ( !in_array( $po_value, $property_values ) ) {
					 $property_values[] = $po_value;
				 }
			}
			$display_values = array();
			reset( $property_values );
			foreach ( $property_values as $property_key => $property_value ) {
				if ( in_array( $property_value, $po ) ) {
					$display_values[$property_key] = "yes";
				}
			}
		}
		$i = 0;
		$additional_POs = array();
		if ( is_array( $property_values ) ) {
			$keys = array_keys( $property_values );
			foreach ( $keys as $value ) {
				$additional_POs[$value] = $property_values[$value]; // array_merge won't work because numeric keys need to be preserved
			}
		}
		if ( is_array( $category_values ) ) {// same as testing $category_label_values
			$keys = array_keys( $category_values );
			foreach ( $keys as $value ) {
				$additional_POs[$value] = $category_values[$value]; // array_merge won't work because numeric keys need to be preserved
			}
		}
		if ( is_array( $main_column_labels ) ) {
			$keys = array_keys( $main_column_labels );
			foreach ( $keys as $value ) {
				$additional_POs[$value] = $main_column_labels[$value]; // array_merge won't work because numeric keys need to be preserved
			}
		}
		ksort( $additional_POs );
		foreach ( $additional_POs as $key => $value ) {
			if ( is_array( $property_values ) and array_key_exists( $key, $property_values ) ) {
				/*
				 * Make an element for additional properties
				 */
				$result .= Html::openElement( 'div', array( 'id' => "sort_div_$i", 'class' => 'smwsort' ) );
				$result .= '<span class="smw-remove"><a href="javascript:removePOInstance(\'sort_div_' . $i . '\')"><img src="' . $smwgScriptPath . '/skins/images/close-button.png" alt="' . wfMsg( 'smw_qui_delete' ) . '"></a></span>';
				$result .= wfMsg( 'smw_qui_property' );
				$result .= Html::input( 'property[' . $i . ']', $property_values[$key], 'text', array( 'size' => '35', 'id' => "property$i" ) ) . "\n";
				$result .= Html::openElement( 'select', array( 'name' => "order[$i]" ) );

				$if1 = ( !is_array( $order_values ) or !array_key_exists( $key, $order_values ) or $order_values[$key] == 'NONE' );
				$result .= Xml::option( wfMsg( 'smw_qui_nosort' ), "NONE", $if1 );

				$if2 = ( is_array( $order_values ) and array_key_exists( $key, $order_values ) and $order_values[$key] == 'ASC' );
				$result .= Xml::option( wfMsg( 'smw_qui_ascorder' ), "ASC", $if2 );

				$if3 = ( is_array( $order_values ) and array_key_exists( $key, $order_values ) and $order_values[$key] == 'DESC' );
				$result .= Xml::option( wfMsg( 'smw_qui_descorder' ), "DESC", $if3 );

				$result .= Xml::closeElement( 'select' );

				$if4 = ( is_array( $display_values ) and array_key_exists( $key, $display_values ) );
				$result .= Xml::checkLabel( wfMsg( 'smw_qui_shownresults' ), "display[$i]", "display$i", $if4 );
				$result .= ' <a  id="more' . $i . '" "class="smwq-more" href="javascript:smw_makePropDialog(\'' . $i . '\')"> ' . WfMsg( 'smw_qui_options' ) . ' </a> ';

				$result .= Xml::closeElement( 'div' );
				$i++;
			}
			if ( is_array( $category_values ) and array_key_exists( $key, $category_values ) ) {
				/*
				 * Make an element for additional categories
				 */
				$result .= Html::openElement( 'div', array( 'id' => "sort_div_$i", 'class' => 'smwsort' ) );
				$result .= '<span class="smw-remove"><a href="javascript:removePOInstance(\'sort_div_' . $i . '\')"><img src="' . $smwgScriptPath . '/skins/images/close-button.png" alt="' . wfMsg( 'smw_qui_delete' ) . '"></a></span>' .
							wfMsg( 'smw_qui_category' ) .
							Xml::input( "category[$i]", '20', $category_values[$key], array( 'id' => "category$i" ) ) . " " .
							wfMsg( 'smw_qui_label' ) .
							Xml::input( "cat_label[$i]", '20', array_key_exists( $key, $category_label_values ) ? $category_label_values[$key]:false, array( 'id' => "cat_label$i" ) ) . " " .
							' <a  id="more' . $i . '" "class="smwq-more" href="javascript:smw_makeCatDialog(\'' . $i . '\')"> ' . WfMsg( 'smw_qui_options' ) . ' </a> ' .
							Xml::closeElement( 'div' );
				$i++;
			}
			if ( is_array( $main_column_labels ) and array_key_exists( $key, $main_column_labels ) ) {
				/*
				 * Make an element for main column
				 */
				$result .= Html::openElement( 'div', array( 'id' => "sort_div_$i", 'class' => 'smwsort' ) ) .
					'<span class="smw-remove"><a href="javascript:removePOInstance(\'sort_div_' . $i . '\')"><img src="' . $smwgScriptPath . '/skins/images/close-button.png" alt="' . wfMsg( 'smw_qui_delete' ) . '"></a></span>' .
					wfMsg( 'smw_qui_rescol' ) .
					Xml::input( "maincol_label[$i]", '20', $main_column_labels[$key], array ( 'id' => "maincol_label$i" ) ) . " " .
					Xml::closeElement( 'div' );
				$i++;
			}
		}
		$num_sort_values = $i;
		// END: create form elements already submitted earlier via form

		// create hidden form elements to be cloned later
		$hidden_property = Html::openElement( 'div', array( 'id' => 'property_starter', 'class' => 'smwsort', 'style' => 'display:none' ) ) .
					'<span class="smw-remove"><a><img src="' . $smwgScriptPath . '/skins/images/close-button.png" alt="' . wfMsg( 'smw_qui_delete' ) . '"></a></span>' .
					wfMsg( 'smw_qui_property' ) .
					Xml::input( "property_num", '35' ) . " " .
					Html::openElement( 'select', array( 'name' => 'order_num' ) ) .
						Xml::option( wfMsg( 'smw_qui_nosort' ), 'NONE' ) .
						Xml::option( wfMsg( 'smw_qui_ascorder' ), 'ASC' ) .
						Xml::option( wfMsg( 'smw_qui_descorder' ), 'DESC' ) .
					Xml::closeElement( 'select' ) .
					Xml::checkLabel( wfMsg( 'smw_qui_shownresults' ), "display_num", '', true ) .
					Xml::closeElement( 'div' );
		$hidden_property = json_encode( $hidden_property );

		$hidden_category = Html::openElement( 'div', array( 'id' => 'category_starter', 'class' => 'smwsort', 'style' => 'display:none' ) ) .
					'<span class="smw-remove"><a><img src="' . $smwgScriptPath . '/skins/images/close-button.png" alt="' . wfMsg( 'smw_qui_delete' ) . '"></a></span>' .
					wfMsg( 'smw_qui_category' ) .
					Xml::input( "category_num", '20' ) . " " .
					wfMsg( 'smw_qui_label' ) .
					Xml::input( "cat_label_num", '20' ) . " " .
					Xml::closeElement( 'div' );
		$hidden_category = json_encode( $hidden_category );

		$hidden_main_column = Html::openElement( 'div', array( 'id' => 'maincol_starter', 'class' => 'smwsort', 'style' => 'display:none' ) ) .
					'<span class="smw-remove"><a><img src="' . $smwgScriptPath . '/skins/images/close-button.png" alt="' . wfMsg( 'smw_qui_delete' ) . '"></a></span>' .
					wfMsg( 'smw_qui_rescol' ) .
					Xml::input( "maincol_label_num", '20' ) . " " .
					Xml::closeElement( 'div' );
		$hidden_main_column = json_encode( $hidden_main_column );

		$property_dialog_box = Xml::openElement( 'div', array( 'id' => 'prop-dialog', 'title' => wfMsg( 'smw_prp_options' ), 'class' => 'smwpropdialog' ) ) .
					Xml::inputLabel( 'Property:', '', 'd-property', 'd-property' ) . '<br/>' . // todo i18n
					Xml::inputLabel( 'Label:', '', 'd-property-label', 'd-property-label' ) . '<br/>' . // todo i18n
					'<label for="d-format">Format:</label> ' . Html::openElement( 'select', array( 'name' => 'd-format', 'id' => 'd-format' ) ) . // todo i18n
						Xml::option( 'None (default)', ' ' ) . // todo i18n
						Xml::option( 'Simple', '#-' ) . // todo i18n
					Xml::closeElement( 'select' ) .
					Xml::input( 'format-custom', false, false, array( 'id' => 'd-property-format-custom' ) ) . '<br/>' .
					// Xml::inputLabel( 'Limit:', 'd-property-limit', 'd-property-limit' ) . '<br/>' . // todo i18n
					'<input type="hidden" name="d-property-code" id="d-property-code">' .
					Xml::closeElement( 'div' );
		$category_dialog_box = Xml::openElement( 'div', array( 'id' => 'cat-dialog', 'title' => 'Category Options', 'class' => 'smwcatdialog' ) ) . // todo i18n
					Xml::inputLabel( 'Label:', '', 'd-category-label', 'd-category-label' ) . '<br/>' . // todo i18n
					Xml::inputLabel( 'Category:', '', 'd-category', 'd-category' ) . '<br/><br/>' . // todo i18n
					Xml::inputLabel( 'Show text when category is present:', '', 'd-category-yes', 'd-category-yes' ) . '<br/><br/>' . // todo i18n
					Xml::inputLabel( 'Show text when category is absent:', '', 'd-category-no', 'd-category-no' ) . '<br/><br/>' . // todo i18n
					'<input type="hidden" name="d-category-code" id="d-category-code">' .
					Xml::closeElement( 'div' );

		$result .= '<div id="sorting_main"></div>' . "\n";
		$result .= '[<a href="javascript:smw_addPropertyInstance(\'property_starter\', \'sorting_main\')">' . wfMsg( 'smw_qui_addnprop' ) . '</a>]' .
					'[<a href="javascript:smw_addCategoryInstance(\'category_starter\', \'sorting_main\')">' . wfMsg( 'smw_qui_addcategory' ) . '</a>]' .
					'[<a href="javascript:smw_addMainColInstance(\'maincol_starter\', \'sorting_main\')">' . wfMsg( 'smw_qui_addrescol' ) . '</a>]' .
					"\n";

		// Javascript code for handling adding and removing the "sort" inputs
		if ( $enableAutocomplete == SMWQueryUI::ENABLE_AUTO_SUGGEST ) {
			$this->addAutocompletionJavascriptAndCSS();
		}
		// localisation messages for javascript
		$optionsMsg = wfMsg( 'smw_qui_options' );
		$okMsg = wfMsg( 'smw_qui_ok' );
		$cancelMsg = wfMsg( 'smw_qui_cancel' );
		$javascript_text = <<<EOT
<script type="text/javascript">
var num_elements = {$num_sort_values};
EOT;
// add autocomplete
		if ( $enableAutocomplete == SMWQueryUI::ENABLE_AUTO_SUGGEST ) {
			$javascript_text .= <<<EOT

function smw_property_autocomplete(){
	jQuery('[name*="property"]').autocomplete({
		minLength: 2,
		source: function(request, response) {
			url=wgScriptPath+'/api.php?action=opensearch&limit=10&namespace='+wgNamespaceIds['property']+'&format=jsonfm';

			jQuery.getJSON(url, 'search='+request.term, function(data){
				//remove the namespace prefix 'Property:' from returned data
				for(i=0;i<data[1].length;i++) data[1][i]='?'+data[1][i].substr(data[1][i].indexOf(':')+1);
				response(data[1]);
			});

		}
	});
}

function smw_category_autocomplete(){
		jQuery('[name*="category"]').autocomplete({
		minLength: 2,
		source: function(request, response) {
			url=wgScriptPath+'/api.php?action=opensearch&limit=10&namespace='+wgNamespaceIds['category']+'&format=jsonfm';

			jQuery.getJSON(url, 'search='+request.term, function(data){
				//remove the namespace prefix 'Property:' from returned data
				for(i=0;i<data[1].length;i++) data[1][i]=data[1][i].substr(data[1][i].indexOf(':')+1);
				response(data[1]);
			});

		}
	});
}
EOT;
		} else {
			$javascript_text .= <<<EOT
function smw_property_autocomplete(){
}

function smw_category_autocomplete(){
}

EOT;
		}

		$javascript_text .= <<<EOT
function smw_prop_code_update(){
	code = '?'+jQuery('#d-property')[0].value;
	if(code!=''){
		if(jQuery('#d-property-format-custom')[0].value !=''){
			code = code + jQuery('#d-property-format-custom')[0].value;
		}
		if(jQuery('#d-property-label')[0].value !=''){
			code = code + ' = '+ jQuery('#d-property-label')[0].value;
		}
		jQuery('#d-property-code')[0].value= code;
	}
}

function smw_cat_code_update(){
		cat = jQuery('#d-category').attr('value');
		label =code= jQuery('#d-category-label').attr('value');
		yes = jQuery('#d-category-yes').attr('value');
		no = jQuery('#d-category-no').attr('value');
		if (cat.trim()!='' && yes.trim()!=''){
			code=cat+'#'+yes;
			if(no.trim()!=''){
				code=code+','+no;
			}
		}
		jQuery('#d-category-code').attr('value', code);

}

function smw_makeCatDialog(cat_id){
	jQuery('#prop-cat input').attr('value','');
	cat=jQuery('#category'+cat_id)[0].value;
	label=jQuery('#cat_label'+cat_id)[0].value;
	cats=cat.split('#');
	cat= cats[0];
	if(cats[1]){
		yes_no = cats[1].split(',');
		if(yes_no[1]){
			no=yes_no[1];
		} else {
			no = '';
		}
		yes=yes_no[0];
		jQuery('#d-category-yes').attr('value',yes);
		jQuery('#d-category-no').attr('value',no);
	}
	jQuery('#d-category-label').attr('value',label);
	jQuery('#d-category').attr('value',cat);
	jQuery('#cat-dialog').dialog.id=cat_id;
	jQuery('#cat-dialog').dialog('open');
}

function smw_makePropDialog(prop_id){
	jQuery('#prop-dialog input').attr('value','');
	prop=val=jQuery('#property'+prop_id)[0].value;
	if(val[0]='?') val=prop=prop.substr(1);
	if((i=val.indexOf('='))!=-1) prop=prop.substring(0, i);
	if((i=val.indexOf('#'))!=-1) prop=prop.substring(0, i);
	if(val.split('=')[1]){
		label=val.split('=')[1].trim();
	}else{
		label="";
	}
	format = val.split('=')[0];
	if(format.indexOf('#')!=-1){
		format=format.substr(format.indexOf('#'));
	}else{
		format="";
	}

	jQuery('#d-property').attr('value', prop.trim());
	jQuery('#d-property-label').attr('value', label);
	jQuery('#d-property-format-custom').attr('value', format.trim());
	jQuery('#prop-dialog').dialog.id=prop_id;
	jQuery('#prop-dialog').dialog('open');
}
// code for handling adding and removing the "sort" inputs

function smw_addPropertyInstance(starter_div_id, main_div_id) {
	var starter_div = document.getElementById(starter_div_id);
	var main_div = document.getElementById(main_div_id);

	//Create the new instance
	var new_div = starter_div.cloneNode(true);
	var div_id = 'sort_div_' + num_elements;
	new_div.id = div_id;
	new_div.style.display = 'block';
	jQuery(new_div.getElementsByTagName('label')).attr('for', 'display'+num_elements);
	var children = new_div.getElementsByTagName('*');
	var x;
	for (x = 0; x < children.length; x++) {
		if (children[x].for) children[x].for="display"+num_elements;
		if (children[x].name){
			children[x].id = children[x].name.replace(/_num/, ''+num_elements);
			children[x].name = children[x].name.replace(/_num/, '[' + num_elements + ']');
		}
	}

	//Create 'more' link
	var more_button =document.createElement('span');
	more_button.innerHTML = ' <a class="smwq-more" href="javascript:smw_makePropDialog(\'' + num_elements + '\')">{$optionsMsg}</a> ';
	more_button.id = 'more'+num_elements;
	new_div.appendChild(more_button);

	//Add the new instance
	main_div.appendChild(new_div);

	// initialize delete button
	st='sort_div_'+num_elements;
	jQuery('#'+new_div.id).find(".smw-remove a")[0].href="javascript:removePOInstance('"+st+"')";
	num_elements++;
	smw_property_autocomplete();
}

function smw_addCategoryInstance(starter_div_id, main_div_id) {
	var starter_div = document.getElementById(starter_div_id);
	var main_div = document.getElementById(main_div_id);

	//Create the new instance
	var new_div = starter_div.cloneNode(true);
	var div_id = 'sort_div_' + num_elements;
	new_div.id = div_id;
	new_div.style.display = 'block';
	jQuery(new_div.getElementsByTagName('label')).attr('for', 'display'+num_elements);
	var children = new_div.getElementsByTagName('*');
	var x;
	for (x = 0; x < children.length; x++) {
		if (children[x].for) children[x].for="display"+num_elements;
		if (children[x].name){
			children[x].id = children[x].name.replace(/_num/, ''+num_elements);
			children[x].name = children[x].name.replace(/_num/, '[' + num_elements + ']');
		}
	}

	//Create 'more' link
	var more_button =document.createElement('span');
	more_button.innerHTML = ' <a class="smwq-more" href="javascript:smw_makeCatDialog(\'' + num_elements + '\')">{$optionsMsg}</a> ';
	more_button.id = 'more'+num_elements;
	new_div.appendChild(more_button);

	//Add the new instance
	main_div.appendChild(new_div);

	// initialize delete button
	st='sort_div_'+num_elements;
	jQuery('#'+new_div.id).find(".smw-remove a")[0].href="javascript:removePOInstance('"+st+"')";
	num_elements++;
	smw_category_autocomplete();
}

function smw_addMainColInstance(starter_div_id, main_div_id) {
	var starter_div = document.getElementById(starter_div_id);
	var main_div = document.getElementById(main_div_id);

	//Create the new instance
	var new_div = starter_div.cloneNode(true);
	var div_id = 'sort_div_' + num_elements;
	new_div.id = div_id;
	new_div.style.display = 'block';
	jQuery(new_div.getElementsByTagName('label')).attr('for', 'display'+num_elements);
	var children = new_div.getElementsByTagName('*');
	var x;
	for (x = 0; x < children.length; x++) {
		if (children[x].for) children[x].for="display"+num_elements;
		if (children[x].name){
			children[x].id = children[x].name.replace(/_num/, ''+num_elements);
			children[x].name = children[x].name.replace(/_num/, '[' + num_elements + ']');
		}
	}

	//Add the new instance
	main_div.appendChild(new_div);

	// initialize delete button
	st='sort_div_'+num_elements;
	jQuery('#'+new_div.id).find(".smw-remove a")[0].href="javascript:removePOInstance('"+st+"')";
	num_elements++;
	smw_category_autocomplete();
}

function removePOInstance(div_id) {
	var olddiv = document.getElementById(div_id);
	var parent = olddiv.parentNode;
	parent.removeChild(olddiv);
}

jQuery(function(){
	jQuery('$hidden_property').appendTo(document.body);
	jQuery('$hidden_category').appendTo(document.body);
	jQuery('$hidden_main_column').appendTo(document.body);
	jQuery('$property_dialog_box').appendTo(document.body);
	jQuery('$category_dialog_box').appendTo(document.body);
	jQuery('#cat-dialog').dialog({
		autoOpen: false,
		modal: true,
		resizable: true,
		minHeight: 200,
		minWidth: 400,
		buttons: {
			"{$okMsg}": function(){
				smw_cat_code_update();
				label = jQuery('#d-category-label').attr('value');
				code = jQuery('#d-category-code').attr('value');
				jQuery('#category'+jQuery(this).dialog.id).attr('value',code);
				jQuery('#cat_label'+jQuery(this).dialog.id).attr('value',label);
				jQuery(this).dialog("close");
			},
			"{$cancelMsg}": function(){
				jQuery('#cat-dialog input').attr('value','');
				jQuery(this).dialog("close");
			}
		}
	});

	jQuery('#prop-dialog').dialog({
		autoOpen: false,
		modal: true,
		resizable: true,
		minHeight: 200,
		minWidth: 400,
		buttons: {
			"{$okMsg}": function(){
				smw_prop_code_update();
				jQuery('#property'+jQuery(this).dialog.id)[0].value=jQuery('#d-property-code')[0].value;
				jQuery(this).dialog("close");
			},
			"{$cancelMsg}": function(){
				jQuery('#prop-dialog input').attr('value','');
				jQuery(this).dialog("close");
			}
		}
	});
	jQuery('#sort-more').click(function(){jQuery('#prop-dialog').dialog("open");});

	jQuery('#d-format').bind('change', function(event){
		jQuery('#d-property-format-custom').attr('value', jQuery('#d-format').attr('value'));
		smw_prop_code_update();
	});
});

jQuery(document).ready(smw_property_autocomplete);
jQuery(document).ready(smw_category_autocomplete);
</script>

EOT;

		$wgOut->addScript( $javascript_text );
		return $result;
	}
}

