Pending:

6) There's no 404 handler to generate missing thumbnails.
7) There's no support for remote thumbnailing.
7.1) The SpecialUploadStash, when it calls the remote scaler, is actually just relying on the 404 handler on upload.wm.org.
     It's just executing thumb.php (is it thumb??) to make a thumbnail on a temporary name.  Note that it's using a temp/
     directory in the thumbs container, not a directory in the temp container.
7.2) The scaler cluster is simply some machines with access to the originals and thumb storage. The 404 handler running on the Apache
     front-ends forwards the request to a thumb.php running on the scaler cluster. Thumb.php takes care of creating the thumbnail.
6&7) Basically, the code which currently fetches 404 thumbs from upload.wikimedia.org needs to be changed slightly so that it inserts
     thumb.php with the appropriate parameters and fetches from the scaler cluster.
8) Test cases (but of course that could be done until the cows come home).
9) Read through the code and look for anything which is insane.
10) Remove directory from $wgLocalFileRepo, to make sure that there's no references to it. Ditto for wgDeletedDirectory and deletedDir.
11) Determine what to do about the one remaining core change needed for Swift.
12) Why is anybody calling resolveVirtualUrl()? It's defined in the Repo, but getPath() is defined against a file.
Why is UploadStashFile() being called with a virtual URL? Once the file has been stashed() it has an object name. The container name is implicit.
Should UploadStashFile *always* (in our case) be called with a virtual URL?

Resolved:

5) The Upload seems to take more time than I expect, but that could be a function of generating the six thumbnails.
   It *is* a function of generating the seven (we generate 800x600 twice) thumbnails. Each one takes 1/2 second.
10) Remove directory from $wgLocalFileRepo, to make sure that there's no references to it. Ditto for wgDeletedDirectory and deletedDir.
    wgDeletedDirectory and deletedDir can be removed.
12) Implement repo->freeTemp() - needed by several extensions and UploadFromStash.
13) Do we need $wgLocalRepo->ThumbUrl to be configurable given that the Python middleware presumes it?
    We currently have no need for it to be configurable in Swift. I'll just hard-code it to .../thumb with a note saying
    that if it gets changed here, it needs to be changed in the Swift middleware as well.


neilk_: okay, the moment when an upload passes from being a temp file into something else is at $upload->processUpload()
neilk_: in the old design, in essence, all this does is move a file into an NFS directory, and creates the matching database entry which creates a wiki page.
neilk_: so far I don't think this should be news?
nelson____: right
neilk_: So that's includes/specials/SpecialUpload.php 
neilk_: then there's includes/api/ApiUpload.php
neilk_: which is similar but not quite the same

Watch for that!

neilk_: in ApiUpload.php there is the option to stash explicitly
neilk_: so the path is a bit convoluted in ApiUpload.php. Also if I remember right the file is accessed a bit differently
neilk_: it is possible to have stashing in ALL of these cases
neilk_: but in SpecialUpload, stashing occurs if there's a recoverable error with the file, like a bad file name
neilk_: in ApiUpload, stashing can happen for that reason, or it can happens if you ask for it explicitly (which is how UploadWizard works).
neilk_: nelson__: anyway is this answering your question yet?
nelson____: yes.
neilk_: ok so that's the overview of the upload methods & stashing, what else
nelson____: I think that part of the problem is that various parts of the system feel free to make the jump from "stored" to "accessible as full path".
neilk_: yes 
neilk_: it drove me nuts too
neilk_: and the code intentionally conflates a number of cases, because MediaWiki at heart just wants to throw a number of files into a directory, not manage millions of them
nelson____: I gotta figure out how to mark the difference, so that something is either 1) a locally stored file, or 2) a blind token from the repo.
neilk_: can't you subclass FileRepo then?
nelson____: cuz if you have the blind token, then you need to turn it into a File and then call getPath() on it.
nelson____: but there's times when the upload code expects to be able to access a file without creating a File first.
neilk_: when does upload code access a file that isn't a File?
nelson____: sec
nelson____: neilk_: UploadStashFile does this in its __construct:                         $path = $repo->resolveVirtualUrl( $path );
neilk_: yes
nelson____: But maybe the key thing for me to know is that when it's SwiftMedia, $path on the right is *always* a mwrepo/
nelson____: If that's the case, then I think I'm okay. I'm just having trouble following the code up and out and then back down.
neilk_: there isn't any code, to my knowledge, which assumes that $path is a "physical" path. It uses the repo methods.
neilk_: I don't blame you if you're having trouble.
neilk_: isn't any code in UploadStashFile, I mean.
nelson____: maybe ... what I should do is throw an exception if SwiftRepo::resolveVirtualUrl ever gets called without a mwrepo url, and then just go test everything.
nelson____: I think maybe I'm trying to overanalyze the code.
neilk_: I sympathize
nelson____: I should trust the code more. 
neilk_: hm, I think not
nelson____: Trust but verify.
neilk_: also, this is sad but stashing is done in two slightly different ways, too.
nelson____: I saw.
neilk_: but compatible
neilk_: I wanted UploadStash to absorb the other one.
neilk_: We can still do that.
nelson____: agreed.
neilk_: When I was in the middle of Upload code, I always felt like I was cramped in some access area between two walls, with all the pipes and electrical work.
nelson____: interesting metaphor.
nelson____: yeah, I think part of that problem is you're always stuck between the database and the filestore.
nelson____: they both have opinions about how things work, and you have to keep them consistent.
nelson____: Okay, I'm gonna take some notes then go home. taking the weekend off for a bicycle road trip.
