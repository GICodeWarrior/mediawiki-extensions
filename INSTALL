[[Semantic MediaWiki 1.6-beta]]

Install instructions for the latest SMW version are also online in a more
convenient format for reading:

         http://semantic-mediawiki.org/wiki/Help:Installation


Contents

* Disclaimer
* Requirements
* Installation
  ** Testing your Installation
  ** Customising Semantic MediaWiki
  ** Running SMW on older versions of MediaWiki
* Upgrading existing installations
  ** Upgrading geographic coordinates
  ** Upgrading n-ary (multivalued) properties
  ** Changed configuration options
* Troubleshooting
* SMW is installed. What should I do now?
* Contact


== Disclaimer ==

For a proper legal disclaimer, see the file "COPYING".

In general, the extension can be installed into a working wiki without making
any irreversible changes to the source code or database, so you can try out
the software without much risk (though no dedicated uninstall mechanism is
provided). Every serious wiki should be subject to regular database backups!
If you have any specific questions, please contact the authors.


== Requirements ==

* MediaWiki 1.15.4 or greater (tested on 1.16.0 to 1.17alpha (r63248).
* Validator MediaWiki extension version 0.4.5 or greater
  (http://www.mediawiki.org/wiki/Extension:Validator)
* PHP 5.* or greater installed and working
* MySQL >= 4.0.14 (version required by MediaWiki) OR PostgreSQL >= 8.3
  Note that Postgres support is still preliminary and might require special
  setup, see http://semantic-mediawiki.org/wiki/PostgreSQL

Notes:
* SMW uses the PHP mb_*() multibyte functions such as mb_strpos in the
  php_mbstring.dll extension. This is standard but not enabled by default on
  some distributions of PHP.
  See http://php.net/manual/en/ref.mbstring.php#mbstring.installation
* For installation and upgrade, SMW needs the rights to create new tables
  (CREATE) and to alter tables (ALTER TABLE). Both can be removed again after
  SMW was set up. The script SMW_setup.php can use the DB credentials from
  AdminSettings.php for this purpose, avoiding the need of extra rights for
  the wiki DB user.
* When using SMWSQLStore2 (default data store for SMW), SMW creates and alters
  temporary tables for certain semantic queries. To do this, your wikidb user
  must have privileges for CREATE TEMPORARY TABLES. The according features can
  be disabled by adding the following to Localsettings.php:

  $smwgQSubcategoryDepth=0;
  $smwgQPropertyDepth=0;
  $smwgQFeatures        = SMW_ANY_QUERY & ~SMW_DISJUNCTION_QUERY;
  $smwgQConceptFeatures = SMW_ANY_QUERY & ~SMW_DISJUNCTION_QUERY &
                          ~SMW_CONCEPT_QUERY;

* When using SMWSparqlStore (RDF store connector), SMW uses the CURL functions
  of PHP. These functions may have to be enabled/installed to be available.


== Installation ==

If you upgrade an existing installation of Semantic MediaWiki, also read the
remarks in the section "Notes on Upgrading" below!

(1) Extract the archive or check out the current files from SVN to obtain the
    directory "SemanticMediaWiki" that contains all relevant files. Copy this
    directory to "[wikipath]/extensions/" (or extract/download it there).
    We abbreviate "[wikipath]/extensions/SemanticMediaWiki" as "[SMW_path]".
(2) Insert the following two lines into "[wikipath]/LocalSettings.php":

    include_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");
    enableSemantics('example.org');

    where example.org should be replaced by your server's name (or IP address).
    The latter is needed only once, using the "preferred" name of your server.
    It is no problem to access a site by more than one servername in any case.
    If you have custom namespaces (such as "Portal"), read the note below.
(3) In your wiki, log in as a user with admin status and go to the page
    "Special:SMWAdmin" to do the final setup steps. Two steps are needed: at
    first, trigger the database setup ("Database installation and upgrade").
    Afterwards, activate the automatic data update ("Data repair and upgrade").
    Note that the first step requires permissions to alter/create database
    tables, as explained in the above note. The second step takes some time;
    go to Special:SMWAdmin to follow its progress. SMW can be used before this
    completes, but will not have access to all data yet (e.g. page categories).

    Both of those actions can also be accomplished with the command-line PHP
    scripts SMW_setup.php and SMW_refreshData.php. Read the documentation in
    [SMW_path]/maintenance/README for details on how to run such scripts.

'''Remark:'''  Semantic MediaWiki uses ten additional namespace indexes (see
http://www.mediawiki.org/wiki/Manual:Using_custom_namespaces), in the range from
100 to 109. 100 and 101 are not used (they were used in early beta versions),
104 and 105 are not used by default (they were used for the Type namespace in
SMW up to 1.5.*). 106 and 107 are reserved for the SemanticForms extension. If
you have your own custom namespaces, you have to set the parameter
$smwgNamespaceIndex before including SemanticMediaWiki.php. See the
documentation $within SMW_Settings.php for details. If you add more namespaces
later on, then you have to assign them to higher numbers than those used by
Semantic MediaWiki.


=== Testing your Installation ===

If you are uncertain that everything went well, you can do some testing steps
to check if SMW is set up properly.

Go to the Special:Version page. You should see Semantic MediaWiki (version nn)
listed as a Parser Hook there.

Create a regular wiki page named "TestSMW", and in it enter the wiki text
  Property test:  [[testproperty::Dummypage]]

When previewing the page before saving, you should see a Factbox at the bottom
of the article that shows your input. After saving the page, click on the link
"Browse properties" in the page's toolbox. This view should show Testproperty
with value Dummypage.

If you don't get these results, check the steps in the Installation section,
consult the FAQ section, then contact the user support list (see the Contact
section).

=== Customising Semantic MediaWiki ===

Semantic MediaWiki can be customised by a number of settings. The available
options are detailed in http://semantic-mediawiki.org/wiki/Help:Configuration

=== Running SMW on older versions of MediaWiki ===

If your site is still running on PHP4, SMW is not supported. It would hardly
be possible to backport the code to the old PHP version. If you have PHP5 but
an older MediaWiki version, additional patches/modifications might be needed.
Download an older release of SMW and have a look at the included INSTALL
instructions to find out whether other changes are recommended therein.


== Upgrading existing installations ==

(Please read all of this before upgrading)

Note that SMW 1.6.0 has a new software dependency: the Validator extension that
helps Semantic MediaWiki to validate user-provided parameters. It must be
installed for SMW to work (http://www.mediawiki.org/wiki/Extension:Validator).

Installations of SMW 1.5.* and can be upgraded by replacing the files, and by
running the database update (Special:SMWAdmin or SMW_setup.php script) as usual.
Moreover, it is strongly suggested to enable the refresh process to update all
data on Special:SMWAdmin. Older versions of SMW can be upgraded in the same way,
but there can be more feature chagnes that require changes of wiki pages. See
the current documentation for details on using the current version.

Extensions for SMW versions up to 1.5.* should not be assumed to work
with SMW 1.6 out of the box. All SMW extensions should be upgraded to versions
that are compatible with SMW 1.6. Moreover, some functions changed and pages
might need updates (see sbelow). Additional remarks on upgrading older SMW
versions are given below.

If not done already, it is suggested to change the inclusion of SMW in
LocalSettings.php to the following as described in the installation
instructions above:

 include_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");

Including SMW_Settings.php as in earlier versions will continue to work, but may
be disabled in some future version.

The main user-visible changes in SMW 1.6 concern the Type namespace, the use of
custom units of measurement (with custom conversion factors), and the
declaration of Type:Record properties. Moreover, the support for the RAP was
replaced by general RDF store support. Please see the documentation for details
on how to configure this.

Users who update from SMW 1.4 or earlier hould note that "n-ary" properties now
are declared by properties of Type:Record as explained below, and that support
for geographic coordinates has moved to the Semantic Maps extension. For 
upgrading earlier SMW versions, users should have a look at upgrade instructions
released with SMW 1.5.


=== Type namespace ===

SMW no longer uses namespaces "Type" and "Type talk." All types are now built-in
and there is no good reason to keep a namespace just for documenting them. A new
function of Special:Types allows viewing all properties of a type, like the Type
pages did before.

If you still want to use Type (for example to access pages that existed there),
you should set $smwgHistoricTypeNamespace = true; before including SMW in
LocalSettings.php. This should only be used to move old content to a better
place. The old namespaces will not be kept indefinitely.


=== Custom units ===

The only use of Type pages was the declaration of custom types that would allow
unit conversion. The declaration of properties with custom units of measurement
has changed in two ways: 

(1) The type of these properties is now "Quantity" (not a "custom" type page)
(2) The conversion factors that used to be on the Type page are not given on the
    property page. So one can simply move this text (Type must be activated for
    this as described above).

The internal data format of SMW has not changed for custom units, so stored data
will be accessible immediately after the change.


=== Type:Record ===

The fields declaration of Type:Record properties now refer to properties, not to
types. If you have a property with [[has type::Record]] that uses a setting like

 <nowiki>[[has fields::Page; Number; String]]</nowiki>

then you should now replace it with something like

 <nowiki>[[has fields::my page; my number; my string]]</nowiki>

where "my page", "my number", and "my string" are properties in your wiki that
have the right types. The use of properties instead of types is better since it
allows custom settings beyond the datatype of a field (e.g. conversion factors).

The new method also involves internal changes in the data format, and it is not
possible to make the update without tmporarily loosing access to the stored data
for Type:Record properties (until SMW's self repair has fixed all data entries).


=== Changed configuration options ===

Some configuration options (used in LocalSettings.php) have changed since SMW
1.0. All settings are documented in detail in the file SMW_Settings.php. The
following list gives the version in which a setting was first introduced, so it
can be ignored if you already run this version or a more recent one.

* [1.4] Up to version 1.4, the default for value for the setting
$smwgQComparators was '<|>|!'. It now has changed to '<|>|!|~' so the "like"
comparator ~ is enabled by default.

* [1.4] Version 1.4 still supported a setting $smwgSMWBetaCompatible to enable
the old <ask> query syntax and the Relation namespace. This backwards
compatibility has now been dropped and the setting is no longer used. Please
update your wiki to not use the outdated (and now undocumented) features.

* [1.3] Since SMW 1.3, the Factbox is hidden by default and will not appear.
As a compensation, the toolbox (usually on the left below the search field)
shows a link to Special:Browse. To use the display behaviour of the Factbox as
it was before SMW 1.3, set $smwgShowFactbox = SMW_FACTBOX_NONEMPTY; The new
link and the Factbox during editing can also be configured; see
SMW_Settings.php for details.

* [1.2.1] SMW will no longer support nested link syntax in property values by
default, since this was known to cause problems. To re-enable this, set
$smwgLinksInValues = true;

* [1.2] The <ask> syntax and the Relation: namespace have still been officially
supported in SMW 1.2, and were optionally available until SMW 1.4.*. Both are
now disabled and can no longer be used.

* [1.2] If you had a setting $smwgQDisjunctionSupport = false, then you now
need the following settings:

 $smwgQFeatures        = SMW_ANY_QUERY & ~SMW_DISJUNCTION_QUERY;
 $smwgQConceptFeatures = SMW_ANY_QUERY & ~SMW_DISJUNCTION_QUERY & ~SMW_CONCEPT_QUERY;

Older configuration changes are found online, see
http://semantic-mediawiki.org/wiki/Help:Installation_1.3


== Troubleshooting ==

Some technical problems are well known and have easy fixes. Please view the
online manual: http://semantic-mediawiki.org/wiki/Help:Troubleshooting

See http://semantic-mediawiki.org/wiki/Help:Reporting_bugs for reporting and
looking up bugs. You can also send an email to
semediawiki-user@lists.sourceforge.net (subscribe first at
http://sourceforge.net/mailarchive/forum.php?forum_name=semediawiki-user)


== SMW is installed. What should I do now? ==

Semantic MediaWiki is there to help you to structure your data, so that you
can browse and search it easier. Typically, you should first add semantic
markup to articles that cover a topic that is typical for your wiki. A single
article, semantic or not, will not improve your search capabilities.

Start with a kind of article that occurs often in your wiki, possibly with
some type of articles that is already collected in some category, such as
cities, persons, or software projects. For these articles, introduce a few
properties, and annotate many of the articles with the property. As with
categories, less is often more in semantic annotation: do not use overly
specific properties. A property that is not applicable to at least ten
articles is hardly useful.

Templates can greatly simplify initial annotation. Create a flashy template
for your users to play with, and hide the semantic annotations in the code
of the template. Use the ParserFunctions extension to implement optional
parameters, so that your users can leave fields in the template unspecified
without creating faulty annotations.

Develop suitable inline queries ({{#ask: ... }}) along with any new
annotation. If you don't know how to use some annotation for searching, or
if you are not interested in searching for the annotated information anyway,
then you should probably not take the effort in the first place. Annotate
in a goal-directed way! Not all information can be extracted from the
annotations in your wiki. E.g. one can currently not search for articles that
are *not* in a given category. Think about what you want to ask for before
editing half of your wiki with new semantics ...

If in doubt, choose simple annotations and learn to combine them into more
complex information. For example, you do not need to have a category for
"European cities" -- just combine "located in::Europe" and "Category:City."
If European cities are important for your wiki, you can create a Concept
page for storing that particular query. In any case, if some annotation is
not sufficient, you can still add more information. Cleaning too specific
and possibly contradictory annotations can be more problematic.

Regularly review users' use of categories, properties, and types using
the Special pages for each.


== Contact ==

See "Contact" in the file README, or view the current online information
http://semantic-mediawiki.org/wiki/Contact

If you have remarks or questions, please send them to
 semediawiki-user@lists.sourceforge.net
You can join this mailing list at
 http://sourceforge.net/mail/?group_id=147937

Please report bugs to MediaZilla, http://bugzilla.wikimedia.org
