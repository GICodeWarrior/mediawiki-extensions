--- gnuplot-4.0.0-orig/src/command.c	2004-04-13 06:00:01.000000000 -0700
+++ gnuplot-4.0.0/src/command.c	2006-12-26 04:30:42.000000000 -0800
@@ -1846,9 +1846,7 @@ do_shell()
     screen_ok = FALSE;
     c_token++;
  
-    if ((vaxc$errno = lib$spawn()) != SS$_NORMAL) {
-	os_error(NO_CARET, "spawn error");
-    }
+    return;
 }
 
 
@@ -1856,21 +1854,7 @@ static void
 do_system(cmd)
 const char *cmd;
 {
-
-     if (!cmd)
-	return;
-
-    /* input_line is filled by read_line or load_file, but 
-     * line_desc length is set only by read_line; adjust now
-     */
-    line_desc.dsc$w_length = strlen(cmd);
-    line_desc.dsc$a_pointer = (char *) cmd;
-
-    if ((vaxc$errno = lib$spawn(&line_desc)) != SS$_NORMAL)
-	os_error(NO_CARET, "spawn error");
-
-    (void) putc('\n', stderr);
-
+  return;
 }
 #endif /* VMS */
 
@@ -2092,43 +2076,13 @@ do_system(cmd)
     const char *cmd;
 {
 # ifdef AMIGA_AC_5
-    static char *parms[80];
-    if (!cmd)
-	return;
-    getparms(input_line + 1, parms);
-    fexecv(parms[0], parms);
+  return;
 # elif (defined(ATARI) && defined(__GNUC__))
-/* || (defined(MTOS) && defined(__GNUC__)) */
-    /* use preloaded shell, if available */
-    short (*shell_p) (char *command);
-    void *ssp;
-
-    if (!cmd)
-	return;
-
-    ssp = (void *) Super(NULL);
-    shell_p = *(short (**)(char *)) 0x4f6;
-    Super(ssp);
-
-    /* this is a bit strange, but we have to have a single if */
-    if (shell_p)
-	(*shell_p) (cmd);
-    else
-	system(cmd);
+  return;
 # elif defined(_Windows) && defined(USE_OWN_WINSYSTEM_FUNCTION)
-    if (!cmd)
-	return;
-    winsystem(cmd);
+  return;
 # else /* !(AMIGA_AC_5 || ATARI && __GNUC__ || _Windows) */
-/* (am, 19980929)
- * OS/2 related note: cmd.exe returns 255 if called w/o argument.
- * i.e. calling a shell by "!" will always end with an error message.
- * A workaround has to include checking for EMX,OS/2, two environment
- *  variables,...
- */
-    if (!cmd)
-	return;
-    system(cmd);
+  return;
 # endif /* !(AMIGA_AC_5 || ATARI&&__GNUC__ || _Windows) */
 }
 
@@ -2234,16 +2188,7 @@ do_shell()
     screen_ok = FALSE;
     c_token++;
 
-    if (user_shell) {
-#  if defined(_Windows)
-	if (WinExec(user_shell, SW_SHOWNORMAL) <= 32)
-#  elif defined(DJGPP)
-	    if (system(user_shell) == -1)
-#  else
-		if (spawnl(P_WAIT, user_shell, NULL) == -1)
-#  endif			/* !(_Windows || DJGPP) */
-		    os_error(NO_CARET, "unable to spawn shell");
-    }
+    return;
 }
 
 # elif defined(AMIGA_SC_6_1)
@@ -2254,11 +2199,7 @@ do_shell()
     screen_ok = FALSE;
     c_token++;
 
-    if (user_shell) {
-	if (system(user_shell))
-	    os_error(NO_CARET, "system() failed");
-    }
-    (void) putc('\n', stderr);
+    return;
 }
 
 #  elif defined(OS2)
@@ -2269,12 +2210,7 @@ do_shell()
     screen_ok = FALSE;
     c_token++;
 
-    if (user_shell) {
-	if (system(user_shell) == -1)
-	    os_error(NO_CARET, "system() failed");
-
-    }
-    (void) putc('\n', stderr);
+    return;
 }
 
 #  else				/* !OS2 */
@@ -2285,17 +2221,10 @@ do_shell()
 void
 do_shell()
 {
-    static char exec[100] = EXEC;
-
     screen_ok = FALSE;
     c_token++;
  
-    if (user_shell) {
-	if (system(safe_strncpy(&exec[sizeof(EXEC) - 1], user_shell,
-				sizeof(exec) - sizeof(EXEC) - 1)))
-	    os_error(NO_CARET, "system() failed");
-    }
-    (void) putc('\n', stderr);
+    return;
 }
 
 # endif				/* !MSDOS */
@@ -2503,52 +2432,7 @@ read_line(prompt)
 static int
 winsystem(const char *s)
 {
-    LPSTR comspec;
-    LPSTR execstr;
-    LPCSTR p;
-
-    /* get COMSPEC environment variable */
-# ifdef WIN32
-    char envbuf[81];
-    GetEnvironmentVariable("COMSPEC", envbuf, 80);
-    if (*envbuf == NUL)
-	comspec = "\\command.com";
-    else
-	comspec = envbuf;
-# else
-    p = GetDOSEnvironment();
-    comspec = "\\command.com";
-    while (*p) {
-	if (!strncmp(p, "COMSPEC=", 8)) {
-	    comspec = p + 8;
-	    break;
-	}
-	p += strlen(p) + 1;
-    }
-# endif
-    /* if the command is blank we must use command.com */
-    p = s;
-    while ((*p == ' ') || (*p == '\n') || (*p == '\r'))
-	p++;
-    if (*p == NUL) {
-	WinExec(comspec, SW_SHOWNORMAL);
-    } else {
-	/* attempt to run the windows/dos program via windows */
-	if (WinExec(s, SW_SHOWNORMAL) <= 32) {
-	    /* attempt to run it as a dos program from command line */
-	    execstr = gp_alloc(strlen(s) + strlen(comspec) + 6,
-			       "winsystem cmdline");
-	    strcpy(execstr, comspec);
-	    strcat(execstr, " /c ");
-	    strcat(execstr, s);
-	    WinExec(execstr, SW_SHOWNORMAL);
-	    free(execstr);
-	}
-    }
-
-    /* regardless of the reality return OK - the consequences of */
-    /* failure include shutting down Windows */
-    return (0);			/* success */
+  return(0);
 }
 
 void
