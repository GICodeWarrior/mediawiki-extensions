








;jQuery.ui||(function($){

var _remove=$.fn.remove,
isFF2=$.browser.mozilla&&(parseFloat($.browser.version)<1.9);


$.ui={
version:"1.7.1",


plugin:{
add:function(module,option,set){
var proto=$.ui[module].prototype;
for(var i in set){
proto.plugins[i]=proto.plugins[i]||[];
proto.plugins[i].push([option,set[i]]);
}
},
call:function(instance,name,args){
var set=instance.plugins[name];
if(!set||!instance.element[0].parentNode){return;}

for(var i=0;i<set.length;i++){
if(instance.options[set[i][0]]){
set[i][1].apply(instance.element,args);
}
}
}
},

contains:function(a,b){
return document.compareDocumentPosition
?a.compareDocumentPosition(b)&16
:a!==b&&a.contains(b);
},

hasScroll:function(el,a){


if($(el).css('overflow')=='hidden'){return false;}

var scroll=(a&&a=='left')?'scrollLeft':'scrollTop',
has=false;

if(el[scroll]>0){return true;}




el[scroll]=1;
has=(el[scroll]>0);
el[scroll]=0;
return has;
},

isOverAxis:function(x,reference,size){

return(x>reference)&&(x<(reference+size));
},

isOver:function(y,x,top,left,height,width){

return $.ui.isOverAxis(y,top,height)&&$.ui.isOverAxis(x,left,width);
},

keyCode:{
BACKSPACE:8,
CAPS_LOCK:20,
COMMA:188,
CONTROL:17,
DELETE:46,
DOWN:40,
END:35,
ENTER:13,
ESCAPE:27,
HOME:36,
INSERT:45,
LEFT:37,
NUMPAD_ADD:107,
NUMPAD_DECIMAL:110,
NUMPAD_DIVIDE:111,
NUMPAD_ENTER:108,
NUMPAD_MULTIPLY:106,
NUMPAD_SUBTRACT:109,
PAGE_DOWN:34,
PAGE_UP:33,
PERIOD:190,
RIGHT:39,
SHIFT:16,
SPACE:32,
TAB:9,
UP:38
}
};


if(isFF2){
var attr=$.attr,
removeAttr=$.fn.removeAttr,
ariaNS="http://www.w3.org/2005/07/aaa",
ariaState=/^aria-/,
ariaRole=/^wairole:/;

$.attr=function(elem,name,value){
var set=value!==undefined;

return(name=='role'
?(set
?attr.call(this,elem,name,"wairole:"+value)
:(attr.apply(this,arguments)||"").replace(ariaRole,""))
:(ariaState.test(name)
?(set
?elem.setAttributeNS(ariaNS,
name.replace(ariaState,"aaa:"),value)
:attr.call(this,elem,name.replace(ariaState,"aaa:")))
:attr.apply(this,arguments)));
};

$.fn.removeAttr=function(name){
return(ariaState.test(name)
?this.each(function(){
this.removeAttributeNS(ariaNS,name.replace(ariaState,""));
}):removeAttr.call(this,name));
};
}


$.fn.extend({
remove:function(){


$("*",this).add(this).each(function(){
$(this).triggerHandler("remove");
});
return _remove.apply(this,arguments);
},

enableSelection:function(){
return this
.attr('unselectable','off')
.css('MozUserSelect','')
.unbind('selectstart.ui');
},

disableSelection:function(){
return this
.attr('unselectable','on')
.css('MozUserSelect','none')
.bind('selectstart.ui',function(){return false;});
},

scrollParent:function(){
var scrollParent;
if(($.browser.msie&&(/(static|relative)/).test(this.css('position')))||(/absolute/).test(this.css('position'))){
scrollParent=this.parents().filter(function(){
return(/(relative|absolute|fixed)/).test($.curCSS(this,'position',1))&&(/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
}).eq(0);
}else{
scrollParent=this.parents().filter(function(){
return(/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
}).eq(0);
}

return(/fixed/).test(this.css('position'))||!scrollParent.length?$(document):scrollParent;
}
});



$.extend($.expr[':'],{
data:function(elem,i,match){
return!!$.data(elem,match[3]);
},

focusable:function(element){
var nodeName=element.nodeName.toLowerCase(),
tabIndex=$.attr(element,'tabindex');
return(/input|select|textarea|button|object/.test(nodeName)
?!element.disabled
:'a'==nodeName||'area'==nodeName
?element.href||!isNaN(tabIndex)
:!isNaN(tabIndex))


&&!$(element)['area'==nodeName?'parents':'closest'](':hidden').length;
},

tabbable:function(element){
var tabIndex=$.attr(element,'tabindex');
return(isNaN(tabIndex)||tabIndex>=0)&&$(element).is(':focusable');
}
});




function getter(namespace,plugin,method,args){
function getMethods(type){
var methods=$[namespace][plugin][type]||[];
return(typeof methods=='string'?methods.split(/,?\s+/):methods);
}

var methods=getMethods('getter');
if(args.length==1&&typeof args[0]=='string'){
methods=methods.concat(getMethods('getterSetter'));
}
return($.inArray(method,methods)!=-1);
}

$.widget=function(name,prototype){
var namespace=name.split(".")[0];
name=name.split(".")[1];


$.fn[name]=function(options){
var isMethodCall=(typeof options=='string'),
args=Array.prototype.slice.call(arguments,1);


if(isMethodCall&&options.substring(0,1)=='_'){
return this;
}


if(isMethodCall&&getter(namespace,name,options,args)){
var instance=$.data(this[0],name);
return(instance?instance[options].apply(instance,args)
:undefined);
}


return this.each(function(){
var instance=$.data(this,name);


(!instance&&!isMethodCall&&
$.data(this,name,new $[namespace][name](this,options))._init());


(instance&&isMethodCall&&$.isFunction(instance[options])&&
instance[options].apply(instance,args));
});
};


$[namespace]=$[namespace]||{};
$[namespace][name]=function(element,options){
var self=this;

this.namespace=namespace;
this.widgetName=name;
this.widgetEventPrefix=$[namespace][name].eventPrefix||name;
this.widgetBaseClass=namespace+'-'+name;

this.options=$.extend({},
$.widget.defaults,
$[namespace][name].defaults,
$.metadata&&$.metadata.get(element)[name],
options);

this.element=$(element)
.bind('setData.'+name,function(event,key,value){
if(event.target==element){
return self._setData(key,value);
}
})
.bind('getData.'+name,function(event,key){
if(event.target==element){
return self._getData(key);
}
})
.bind('remove',function(){
return self.destroy();
});
};


$[namespace][name].prototype=$.extend({},$.widget.prototype,prototype);



$[namespace][name].getterSetter='option';
};

$.widget.prototype={
_init:function(){},
destroy:function(){
this.element.removeData(this.widgetName)
.removeClass(this.widgetBaseClass+'-disabled'+' '+this.namespace+'-state-disabled')
.removeAttr('aria-disabled');
},

option:function(key,value){
var options=key,
self=this;

if(typeof key=="string"){
if(value===undefined){
return this._getData(key);
}
options={};
options[key]=value;
}

$.each(options,function(key,value){
self._setData(key,value);
});
},
_getData:function(key){
return this.options[key];
},
_setData:function(key,value){
this.options[key]=value;

if(key=='disabled'){
this.element
[value?'addClass':'removeClass'](
this.widgetBaseClass+'-disabled'+' '+
this.namespace+'-state-disabled')
.attr("aria-disabled",value);
}
},

enable:function(){
this._setData('disabled',false);
},
disable:function(){
this._setData('disabled',true);
},

_trigger:function(type,event,data){
var callback=this.options[type],
eventName=(type==this.widgetEventPrefix
?type:this.widgetEventPrefix+type);

event=$.Event(event);
event.type=eventName;




if(event.originalEvent){
for(var i=$.event.props.length,prop;i;){
prop=$.event.props[--i];
event[prop]=event.originalEvent[prop];
}
}

this.element.trigger(event,data);

return!($.isFunction(callback)&&callback.call(this.element[0],event,data)===false
||event.isDefaultPrevented());
}
};

$.widget.defaults={
disabled:false
};




$.ui.mouse={
_mouseInit:function(){
var self=this;

this.element
.bind('mousedown.'+this.widgetName,function(event){
return self._mouseDown(event);
})
.bind('click.'+this.widgetName,function(event){
if(self._preventClickEvent){
self._preventClickEvent=false;
event.stopImmediatePropagation();
return false;
}
});


if($.browser.msie){
this._mouseUnselectable=this.element.attr('unselectable');
this.element.attr('unselectable','on');
}

this.started=false;
},



_mouseDestroy:function(){
this.element.unbind('.'+this.widgetName);


($.browser.msie
&&this.element.attr('unselectable',this._mouseUnselectable));
},

_mouseDown:function(event){


event.originalEvent=event.originalEvent||{};
if(event.originalEvent.mouseHandled){return;}


(this._mouseStarted&&this._mouseUp(event));

this._mouseDownEvent=event;

var self=this,
btnIsLeft=(event.which==1),
elIsCancel=(typeof this.options.cancel=="string"?$(event.target).parents().add(event.target).filter(this.options.cancel).length:false);
if(!btnIsLeft||elIsCancel||!this._mouseCapture(event)){
return true;
}

this.mouseDelayMet=!this.options.delay;
if(!this.mouseDelayMet){
this._mouseDelayTimer=setTimeout(function(){
self.mouseDelayMet=true;
},this.options.delay);
}

if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){
this._mouseStarted=(this._mouseStart(event)!==false);
if(!this._mouseStarted){
event.preventDefault();
return true;
}
}


this._mouseMoveDelegate=function(event){
return self._mouseMove(event);
};
this._mouseUpDelegate=function(event){
return self._mouseUp(event);
};
$(document)
.bind('mousemove.'+this.widgetName,this._mouseMoveDelegate)
.bind('mouseup.'+this.widgetName,this._mouseUpDelegate);




($.browser.safari||event.preventDefault());

event.originalEvent.mouseHandled=true;
return true;
},

_mouseMove:function(event){

if($.browser.msie&&!event.button){
return this._mouseUp(event);
}

if(this._mouseStarted){
this._mouseDrag(event);
return event.preventDefault();
}

if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){
this._mouseStarted=
(this._mouseStart(this._mouseDownEvent,event)!==false);
(this._mouseStarted?this._mouseDrag(event):this._mouseUp(event));
}

return!this._mouseStarted;
},

_mouseUp:function(event){
$(document)
.unbind('mousemove.'+this.widgetName,this._mouseMoveDelegate)
.unbind('mouseup.'+this.widgetName,this._mouseUpDelegate);

if(this._mouseStarted){
this._mouseStarted=false;
this._preventClickEvent=(event.target==this._mouseDownEvent.target);
this._mouseStop(event);
}

return false;
},

_mouseDistanceMet:function(event){
return(Math.max(
Math.abs(this._mouseDownEvent.pageX-event.pageX),
Math.abs(this._mouseDownEvent.pageY-event.pageY)
)>=this.options.distance
);
},

_mouseDelayMet:function(event){
return this.mouseDelayMet;
},


_mouseStart:function(event){},
_mouseDrag:function(event){},
_mouseStop:function(event){},
_mouseCapture:function(event){return true;}
};

$.ui.mouse.defaults={
cancel:null,
distance:1,
delay:0
};

})(jQuery);












(function($){

$.extend($.ui,{datepicker:{version:"1.7.1"}});

var PROP_NAME='datepicker';






function Datepicker(){
this.debug=false;
this._curInst=null;
this._keyEvent=false;
this._disabledInputs=[];
this._datepickerShowing=false;
this._inDialog=false;
this._mainDivId='ui-datepicker-div';
this._inlineClass='ui-datepicker-inline';
this._appendClass='ui-datepicker-append';
this._triggerClass='ui-datepicker-trigger';
this._dialogClass='ui-datepicker-dialog';
this._disableClass='ui-datepicker-disabled';
this._unselectableClass='ui-datepicker-unselectable';
this._currentClass='ui-datepicker-current-day';
this._dayOverClass='ui-datepicker-days-cell-over';
this.regional=[];
this.regional['']={
closeText:'Done',
prevText:'Prev',
nextText:'Next',
currentText:'Today',
monthNames:['January','February','March','April','May','June',
'July','August','September','October','November','December'],
monthNamesShort:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
dayNames:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
dayNamesShort:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
dayNamesMin:['Su','Mo','Tu','We','Th','Fr','Sa'],
dateFormat:'mm/dd/yy',
firstDay:0,
isRTL:false
};
this._defaults={
showOn:'focus',

showAnim:'show',
showOptions:{},
defaultDate:null,

appendText:'',
buttonText:'...',
buttonImage:'',
buttonImageOnly:false,
hideIfNoPrevNext:false,

navigationAsDateFormat:false,
gotoCurrent:false,
changeMonth:false,
changeYear:false,
showMonthAfterYear:false,
yearRange:'-10:+10',

showOtherMonths:false,
calculateWeek:this.iso8601Week,

shortYearCutoff:'+10',


minDate:null,
maxDate:null,
duration:'normal',
beforeShowDay:null,


beforeShow:null,

onSelect:null,
onChangeMonthYear:null,
onClose:null,
numberOfMonths:1,
showCurrentAtPos:0,
stepMonths:1,
stepBigMonths:12,
altField:'',
altFormat:'',
constrainInput:true,
showButtonPanel:false
};
$.extend(this._defaults,this.regional['']);
this.dpDiv=$('<div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible"></div>');
}

$.extend(Datepicker.prototype,{

markerClassName:'hasDatepicker',


log:function(){
if(this.debug)
console.log.apply('',arguments);
},




setDefaults:function(settings){
extendRemove(this._defaults,settings||{});
return this;
},




_attachDatepicker:function(target,settings){

var inlineSettings=null;
for(var attrName in this._defaults){
var attrValue=target.getAttribute('date:'+attrName);
if(attrValue){
inlineSettings=inlineSettings||{};
try{
inlineSettings[attrName]=eval(attrValue);
}catch(err){
inlineSettings[attrName]=attrValue;
}
}
}
var nodeName=target.nodeName.toLowerCase();
var inline=(nodeName=='div'||nodeName=='span');
if(!target.id)
target.id='dp'+(++this.uuid);
var inst=this._newInst($(target),inline);
inst.settings=$.extend({},settings||{},inlineSettings||{});
if(nodeName=='input'){
this._connectDatepicker(target,inst);
}else if(inline){
this._inlineDatepicker(target,inst);
}
},


_newInst:function(target,inline){
var id=target[0].id.replace(/([:\[\]\.])/g,'\\\\$1');
return{id:id,input:target,
selectedDay:0,selectedMonth:0,selectedYear:0,
drawMonth:0,drawYear:0,
inline:inline,
dpDiv:(!inline?this.dpDiv:
$('<div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))};
},


_connectDatepicker:function(target,inst){
var input=$(target);
inst.trigger=$([]);
if(input.hasClass(this.markerClassName))
return;
var appendText=this._get(inst,'appendText');
var isRTL=this._get(inst,'isRTL');
if(appendText)
input[isRTL?'before':'after']('<span class="'+this._appendClass+'">'+appendText+'</span>');
var showOn=this._get(inst,'showOn');
if(showOn=='focus'||showOn=='both')
input.focus(this._showDatepicker);
if(showOn=='button'||showOn=='both'){
var buttonText=this._get(inst,'buttonText');
var buttonImage=this._get(inst,'buttonImage');
inst.trigger=$(this._get(inst,'buttonImageOnly')?
$('<img/>').addClass(this._triggerClass).
attr({src:buttonImage,alt:buttonText,title:buttonText}):
$('<button type="button"></button>').addClass(this._triggerClass).
html(buttonImage==''?buttonText:$('<img/>').attr(
{src:buttonImage,alt:buttonText,title:buttonText})));
input[isRTL?'before':'after'](inst.trigger);
inst.trigger.click(function(){
if($.datepicker._datepickerShowing&&$.datepicker._lastInput==target)
$.datepicker._hideDatepicker();
else
$.datepicker._showDatepicker(target);
return false;
});
}
input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).
bind("setData.datepicker",function(event,key,value){
inst.settings[key]=value;
}).bind("getData.datepicker",function(event,key){
return this._get(inst,key);
});
$.data(target,PROP_NAME,inst);
},


_inlineDatepicker:function(target,inst){
var divSpan=$(target);
if(divSpan.hasClass(this.markerClassName))
return;
divSpan.addClass(this.markerClassName).append(inst.dpDiv).
bind("setData.datepicker",function(event,key,value){
inst.settings[key]=value;
}).bind("getData.datepicker",function(event,key){
return this._get(inst,key);
});
$.data(target,PROP_NAME,inst);
this._setDate(inst,this._getDefaultDate(inst));
this._updateDatepicker(inst);
this._updateAlternate(inst);
},










_dialogDatepicker:function(input,dateText,onSelect,settings,pos){
var inst=this._dialogInst;
if(!inst){
var id='dp'+(++this.uuid);
this._dialogInput=$('<input type="text" id="'+id+
'" size="1" style="position: absolute; top: -100px;"/>');
this._dialogInput.keydown(this._doKeyDown);
$('body').append(this._dialogInput);
inst=this._dialogInst=this._newInst(this._dialogInput,false);
inst.settings={};
$.data(this._dialogInput[0],PROP_NAME,inst);
}
extendRemove(inst.settings,settings||{});
this._dialogInput.val(dateText);

this._pos=(pos?(pos.length?pos:[pos.pageX,pos.pageY]):null);
if(!this._pos){
var browserWidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;
var browserHeight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;
var scrollX=document.documentElement.scrollLeft||document.body.scrollLeft;
var scrollY=document.documentElement.scrollTop||document.body.scrollTop;
this._pos=
[(browserWidth/2)-100+scrollX,(browserHeight/2)-150+scrollY];
}


this._dialogInput.css('left',this._pos[0]+'px').css('top',this._pos[1]+'px');
inst.settings.onSelect=onSelect;
this._inDialog=true;
this.dpDiv.addClass(this._dialogClass);
this._showDatepicker(this._dialogInput[0]);
if($.blockUI)
$.blockUI(this.dpDiv);
$.data(this._dialogInput[0],PROP_NAME,inst);
return this;
},



_destroyDatepicker:function(target){
var $target=$(target);
var inst=$.data(target,PROP_NAME);
if(!$target.hasClass(this.markerClassName)){
return;
}
var nodeName=target.nodeName.toLowerCase();
$.removeData(target,PROP_NAME);
if(nodeName=='input'){
inst.trigger.remove();
$target.siblings('.'+this._appendClass).remove().end().
removeClass(this.markerClassName).
unbind('focus',this._showDatepicker).
unbind('keydown',this._doKeyDown).
unbind('keypress',this._doKeyPress);
}else if(nodeName=='div'||nodeName=='span')
$target.removeClass(this.markerClassName).empty();
},



_enableDatepicker:function(target){
var $target=$(target);
var inst=$.data(target,PROP_NAME);
if(!$target.hasClass(this.markerClassName)){
return;
}
var nodeName=target.nodeName.toLowerCase();
if(nodeName=='input'){
target.disabled=false;
inst.trigger.filter("button").
each(function(){this.disabled=false;}).end().
filter("img").
css({opacity:'1.0',cursor:''});
}
else if(nodeName=='div'||nodeName=='span'){
var inline=$target.children('.'+this._inlineClass);
inline.children().removeClass('ui-state-disabled');
}
this._disabledInputs=$.map(this._disabledInputs,
function(value){return(value==target?null:value);});
},



_disableDatepicker:function(target){
var $target=$(target);
var inst=$.data(target,PROP_NAME);
if(!$target.hasClass(this.markerClassName)){
return;
}
var nodeName=target.nodeName.toLowerCase();
if(nodeName=='input'){
target.disabled=true;
inst.trigger.filter("button").
each(function(){this.disabled=true;}).end().
filter("img").
css({opacity:'0.5',cursor:'default'});
}
else if(nodeName=='div'||nodeName=='span'){
var inline=$target.children('.'+this._inlineClass);
inline.children().addClass('ui-state-disabled');
}
this._disabledInputs=$.map(this._disabledInputs,
function(value){return(value==target?null:value);});
this._disabledInputs[this._disabledInputs.length]=target;
},




_isDisabledDatepicker:function(target){
if(!target){
return false;
}
for(var i=0;i<this._disabledInputs.length;i++){
if(this._disabledInputs[i]==target)
return true;
}
return false;
},





_getInst:function(target){
try{
return $.data(target,PROP_NAME);
}
catch(err){
throw'Missing instance data for this datepicker';
}
},






_optionDatepicker:function(target,name,value){
var settings=name||{};
if(typeof name=='string'){
settings={};
settings[name]=value;
}
var inst=this._getInst(target);
if(inst){
if(this._curInst==inst){
this._hideDatepicker(null);
}
extendRemove(inst.settings,settings);
var date=new Date();
extendRemove(inst,{rangeStart:null,
endDay:null,endMonth:null,endYear:null,
selectedDay:date.getDate(),selectedMonth:date.getMonth(),
selectedYear:date.getFullYear(),
currentDay:date.getDate(),currentMonth:date.getMonth(),
currentYear:date.getFullYear(),
drawMonth:date.getMonth(),drawYear:date.getFullYear()});
this._updateDatepicker(inst);
}
},


_changeDatepicker:function(target,name,value){
this._optionDatepicker(target,name,value);
},



_refreshDatepicker:function(target){
var inst=this._getInst(target);
if(inst){
this._updateDatepicker(inst);
}
},





_setDateDatepicker:function(target,date,endDate){
var inst=this._getInst(target);
if(inst){
this._setDate(inst,date,endDate);
this._updateDatepicker(inst);
this._updateAlternate(inst);
}
},





_getDateDatepicker:function(target){
var inst=this._getInst(target);
if(inst&&!inst.inline)
this._setDateFromField(inst);
return(inst?this._getDate(inst):null);
},


_doKeyDown:function(event){
var inst=$.datepicker._getInst(event.target);
var handled=true;
var isRTL=inst.dpDiv.is('.ui-datepicker-rtl');
inst._keyEvent=true;
if($.datepicker._datepickerShowing)
switch(event.keyCode){
case 9:$.datepicker._hideDatepicker(null,'');
break;
case 13:var sel=$('td.'+$.datepicker._dayOverClass+
', td.'+$.datepicker._currentClass,inst.dpDiv);
if(sel[0])
$.datepicker._selectDay(event.target,inst.selectedMonth,inst.selectedYear,sel[0]);
else
$.datepicker._hideDatepicker(null,$.datepicker._get(inst,'duration'));
return false;
break;
case 27:$.datepicker._hideDatepicker(null,$.datepicker._get(inst,'duration'));
break;
case 33:$.datepicker._adjustDate(event.target,(event.ctrlKey?
-$.datepicker._get(inst,'stepBigMonths'):
-$.datepicker._get(inst,'stepMonths')),'M');
break;
case 34:$.datepicker._adjustDate(event.target,(event.ctrlKey?
+$.datepicker._get(inst,'stepBigMonths'):
+$.datepicker._get(inst,'stepMonths')),'M');
break;
case 35:if(event.ctrlKey||event.metaKey)$.datepicker._clearDate(event.target);
handled=event.ctrlKey||event.metaKey;
break;
case 36:if(event.ctrlKey||event.metaKey)$.datepicker._gotoToday(event.target);
handled=event.ctrlKey||event.metaKey;
break;
case 37:if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,(isRTL?+1:-1),'D');
handled=event.ctrlKey||event.metaKey;

if(event.originalEvent.altKey)$.datepicker._adjustDate(event.target,(event.ctrlKey?
-$.datepicker._get(inst,'stepBigMonths'):
-$.datepicker._get(inst,'stepMonths')),'M');

break;
case 38:if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,-7,'D');
handled=event.ctrlKey||event.metaKey;
break;
case 39:if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,(isRTL?-1:+1),'D');
handled=event.ctrlKey||event.metaKey;

if(event.originalEvent.altKey)$.datepicker._adjustDate(event.target,(event.ctrlKey?
+$.datepicker._get(inst,'stepBigMonths'):
+$.datepicker._get(inst,'stepMonths')),'M');

break;
case 40:if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,+7,'D');
handled=event.ctrlKey||event.metaKey;
break;
default:handled=false;
}
else if(event.keyCode==36&&event.ctrlKey)
$.datepicker._showDatepicker(this);
else{
handled=false;
}
if(handled){
event.preventDefault();
event.stopPropagation();
}
},


_doKeyPress:function(event){
var inst=$.datepicker._getInst(event.target);
if($.datepicker._get(inst,'constrainInput')){
var chars=$.datepicker._possibleChars($.datepicker._get(inst,'dateFormat'));
var chr=String.fromCharCode(event.charCode==undefined?event.keyCode:event.charCode);
return event.ctrlKey||(chr<' '||!chars||chars.indexOf(chr)>-1);
}
},




_showDatepicker:function(input){
input=input.target||input;
if(input.nodeName.toLowerCase()!='input')
input=$('input',input.parentNode)[0];
if($.datepicker._isDisabledDatepicker(input)||$.datepicker._lastInput==input)
return;
var inst=$.datepicker._getInst(input);
var beforeShow=$.datepicker._get(inst,'beforeShow');
extendRemove(inst.settings,(beforeShow?beforeShow.apply(input,[input,inst]):{}));
$.datepicker._hideDatepicker(null,'');
$.datepicker._lastInput=input;
$.datepicker._setDateFromField(inst);
if($.datepicker._inDialog)
input.value='';
if(!$.datepicker._pos){
$.datepicker._pos=$.datepicker._findPos(input);
$.datepicker._pos[1]+=input.offsetHeight;
}
var isFixed=false;
$(input).parents().each(function(){
isFixed|=$(this).css('position')=='fixed';
return!isFixed;
});
if(isFixed&&$.browser.opera){
$.datepicker._pos[0]-=document.documentElement.scrollLeft;
$.datepicker._pos[1]-=document.documentElement.scrollTop;
}
var offset={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};
$.datepicker._pos=null;
inst.rangeStart=null;

inst.dpDiv.css({position:'absolute',display:'block',top:'-1000px'});
$.datepicker._updateDatepicker(inst);


offset=$.datepicker._checkOffset(inst,offset,isFixed);
inst.dpDiv.css({position:($.datepicker._inDialog&&$.blockUI?
'static':(isFixed?'fixed':'absolute')),display:'none',
left:offset.left+'px',top:offset.top+'px'});
if(!inst.inline){
var showAnim=$.datepicker._get(inst,'showAnim')||'show';
var duration=$.datepicker._get(inst,'duration');
var postProcess=function(){
$.datepicker._datepickerShowing=true;
if($.browser.msie&&parseInt($.browser.version,10)<7)
$('iframe.ui-datepicker-cover').css({width:inst.dpDiv.width()+4,
height:inst.dpDiv.height()+4});
};
if($.effects&&$.effects[showAnim])
inst.dpDiv.show(showAnim,$.datepicker._get(inst,'showOptions'),duration,postProcess);
else
inst.dpDiv[showAnim](duration,postProcess);
if(duration=='')
postProcess();
if(inst.input[0].type!='hidden')
inst.input[0].focus();
$.datepicker._curInst=inst;
}
},


_updateDatepicker:function(inst){
var dims={width:inst.dpDiv.width()+4,
height:inst.dpDiv.height()+4};
var self=this;
inst.dpDiv.empty().append(this._generateHTML(inst))
.find('iframe.ui-datepicker-cover').
css({width:dims.width,height:dims.height})
.end()
.find('button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a')
.bind('mouseout',function(){
$(this).removeClass('ui-state-hover');
if(this.className.indexOf('ui-datepicker-prev')!=-1)$(this).removeClass('ui-datepicker-prev-hover');
if(this.className.indexOf('ui-datepicker-next')!=-1)$(this).removeClass('ui-datepicker-next-hover');
})
.bind('mouseover',function(){
if(!self._isDisabledDatepicker(inst.inline?inst.dpDiv.parent()[0]:inst.input[0])){
$(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
$(this).addClass('ui-state-hover');
if(this.className.indexOf('ui-datepicker-prev')!=-1)$(this).addClass('ui-datepicker-prev-hover');
if(this.className.indexOf('ui-datepicker-next')!=-1)$(this).addClass('ui-datepicker-next-hover');
}
})
.end()
.find('.'+this._dayOverClass+' a')
.trigger('mouseover')
.end();
var numMonths=this._getNumberOfMonths(inst);
var cols=numMonths[1];
var width=17;
if(cols>1){
inst.dpDiv.addClass('ui-datepicker-multi-'+cols).css('width',(width*cols)+'em');
}else{
inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
}
inst.dpDiv[(numMonths[0]!=1||numMonths[1]!=1?'add':'remove')+
'Class']('ui-datepicker-multi');
inst.dpDiv[(this._get(inst,'isRTL')?'add':'remove')+
'Class']('ui-datepicker-rtl');
if(inst.input&&inst.input[0].type!='hidden'&&inst==$.datepicker._curInst)
$(inst.input[0]).focus();
},


_checkOffset:function(inst,offset,isFixed){
var dpWidth=inst.dpDiv.outerWidth();
var dpHeight=inst.dpDiv.outerHeight();
var inputWidth=inst.input?inst.input.outerWidth():0;
var inputHeight=inst.input?inst.input.outerHeight():0;
var viewWidth=(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)+$(document).scrollLeft();
var viewHeight=(window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight)+$(document).scrollTop();

offset.left-=(this._get(inst,'isRTL')?(dpWidth-inputWidth):0);
offset.left-=(isFixed&&offset.left==inst.input.offset().left)?$(document).scrollLeft():0;
offset.top-=(isFixed&&offset.top==(inst.input.offset().top+inputHeight))?$(document).scrollTop():0;


offset.left-=(offset.left+dpWidth>viewWidth&&viewWidth>dpWidth)?Math.abs(offset.left+dpWidth-viewWidth):0;
offset.top-=(offset.top+dpHeight>viewHeight&&viewHeight>dpHeight)?Math.abs(offset.top+dpHeight+inputHeight*2-viewHeight):0;

return offset;
},


_findPos:function(obj){
while(obj&&(obj.type=='hidden'||obj.nodeType!=1)){
obj=obj.nextSibling;
}
var position=$(obj).offset();
return[position.left,position.top];
},




_hideDatepicker:function(input,duration){
var inst=this._curInst;
if(!inst||(input&&inst!=$.data(input,PROP_NAME)))
return;
if(inst.stayOpen)
this._selectDate('#'+inst.id,this._formatDate(inst,
inst.currentDay,inst.currentMonth,inst.currentYear));
inst.stayOpen=false;
if(this._datepickerShowing){
duration=(duration!=null?duration:this._get(inst,'duration'));
var showAnim=this._get(inst,'showAnim');
var postProcess=function(){
$.datepicker._tidyDialog(inst);
};
if(duration!=''&&$.effects&&$.effects[showAnim])
inst.dpDiv.hide(showAnim,$.datepicker._get(inst,'showOptions'),
duration,postProcess);
else
inst.dpDiv[(duration==''?'hide':(showAnim=='slideDown'?'slideUp':
(showAnim=='fadeIn'?'fadeOut':'hide')))](duration,postProcess);
if(duration=='')
this._tidyDialog(inst);
var onClose=this._get(inst,'onClose');
if(onClose)
onClose.apply((inst.input?inst.input[0]:null),
[(inst.input?inst.input.val():''),inst]);
this._datepickerShowing=false;
this._lastInput=null;
if(this._inDialog){
this._dialogInput.css({position:'absolute',left:'0',top:'-100px'});
if($.blockUI){
$.unblockUI();
$('body').append(this.dpDiv);
}
}
this._inDialog=false;
}
this._curInst=null;
},


_tidyDialog:function(inst){
inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
},


_checkExternalClick:function(event){
if(!$.datepicker._curInst)
return;
var $target=$(event.target);
if(($target.parents('#'+$.datepicker._mainDivId).length==0)&&
!$target.hasClass($.datepicker.markerClassName)&&
!$target.hasClass($.datepicker._triggerClass)&&
$.datepicker._datepickerShowing&&!($.datepicker._inDialog&&$.blockUI))
$.datepicker._hideDatepicker(null,'');
},


_adjustDate:function(id,offset,period){
var target=$(id);
var inst=this._getInst(target[0]);
if(this._isDisabledDatepicker(target[0])){
return;
}
this._adjustInstDate(inst,offset+
(period=='M'?this._get(inst,'showCurrentAtPos'):0),
period);
this._updateDatepicker(inst);
},


_gotoToday:function(id){
var target=$(id);
var inst=this._getInst(target[0]);
if(this._get(inst,'gotoCurrent')&&inst.currentDay){
inst.selectedDay=inst.currentDay;
inst.drawMonth=inst.selectedMonth=inst.currentMonth;
inst.drawYear=inst.selectedYear=inst.currentYear;
}
else{
var date=new Date();
inst.selectedDay=date.getDate();
inst.drawMonth=inst.selectedMonth=date.getMonth();
inst.drawYear=inst.selectedYear=date.getFullYear();
}
this._notifyChange(inst);
this._adjustDate(target);
},


_selectMonthYear:function(id,select,period){
var target=$(id);
var inst=this._getInst(target[0]);
inst._selectingMonthYear=false;
inst['selected'+(period=='M'?'Month':'Year')]=
inst['draw'+(period=='M'?'Month':'Year')]=
parseInt(select.options[select.selectedIndex].value,10);
this._notifyChange(inst);
this._adjustDate(target);
},


_clickMonthYear:function(id){
var target=$(id);
var inst=this._getInst(target[0]);
if(inst.input&&inst._selectingMonthYear&&!$.browser.msie)
inst.input[0].focus();
inst._selectingMonthYear=!inst._selectingMonthYear;
},


_selectDay:function(id,month,year,td){
var target=$(id);
if($(td).hasClass(this._unselectableClass)||this._isDisabledDatepicker(target[0])){
return;
}
var inst=this._getInst(target[0]);
inst.selectedDay=inst.currentDay=$('a',td).html();
inst.selectedMonth=inst.currentMonth=month;
inst.selectedYear=inst.currentYear=year;
if(inst.stayOpen){
inst.endDay=inst.endMonth=inst.endYear=null;
}
this._selectDate(id,this._formatDate(inst,
inst.currentDay,inst.currentMonth,inst.currentYear));
if(inst.stayOpen){
inst.rangeStart=this._daylightSavingAdjust(
new Date(inst.currentYear,inst.currentMonth,inst.currentDay));
this._updateDatepicker(inst);
}
},


_clearDate:function(id){
var target=$(id);
var inst=this._getInst(target[0]);
inst.stayOpen=false;
inst.endDay=inst.endMonth=inst.endYear=inst.rangeStart=null;
this._selectDate(target,'');
},


_selectDate:function(id,dateStr){
var target=$(id);
var inst=this._getInst(target[0]);
dateStr=(dateStr!=null?dateStr:this._formatDate(inst));
if(inst.input)
inst.input.val(dateStr);
this._updateAlternate(inst);
var onSelect=this._get(inst,'onSelect');
if(onSelect)
onSelect.apply((inst.input?inst.input[0]:null),[dateStr,inst]);
else if(inst.input)
inst.input.trigger('change');
if(inst.inline)
this._updateDatepicker(inst);
else if(!inst.stayOpen){
this._hideDatepicker(null,this._get(inst,'duration'));
this._lastInput=inst.input[0];
if(typeof(inst.input[0])!='object')
inst.input[0].focus();
this._lastInput=null;
}
},


_updateAlternate:function(inst){
var altField=this._get(inst,'altField');
if(altField){
var altFormat=this._get(inst,'altFormat')||this._get(inst,'dateFormat');
var date=this._getDate(inst);
dateStr=this.formatDate(altFormat,date,this._getFormatConfig(inst));
$(altField).each(function(){$(this).val(dateStr);});
}
},




noWeekends:function(date){
var day=date.getDay();
return[(day>0&&day<6),''];
},




iso8601Week:function(date){
var checkDate=new Date(date.getFullYear(),date.getMonth(),date.getDate());
var firstMon=new Date(checkDate.getFullYear(),1-1,4);
var firstDay=firstMon.getDay()||7;
firstMon.setDate(firstMon.getDate()+1-firstDay);
if(firstDay<4&&checkDate<firstMon){
checkDate.setDate(checkDate.getDate()-3);
return $.datepicker.iso8601Week(checkDate);
}else if(checkDate>new Date(checkDate.getFullYear(),12-1,28)){
firstDay=new Date(checkDate.getFullYear()+1,1-1,4).getDay()||7;
if(firstDay>4&&(checkDate.getDay()||7)<firstDay-3){
return 1;
}
}
return Math.floor(((checkDate-firstMon)/86400000)/7)+1;
},













parseDate:function(format,value,settings){
if(format==null||value==null)
throw'Invalid arguments';
value=(typeof value=='object'?value.toString():value+'');
if(value=='')
return null;
var shortYearCutoff=(settings?settings.shortYearCutoff:null)||this._defaults.shortYearCutoff;
var dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort;
var dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames;
var monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort;
var monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames;
var year=-1;
var month=-1;
var day=-1;
var doy=-1;
var literal=false;

var lookAhead=function(match){
var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)==match);
if(matches)
iFormat++;
return matches;
};

var getNumber=function(match){
lookAhead(match);
var origSize=(match=='@'?14:(match=='y'?4:(match=='o'?3:2)));
var size=origSize;
var num=0;
while(size>0&&iValue<value.length&&
value.charAt(iValue)>='0'&&value.charAt(iValue)<='9'){
num=num*10+parseInt(value.charAt(iValue++),10);
size--;
}
if(size==origSize)
throw'Missing number at position '+iValue;
return num;
};

var getName=function(match,shortNames,longNames){
var names=(lookAhead(match)?longNames:shortNames);
var size=0;
for(var j=0;j<names.length;j++)
size=Math.max(size,names[j].length);
var name='';
var iInit=iValue;
while(size>0&&iValue<value.length){
name+=value.charAt(iValue++);
for(var i=0;i<names.length;i++)
if(name==names[i])
return i+1;
size--;
}
throw'Unknown name at position '+iInit;
};

var checkLiteral=function(){
if(value.charAt(iValue)!=format.charAt(iFormat))
throw'Unexpected literal at position '+iValue;
iValue++;
};
var iValue=0;
for(var iFormat=0;iFormat<format.length;iFormat++){
if(literal)
if(format.charAt(iFormat)=="'"&&!lookAhead("'"))
literal=false;
else
checkLiteral();
else
switch(format.charAt(iFormat)){
case'd':
day=getNumber('d');
break;
case'D':
getName('D',dayNamesShort,dayNames);
break;
case'o':
doy=getNumber('o');
break;
case'm':
month=getNumber('m');
break;
case'M':
month=getName('M',monthNamesShort,monthNames);
break;
case'y':
year=getNumber('y');
break;
case'@':
var date=new Date(getNumber('@'));
year=date.getFullYear();
month=date.getMonth()+1;
day=date.getDate();
break;
case"'":
if(lookAhead("'"))
checkLiteral();
else
literal=true;
break;
default:
checkLiteral();
}
}
if(year==-1)
year=new Date().getFullYear();
else if(year<100)
year+=new Date().getFullYear()-new Date().getFullYear()%100+
(year<=shortYearCutoff?0:-100);
if(doy>-1){
month=1;
day=doy;
do{
var dim=this._getDaysInMonth(year,month-1);
if(day<=dim)
break;
month++;
day-=dim;
}while(true);
}
var date=this._daylightSavingAdjust(new Date(year,month-1,day));
if(date.getFullYear()!=year||date.getMonth()+1!=month||date.getDate()!=day)
throw'Invalid date';
return date;
},


ATOM:'yy-mm-dd',
COOKIE:'D, dd M yy',
ISO_8601:'yy-mm-dd',
RFC_822:'D, d M y',
RFC_850:'DD, dd-M-y',
RFC_1036:'D, d M y',
RFC_1123:'D, d M yy',
RFC_2822:'D, d M yy',
RSS:'D, d M y',
TIMESTAMP:'@',
W3C:'yy-mm-dd',



























formatDate:function(format,date,settings){
if(!date)
return'';
var dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort;
var dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames;
var monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort;
var monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames;

var lookAhead=function(match){
var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)==match);
if(matches)
iFormat++;
return matches;
};

var formatNumber=function(match,value,len){
var num=''+value;
if(lookAhead(match))
while(num.length<len)
num='0'+num;
return num;
};

var formatName=function(match,value,shortNames,longNames){
return(lookAhead(match)?longNames[value]:shortNames[value]);
};
var output='';
var literal=false;
if(date)
for(var iFormat=0;iFormat<format.length;iFormat++){
if(literal)
if(format.charAt(iFormat)=="'"&&!lookAhead("'"))
literal=false;
else
output+=format.charAt(iFormat);
else
switch(format.charAt(iFormat)){
case'd':
output+=formatNumber('d',date.getDate(),2);
break;
case'D':
output+=formatName('D',date.getDay(),dayNamesShort,dayNames);
break;
case'o':
var doy=date.getDate();
for(var m=date.getMonth()-1;m>=0;m--)
doy+=this._getDaysInMonth(date.getFullYear(),m);
output+=formatNumber('o',doy,3);
break;
case'm':
output+=formatNumber('m',date.getMonth()+1,2);
break;
case'M':
output+=formatName('M',date.getMonth(),monthNamesShort,monthNames);
break;
case'y':
output+=(lookAhead('y')?date.getFullYear():
(date.getYear()%100<10?'0':'')+date.getYear()%100);
break;
case'@':
output+=date.getTime();
break;
case"'":
if(lookAhead("'"))
output+="'";
else
literal=true;
break;
default:
output+=format.charAt(iFormat);
}
}
return output;
},


_possibleChars:function(format){
var chars='';
var literal=false;
for(var iFormat=0;iFormat<format.length;iFormat++)
if(literal)
if(format.charAt(iFormat)=="'"&&!lookAhead("'"))
literal=false;
else
chars+=format.charAt(iFormat);
else
switch(format.charAt(iFormat)){
case'd':case'm':case'y':case'@':
chars+='0123456789';
break;
case'D':case'M':
return null;
case"'":
if(lookAhead("'"))
chars+="'";
else
literal=true;
break;
default:
chars+=format.charAt(iFormat);
}
return chars;
},


_get:function(inst,name){
return inst.settings[name]!==undefined?
inst.settings[name]:this._defaults[name];
},


_setDateFromField:function(inst){
var dateFormat=this._get(inst,'dateFormat');
var dates=inst.input?inst.input.val():null;
inst.endDay=inst.endMonth=inst.endYear=null;
var date=defaultDate=this._getDefaultDate(inst);
var settings=this._getFormatConfig(inst);
try{
date=this.parseDate(dateFormat,dates,settings)||defaultDate;
}catch(event){
this.log(event);
date=defaultDate;
}
inst.selectedDay=date.getDate();
inst.drawMonth=inst.selectedMonth=date.getMonth();
inst.drawYear=inst.selectedYear=date.getFullYear();
inst.currentDay=(dates?date.getDate():0);
inst.currentMonth=(dates?date.getMonth():0);
inst.currentYear=(dates?date.getFullYear():0);
this._adjustInstDate(inst);
},


_getDefaultDate:function(inst){
var date=this._determineDate(this._get(inst,'defaultDate'),new Date());
var minDate=this._getMinMaxDate(inst,'min',true);
var maxDate=this._getMinMaxDate(inst,'max');
date=(minDate&&date<minDate?minDate:date);
date=(maxDate&&date>maxDate?maxDate:date);
return date;
},


_determineDate:function(date,defaultDate){
var offsetNumeric=function(offset){
var date=new Date();
date.setDate(date.getDate()+offset);
return date;
};
var offsetString=function(offset,getDaysInMonth){
var date=new Date();
var year=date.getFullYear();
var month=date.getMonth();
var day=date.getDate();
var pattern=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
var matches=pattern.exec(offset);
while(matches){
switch(matches[2]||'d'){
case'd':case'D':
day+=parseInt(matches[1],10);break;
case'w':case'W':
day+=parseInt(matches[1],10)*7;break;
case'm':case'M':
month+=parseInt(matches[1],10);
day=Math.min(day,getDaysInMonth(year,month));
break;
case'y':case'Y':
year+=parseInt(matches[1],10);
day=Math.min(day,getDaysInMonth(year,month));
break;
}
matches=pattern.exec(offset);
}
return new Date(year,month,day);
};
date=(date==null?defaultDate:
(typeof date=='string'?offsetString(date,this._getDaysInMonth):
(typeof date=='number'?(isNaN(date)?defaultDate:offsetNumeric(date)):date)));
date=(date&&date.toString()=='Invalid Date'?defaultDate:date);
if(date){
date.setHours(0);
date.setMinutes(0);
date.setSeconds(0);
date.setMilliseconds(0);
}
return this._daylightSavingAdjust(date);
},







_daylightSavingAdjust:function(date){
if(!date)return null;
date.setHours(date.getHours()>12?date.getHours()+2:0);
return date;
},


_setDate:function(inst,date,endDate){
var clear=!(date);
var origMonth=inst.selectedMonth;
var origYear=inst.selectedYear;
date=this._determineDate(date,new Date());
inst.selectedDay=inst.currentDay=date.getDate();
inst.drawMonth=inst.selectedMonth=inst.currentMonth=date.getMonth();
inst.drawYear=inst.selectedYear=inst.currentYear=date.getFullYear();
if(origMonth!=inst.selectedMonth||origYear!=inst.selectedYear)
this._notifyChange(inst);
this._adjustInstDate(inst);
if(inst.input){
inst.input.val(clear?'':this._formatDate(inst));
}
},


_getDate:function(inst){
var startDate=(!inst.currentYear||(inst.input&&inst.input.val()=='')?null:
this._daylightSavingAdjust(new Date(
inst.currentYear,inst.currentMonth,inst.currentDay)));
return startDate;
},


_generateHTML:function(inst){
var today=new Date();
today=this._daylightSavingAdjust(
new Date(today.getFullYear(),today.getMonth(),today.getDate()));
var isRTL=this._get(inst,'isRTL');
var showButtonPanel=this._get(inst,'showButtonPanel');
var hideIfNoPrevNext=this._get(inst,'hideIfNoPrevNext');
var navigationAsDateFormat=this._get(inst,'navigationAsDateFormat');
var numMonths=this._getNumberOfMonths(inst);
var showCurrentAtPos=this._get(inst,'showCurrentAtPos');
var stepMonths=this._get(inst,'stepMonths');
var stepBigMonths=this._get(inst,'stepBigMonths');
var isMultiMonth=(numMonths[0]!=1||numMonths[1]!=1);
var currentDate=this._daylightSavingAdjust((!inst.currentDay?new Date(9999,9,9):
new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
var minDate=this._getMinMaxDate(inst,'min',true);
var maxDate=this._getMinMaxDate(inst,'max');
var drawMonth=inst.drawMonth-showCurrentAtPos;
var drawYear=inst.drawYear;
if(drawMonth<0){
drawMonth+=12;
drawYear--;
}
if(maxDate){
var maxDraw=this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
maxDate.getMonth()-numMonths[1]+1,maxDate.getDate()));
maxDraw=(minDate&&maxDraw<minDate?minDate:maxDraw);
while(this._daylightSavingAdjust(new Date(drawYear,drawMonth,1))>maxDraw){
drawMonth--;
if(drawMonth<0){
drawMonth=11;
drawYear--;
}
}
}
inst.drawMonth=drawMonth;
inst.drawYear=drawYear;
var prevText=this._get(inst,'prevText');
prevText=(!navigationAsDateFormat?prevText:this.formatDate(prevText,
this._daylightSavingAdjust(new Date(drawYear,drawMonth-stepMonths,1)),
this._getFormatConfig(inst)));
var prev=(this._canAdjustMonth(inst,-1,drawYear,drawMonth)?
'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery.datepicker._adjustDate(\'#'+inst.id+'\', -'+stepMonths+', \'M\');"'+
' title="'+prevText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'e':'w')+'">'+prevText+'</span></a>':
(hideIfNoPrevNext?'':'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+prevText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'e':'w')+'">'+prevText+'</span></a>'));
var nextText=this._get(inst,'nextText');
nextText=(!navigationAsDateFormat?nextText:this.formatDate(nextText,
this._daylightSavingAdjust(new Date(drawYear,drawMonth+stepMonths,1)),
this._getFormatConfig(inst)));
var next=(this._canAdjustMonth(inst,+1,drawYear,drawMonth)?
'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery.datepicker._adjustDate(\'#'+inst.id+'\', +'+stepMonths+', \'M\');"'+
' title="'+nextText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'w':'e')+'">'+nextText+'</span></a>':
(hideIfNoPrevNext?'':'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+nextText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'w':'e')+'">'+nextText+'</span></a>'));
var currentText=this._get(inst,'currentText');
var gotoDate=(this._get(inst,'gotoCurrent')&&inst.currentDay?currentDate:today);
currentText=(!navigationAsDateFormat?currentText:
this.formatDate(currentText,gotoDate,this._getFormatConfig(inst)));
var controls=(!inst.inline?'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery.datepicker._hideDatepicker();">'+this._get(inst,'closeText')+'</button>':'');
var buttonPanel=(showButtonPanel)?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(isRTL?controls:'')+
(this._isInRange(inst,gotoDate)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery.datepicker._gotoToday(\'#'+inst.id+'\');"'+
'>'+currentText+'</button>':'')+(isRTL?'':controls)+'</div>':'';
var firstDay=parseInt(this._get(inst,'firstDay'),10);
firstDay=(isNaN(firstDay)?0:firstDay);
var dayNames=this._get(inst,'dayNames');
var dayNamesShort=this._get(inst,'dayNamesShort');
var dayNamesMin=this._get(inst,'dayNamesMin');
var monthNames=this._get(inst,'monthNames');
var monthNamesShort=this._get(inst,'monthNamesShort');
var beforeShowDay=this._get(inst,'beforeShowDay');
var showOtherMonths=this._get(inst,'showOtherMonths');
var calculateWeek=this._get(inst,'calculateWeek')||this.iso8601Week;
var endDate=inst.endDay?this._daylightSavingAdjust(
new Date(inst.endYear,inst.endMonth,inst.endDay)):currentDate;
var defaultDate=this._getDefaultDate(inst);
var html='';
for(var row=0;row<numMonths[0];row++){
var group='';
for(var col=0;col<numMonths[1];col++){
var selectedDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));
var cornerClass=' ui-corner-all';
var calender='';
if(isMultiMonth){
calender+='<div class="ui-datepicker-group ui-datepicker-group-';
switch(col){
case 0:calender+='first';cornerClass=' ui-corner-'+(isRTL?'right':'left');break;
case numMonths[1]-1:calender+='last';cornerClass=' ui-corner-'+(isRTL?'left':'right');break;
default:calender+='middle';cornerClass='';break;
}
calender+='">';
}
calender+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+cornerClass+'">'+
(/all|left/.test(cornerClass)&&row==0?(isRTL?next:prev):'')+
(/all|right/.test(cornerClass)&&row==0?(isRTL?prev:next):'')+
this._generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,
selectedDate,row>0||col>0,monthNames,monthNamesShort)+
'</div><table class="ui-datepicker-calendar"><thead>'+
'<tr>';
var thead='';
for(var dow=0;dow<7;dow++){
var day=(dow+firstDay)%7;
thead+='<th'+((dow+firstDay+6)%7>=5?' class="ui-datepicker-week-end"':'')+'>'+
'<span title="'+dayNames[day]+'">'+dayNamesMin[day]+'</span></th>';
}
calender+=thead+'</tr></thead><tbody>';
var daysInMonth=this._getDaysInMonth(drawYear,drawMonth);
if(drawYear==inst.selectedYear&&drawMonth==inst.selectedMonth)
inst.selectedDay=Math.min(inst.selectedDay,daysInMonth);
var leadDays=(this._getFirstDayOfMonth(drawYear,drawMonth)-firstDay+7)%7;
var numRows=(isMultiMonth?6:Math.ceil((leadDays+daysInMonth)/7));
var printDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,1-leadDays));
for(var dRow=0;dRow<numRows;dRow++){
calender+='<tr>';
var tbody='';
for(var dow=0;dow<7;dow++){
var daySettings=(beforeShowDay?
beforeShowDay.apply((inst.input?inst.input[0]:null),[printDate]):[true,'']);
var otherMonth=(printDate.getMonth()!=drawMonth);
var unselectable=otherMonth||!daySettings[0]||
(minDate&&printDate<minDate)||(maxDate&&printDate>maxDate);
tbody+='<td class="'+
((dow+firstDay+6)%7>=5?' ui-datepicker-week-end':'')+
(otherMonth?' ui-datepicker-other-month':'')+
((printDate.getTime()==selectedDate.getTime()&&drawMonth==inst.selectedMonth&&inst._keyEvent)||
(defaultDate.getTime()==printDate.getTime()&&defaultDate.getTime()==selectedDate.getTime())?

' '+this._dayOverClass:'')+
(unselectable?' '+this._unselectableClass+' ui-state-disabled':'')+
(otherMonth&&!showOtherMonths?'':' '+daySettings[1]+
(printDate.getTime()>=currentDate.getTime()&&printDate.getTime()<=endDate.getTime()?
' '+this._currentClass:'')+
(printDate.getTime()==today.getTime()?' ui-datepicker-today':''))+'"'+
((!otherMonth||showOtherMonths)&&daySettings[2]?' title="'+daySettings[2]+'"':'')+
(unselectable?'':' onclick="DP_jQuery.datepicker._selectDay(\'#'+
inst.id+'\','+drawMonth+','+drawYear+', this);return false;"')+'>'+
(otherMonth?(showOtherMonths?printDate.getDate():'&#xa0;'):
(unselectable?'<span class="ui-state-default">'+printDate.getDate()+'</span>':'<a class="ui-state-default'+
(printDate.getTime()==today.getTime()?' ui-state-highlight':'')+
(printDate.getTime()>=currentDate.getTime()&&printDate.getTime()<=endDate.getTime()?
' ui-state-active':'')+
'" href="#">'+printDate.getDate()+'</a>'))+'</td>';
printDate.setDate(printDate.getDate()+1);
printDate=this._daylightSavingAdjust(printDate);
}
calender+=tbody+'</tr>';
}
drawMonth++;
if(drawMonth>11){
drawMonth=0;
drawYear++;
}
calender+='</tbody></table>'+(isMultiMonth?'</div>'+
((numMonths[0]>0&&col==numMonths[1]-1)?'<div class="ui-datepicker-row-break"></div>':''):'');
group+=calender;
}
html+=group;
}
html+=buttonPanel+($.browser.msie&&parseInt($.browser.version,10)<7&&!inst.inline?
'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':'');
inst._keyEvent=false;
return html;
},


_generateMonthYearHeader:function(inst,drawMonth,drawYear,minDate,maxDate,
selectedDate,secondary,monthNames,monthNamesShort){
minDate=(inst.rangeStart&&minDate&&selectedDate<minDate?selectedDate:minDate);
var changeMonth=this._get(inst,'changeMonth');
var changeYear=this._get(inst,'changeYear');
var showMonthAfterYear=this._get(inst,'showMonthAfterYear');
var html='<div class="ui-datepicker-title">';
var monthHtml='';

if(secondary||!changeMonth)
monthHtml+='<span class="ui-datepicker-month">'+monthNames[drawMonth]+'</span> ';
else{
var inMinYear=(minDate&&minDate.getFullYear()==drawYear);
var inMaxYear=(maxDate&&maxDate.getFullYear()==drawYear);
monthHtml+='<select class="ui-datepicker-month" '+
'onchange="DP_jQuery.datepicker._selectMonthYear(\'#'+inst.id+'\', this, \'M\');" '+
'onclick="DP_jQuery.datepicker._clickMonthYear(\'#'+inst.id+'\');"'+
'>';
for(var month=0;month<12;month++){
if((!inMinYear||month>=minDate.getMonth())&&
(!inMaxYear||month<=maxDate.getMonth()))
monthHtml+='<option value="'+month+'"'+
(month==drawMonth?' selected="selected"':'')+
'>'+monthNamesShort[month]+'</option>';
}
monthHtml+='</select>';
}
if(!showMonthAfterYear)
html+=monthHtml+((secondary||changeMonth||changeYear)&&(!(changeMonth&&changeYear))?'&#xa0;':'');

if(secondary||!changeYear)
html+='<span class="ui-datepicker-year">'+drawYear+'</span>';
else{

var years=this._get(inst,'yearRange').split(':');
var year=0;
var endYear=0;
if(years.length!=2){
year=drawYear-10;
endYear=drawYear+10;
}else if(years[0].charAt(0)=='+'||years[0].charAt(0)=='-'){
year=drawYear+parseInt(years[0],10);
endYear=drawYear+parseInt(years[1],10);
}else{
year=parseInt(years[0],10);
endYear=parseInt(years[1],10);
}
year=(minDate?Math.max(year,minDate.getFullYear()):year);
endYear=(maxDate?Math.min(endYear,maxDate.getFullYear()):endYear);
html+='<select class="ui-datepicker-year" '+
'onchange="DP_jQuery.datepicker._selectMonthYear(\'#'+inst.id+'\', this, \'Y\');" '+
'onclick="DP_jQuery.datepicker._clickMonthYear(\'#'+inst.id+'\');"'+
'>';
for(;year<=endYear;year++){
html+='<option value="'+year+'"'+
(year==drawYear?' selected="selected"':'')+
'>'+year+'</option>';
}
html+='</select>';
}
if(showMonthAfterYear)
html+=(secondary||changeMonth||changeYear?'&#xa0;':'')+monthHtml;
html+='</div>';
return html;
},


_adjustInstDate:function(inst,offset,period){
var year=inst.drawYear+(period=='Y'?offset:0);
var month=inst.drawMonth+(period=='M'?offset:0);
var day=Math.min(inst.selectedDay,this._getDaysInMonth(year,month))+
(period=='D'?offset:0);
var date=this._daylightSavingAdjust(new Date(year,month,day));

var minDate=this._getMinMaxDate(inst,'min',true);
var maxDate=this._getMinMaxDate(inst,'max');
date=(minDate&&date<minDate?minDate:date);
date=(maxDate&&date>maxDate?maxDate:date);
inst.selectedDay=date.getDate();
inst.drawMonth=inst.selectedMonth=date.getMonth();
inst.drawYear=inst.selectedYear=date.getFullYear();
if(period=='M'||period=='Y')
this._notifyChange(inst);
},


_notifyChange:function(inst){
var onChange=this._get(inst,'onChangeMonthYear');
if(onChange)
onChange.apply((inst.input?inst.input[0]:null),
[inst.selectedYear,inst.selectedMonth+1,inst]);
},


_getNumberOfMonths:function(inst){
var numMonths=this._get(inst,'numberOfMonths');
return(numMonths==null?[1,1]:(typeof numMonths=='number'?[1,numMonths]:numMonths));
},


_getMinMaxDate:function(inst,minMax,checkRange){
var date=this._determineDate(this._get(inst,minMax+'Date'),null);
return(!checkRange||!inst.rangeStart?date:
(!date||inst.rangeStart>date?inst.rangeStart:date));
},


_getDaysInMonth:function(year,month){
return 32-new Date(year,month,32).getDate();
},


_getFirstDayOfMonth:function(year,month){
return new Date(year,month,1).getDay();
},


_canAdjustMonth:function(inst,offset,curYear,curMonth){
var numMonths=this._getNumberOfMonths(inst);
var date=this._daylightSavingAdjust(new Date(
curYear,curMonth+(offset<0?offset:numMonths[1]),1));
if(offset<0)
date.setDate(this._getDaysInMonth(date.getFullYear(),date.getMonth()));
return this._isInRange(inst,date);
},


_isInRange:function(inst,date){

var newMinDate=(!inst.rangeStart?null:this._daylightSavingAdjust(
new Date(inst.selectedYear,inst.selectedMonth,inst.selectedDay)));
newMinDate=(newMinDate&&inst.rangeStart<newMinDate?inst.rangeStart:newMinDate);
var minDate=newMinDate||this._getMinMaxDate(inst,'min');
var maxDate=this._getMinMaxDate(inst,'max');
return((!minDate||date>=minDate)&&(!maxDate||date<=maxDate));
},


_getFormatConfig:function(inst){
var shortYearCutoff=this._get(inst,'shortYearCutoff');
shortYearCutoff=(typeof shortYearCutoff!='string'?shortYearCutoff:
new Date().getFullYear()%100+parseInt(shortYearCutoff,10));
return{shortYearCutoff:shortYearCutoff,
dayNamesShort:this._get(inst,'dayNamesShort'),dayNames:this._get(inst,'dayNames'),
monthNamesShort:this._get(inst,'monthNamesShort'),monthNames:this._get(inst,'monthNames')};
},


_formatDate:function(inst,day,month,year){
if(!day){
inst.currentDay=inst.selectedDay;
inst.currentMonth=inst.selectedMonth;
inst.currentYear=inst.selectedYear;
}
var date=(day?(typeof day=='object'?day:
this._daylightSavingAdjust(new Date(year,month,day))):
this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
return this.formatDate(this._get(inst,'dateFormat'),date,this._getFormatConfig(inst));
}
});


function extendRemove(target,props){
$.extend(target,props);
for(var name in props)
if(props[name]==null||props[name]==undefined)
target[name]=props[name];
return target;
};


function isArray(a){
return(a&&(($.browser.safari&&typeof a=='object'&&a.length)||
(a.constructor&&a.constructor.toString().match(/\Array\(\)/))));
};





$.fn.datepicker=function(options){


if(!$.datepicker.initialized){
$(document).mousedown($.datepicker._checkExternalClick).
find('body').append($.datepicker.dpDiv);
$.datepicker.initialized=true;
}

var otherArgs=Array.prototype.slice.call(arguments,1);
if(typeof options=='string'&&(options=='isDisabled'||options=='getDate'))
return $.datepicker['_'+options+'Datepicker'].
apply($.datepicker,[this[0]].concat(otherArgs));
return this.each(function(){
typeof options=='string'?
$.datepicker['_'+options+'Datepicker'].
apply($.datepicker,[this].concat(otherArgs)):
$.datepicker._attachDatepicker(this,options);
});
};

$.datepicker=new Datepicker();
$.datepicker.initialized=false;
$.datepicker.uuid=new Date().getTime();
$.datepicker.version="1.7.1";



window.DP_jQuery=$;

})(jQuery);












(function($){

$.widget("ui.progressbar",{

_init:function(){

this.element
.addClass("ui-progressbar"
+" ui-widget"
+" ui-widget-content"
+" ui-corner-all")
.attr({
role:"progressbar",
"aria-valuemin":this._valueMin(),
"aria-valuemax":this._valueMax(),
"aria-valuenow":this._value()
});

this.valueDiv=$('<div class="ui-progressbar-value ui-widget-header ui-corner-left"></div>').appendTo(this.element);

this._refreshValue();

},

destroy:function(){

this.element
.removeClass("ui-progressbar"
+" ui-widget"
+" ui-widget-content"
+" ui-corner-all")
.removeAttr("role")
.removeAttr("aria-valuemin")
.removeAttr("aria-valuemax")
.removeAttr("aria-valuenow")
.removeData("progressbar")
.unbind(".progressbar");

this.valueDiv.remove();

$.widget.prototype.destroy.apply(this,arguments);

},

value:function(newValue){
arguments.length&&this._setData("value",newValue);
return this._value();
},

_setData:function(key,value){

switch(key){
case'value':
this.options.value=value;
this._refreshValue();
this._trigger('change',null,{});
break;
}

$.widget.prototype._setData.apply(this,arguments);

},

_value:function(){

var val=this.options.value;
if(val<this._valueMin())val=this._valueMin();
if(val>this._valueMax())val=this._valueMax();

return val;

},

_valueMin:function(){
var valueMin=0;
return valueMin;
},

_valueMax:function(){
var valueMax=100;
return valueMax;
},

_refreshValue:function(){
var value=this.value();
this.valueDiv[value==this._valueMax()?'addClass':'removeClass']("ui-corner-right");
this.valueDiv.width(value+'%');
this.element.attr("aria-valuenow",value);
}

});

$.extend($.ui.progressbar,{
version:"1.7.1",
defaults:{
value:0
}
});

})(jQuery);





(function($){

function fixTitle($ele){
if($ele.attr('title')||typeof($ele.attr('original-title'))!='string'){
$ele.attr('original-title',$ele.attr('title')||'').removeAttr('title');
}
}

function Tipsy(element,options){
this.$element=$(element);
this.options=options;
this.enabled=true;
fixTitle(this.$element);
}

Tipsy.prototype={
show:function(){
var title=this.getTitle();
if(title&&this.enabled){
var $tip=this.tip();
$tip.find('.tipsy-inner')[this.options.html?'html':'text'](title);



$tip.css({top:0,left:0,visibility:'hidden',display:'block'}).appendTo(document.body);

var pos=$.extend({},this.$element.offset(),{
width:this.$element[0].offsetWidth,
height:this.$element[0].offsetHeight
});

var actualWidth=$tip[0].offsetWidth,actualHeight=$tip[0].offsetHeight;
var gravity=(typeof this.options.gravity=='function')
?this.options.gravity.call(this.$element[0])
:this.options.gravity;

var tp;
switch(gravity.charAt(0)){
case'n':
tp={top:pos.top+pos.height+this.options.offset,left:pos.left+pos.width/2-actualWidth/2};
break;
case's':
tp={top:pos.top-actualHeight-this.options.offset,left:pos.left+pos.width/2-actualWidth/2};
break;
case'e':
tp={top:pos.top+pos.height/2-actualHeight/2,left:pos.left-actualWidth-this.options.offset};
break;
case'w':
tp={top:pos.top+pos.height/2-actualHeight/2,left:pos.left+pos.width+this.options.offset};
break;
}

if(gravity.length==2){
if(gravity.charAt(1)=='w'){
tp.left=pos.left+pos.width/2-15;
}else{
tp.left=pos.left+pos.width/2-actualWidth+15;
}
}

$tip.css(tp).addClass('tipsy-'+gravity);

if(this.options.fade){
$tip.stop().css({opacity:0,display:'block',visibility:'visible'}).animate({opacity:this.options.opacity});
}else{
$tip.css({visibility:'visible',opacity:this.options.opacity});
}
}
},

hide:function(){
if(!this.sticky){
if(this.options.fade){
this.tip().stop().fadeOut(function(){$(this).hide();});
}else{
this.tip().hide();
}
}
},

getTitle:function(){
var title,$e=this.$element,o=this.options;
fixTitle($e);
var title,o=this.options;
if(typeof o.title=='string'){
title=$e.attr(o.title=='title'?'original-title':o.title);
title=(''+title).replace(/(^\s*|\s*$)/,"");
}else if(typeof o.title=='function'){
title=o.title.call($e[0]);
}
return title||o.fallback;
},

tip:function(){
var type='tipsy-'+this.options.type;
var shadow=this.options.shadow?'shadow':'';
if(!this.$tip){
this.$tip=$('<div class="tipsy '+type+'"></div>')
.html('<div class="tipsy-arrow"></div><div class="tipsy-inner '+shadow+'"/></div>');
}
return this.$tip;
},

validate:function(){
if(!this.$element[0].parentNode)this.hide();
},

enable:function(){this.enabled=true;},
disable:function(){this.enabled=false;},
toggleEnabled:function(){this.enabled=!this.enabled;}
};

$.fn.tipsy=function(options){

if(options===true){
return this.data('tipsy');
}else if(typeof options=='string'){
return this.data('tipsy')[options]();
}

options=$.extend({},$.fn.tipsy.defaults,options);

function get(ele){
var tipsy=$.data(ele,'tipsy');
if(!tipsy){
tipsy=new Tipsy(ele,$.fn.tipsy.elementOptions(ele,options));
$.data(ele,'tipsy',tipsy);
}
return tipsy;
}

function enter(){
var tipsy=get(this);
tipsy.hoverState='in';
if(options.delayIn==0){
tipsy.show();
}else{
setTimeout(function(){if(tipsy.hoverState=='in')tipsy.show();},options.delayIn);
}
};

function leave(){
var tipsy=get(this);
tipsy.hoverState='out';
if(options.delayOut==0){
tipsy.hide();
}else{
setTimeout(function(){if(tipsy.hoverState=='out')tipsy.hide();},options.delayOut);
}
};

if(!options.live)this.each(function(){get(this);});

if(options.trigger!='manual'){
var binder=options.live?'live':'bind',
eventIn=options.trigger=='hover'?'mouseenter':'focus',
eventOut=options.trigger=='hover'?'mouseleave':'blur';
this[binder](eventIn,enter)[binder](eventOut,leave);
}

return this;

};

$.fn.tipsy.defaults={
delayIn:0,
delayOut:0,
fade:false,
fallback:'',
gravity:'n',
html:false,
live:false,
offset:0,
opacity:1.0,
title:'title',
trigger:'hover',
type:'help'
};





$.fn.tipsy.elementOptions=function(ele,options){
return $.metadata?$.extend({},options,$(ele).metadata()):options;
};

$.fn.tipsy.autoNS=function(){
return $(this).offset().top>($(document).scrollTop()+$(window).height()/2)?'s':'n';
};

$.fn.tipsy.autoWE=function(){
return $(this).offset().left>($(document).scrollLeft()+$(window).width()/2)?'e':'w';
};

})(jQuery);
(function($j){
$j.fn.tipsyPlus=function(optionsArg){

var titleOption='title';
var htmlOption=false;

var options=$j.extend(
{type:'help',shadow:true},
optionsArg
);

var el=this;

if(options.plus){
htmlOption=true;
titleOption=function(){
return $j('<span />').append(
$j(this).attr('original-title'),
$j('<a class="mwe-upwiz-tooltip-link"/>')
.attr('href','#')
.append(gM('mwe-upwiz-tooltip-more-info'))
.mouseenter(function(){
el.data('tipsy').sticky=true;
})
.mouseleave(function(){
el.data('tipsy').sticky=false;
})
.click(function(){

alert(options.plus);

el.focus();
el.data('tipsy').sticky=false;
})
);
};
}

return this.tipsy({
gravity:'w',
trigger:'focus',
title:titleOption,
html:htmlOption,
type:options.type,
shadow:options.shadow
});
};
})(jQuery);










































(function($){



$.fn.morphCrossfader=function(){


this.css({
position:'relative',
overflow:'hidden',
scroll:'none'
});
this.children().css({
position:'absolute',
'top':'0px',
left:'0px',
scroll:'none',
opacity:0,
visibility:'hidden'
});



this.morphCrossfade(this.children().first(),0);

return this;
};






$.fn.morphCrossfade=function(newPanelSelector,speed){
var container=this;
if(typeof speed==='undefined'){
speed=400;
}

container.css({'overflow':'hidden'});

$oldPanel=$(container.data('crossfadeDisplay'));
if($oldPanel){


container.css({height:$oldPanel.outerHeight()});

$oldPanel.css({position:'absolute'});

$oldPanel.animate({opacity:0},speed,'linear',function(){
$oldPanel.css({visibility:'hidden'})
});
}
container.data('crossfadeDisplay',newPanelSelector);

var $newPanel=$(newPanelSelector);
$newPanel.css({visibility:'visible'});
container.animate({height:$newPanel.outerHeight()},speed,'linear',function(){

$newPanel.css({position:'relative'});

container.css({height:'auto'});
});
$newPanel.animate({opacity:1},speed);

return container;
};

})(jQuery);















(function($){

$.extend($.fn,{

validate:function(options){


if(!this.length){
options&&options.debug&&window.console&&console.warn("nothing selected, can't validate, returning nothing");
return;
}


var validator=$.data(this[0],'validator');
if(validator){
return validator;
}

validator=new $.validator(options,this[0]);
$.data(this[0],'validator',validator);

if(validator.settings.onsubmit){


this.find("input, button").filter(".cancel").click(function(){
validator.cancelSubmit=true;
});


if(validator.settings.submitHandler){
this.find("input, button").filter(":submit").click(function(){
validator.submitButton=this;
});
}


this.submit(function(event){
if(validator.settings.debug)

event.preventDefault();

function handle(){
if(validator.settings.submitHandler){
if(validator.submitButton){

var hidden=$("<input type='hidden'/>").attr("name",validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
}
validator.settings.submitHandler.call(validator,validator.currentForm);
if(validator.submitButton){

hidden.remove();
}
return false;
}
return true;
}


if(validator.cancelSubmit){
validator.cancelSubmit=false;
return handle();
}
if(validator.form()){
if(validator.pendingRequest){
validator.formSubmitted=true;
return false;
}
return handle();
}else{
validator.focusInvalid();
return false;
}
});
}

return validator;
},

valid:function(){
if($(this[0]).is('form')){
return this.validate().form();
}else{
var valid=true;
var validator=$(this[0].form).validate();
this.each(function(){
valid&=validator.element(this);
});
return valid;
}
},

removeAttrs:function(attributes){
var result={},
$element=this;
$.each(attributes.split(/\s/),function(index,value){
result[value]=$element.attr(value);
$element.removeAttr(value);
});
return result;
},

rules:function(command,argument){
var element=this[0];

if(command){
var settings=$.data(element.form,'validator').settings;
var staticRules=settings.rules;
var existingRules=$.validator.staticRules(element);
switch(command){
case"add":
$.extend(existingRules,$.validator.normalizeRule(argument));
staticRules[element.name]=existingRules;
if(argument.messages)
settings.messages[element.name]=$.extend(settings.messages[element.name],argument.messages);
break;
case"remove":
if(!argument){
delete staticRules[element.name];
return existingRules;
}
var filtered={};
$.each(argument.split(/\s/),function(index,method){
filtered[method]=existingRules[method];
delete existingRules[method];
});
return filtered;
}
}

var data=$.validator.normalizeRules(
$.extend(
{},
$.validator.metadataRules(element),
$.validator.classRules(element),
$.validator.attributeRules(element),
$.validator.staticRules(element)
),element);


if(data.required){
var param=data.required;
delete data.required;
data=$.extend({required:param},data);
}

return data;
}
});


$.extend($.expr[":"],{

blank:function(a){return!$.trim(""+a.value);},

filled:function(a){return!!$.trim(""+a.value);},

unchecked:function(a){return!a.checked;}
});


$.validator=function(options,form){
this.settings=$.extend(true,{},$.validator.defaults,options);
this.currentForm=form;
this.init();
};

$.validator.format=function(source,params){
if(arguments.length==1)
return function(){
var args=$.makeArray(arguments);
args.unshift(source);
return $.validator.format.apply(this,args);
};
if(arguments.length>2&&params.constructor!=Array){
params=$.makeArray(arguments).slice(1);
}
if(params.constructor!=Array){
params=[params];
}
$.each(params,function(i,n){
source=source.replace(new RegExp("\\{"+i+"\\}","g"),n);
});
return source;
};

$.extend($.validator,{

defaults:{
messages:{},
groups:{},
rules:{},
errorClass:"error",
validClass:"valid",
errorElement:"label",
focusInvalid:true,
errorContainer:$([]),
errorLabelContainer:$([]),
onsubmit:true,
ignore:[],
ignoreTitle:false,
onfocusin:function(element){
this.lastActive=element;


if(this.settings.focusCleanup&&!this.blockFocusCleanup){
this.settings.unhighlight&&this.settings.unhighlight.call(this,element,this.settings.errorClass,this.settings.validClass);
this.errorsFor(element).hide();
}
},
onfocusout:function(element){
if(!this.checkable(element)&&(element.name in this.submitted||!this.optional(element))){
this.element(element);
}
},
onkeyup:function(element){
if(element.name in this.submitted||element==this.lastElement){
this.element(element);
}
},
onclick:function(element){

if(element.name in this.submitted)
this.element(element);

else if(element.parentNode.name in this.submitted)
this.element(element.parentNode);
},
highlight:function(element,errorClass,validClass){
$(element).addClass(errorClass).removeClass(validClass);
},
unhighlight:function(element,errorClass,validClass){
$(element).removeClass(errorClass).addClass(validClass);
}
},


setDefaults:function(settings){
$.extend($.validator.defaults,settings);
},

messages:{
required:"This field is required.",
remote:"Please fix this field.",
email:"Please enter a valid email address.",
url:"Please enter a valid URL.",
date:"Please enter a valid date.",
dateISO:"Please enter a valid date (ISO).",
number:"Please enter a valid number.",
digits:"Please enter only digits.",
creditcard:"Please enter a valid credit card number.",
equalTo:"Please enter the same value again.",
accept:"Please enter a value with a valid extension.",
maxlength:$.validator.format("Please enter no more than {0} characters."),
minlength:$.validator.format("Please enter at least {0} characters."),
rangelength:$.validator.format("Please enter a value between {0} and {1} characters long."),
range:$.validator.format("Please enter a value between {0} and {1}."),
max:$.validator.format("Please enter a value less than or equal to {0}."),
min:$.validator.format("Please enter a value greater than or equal to {0}.")
},

autoCreateRanges:false,

prototype:{

init:function(){
this.labelContainer=$(this.settings.errorLabelContainer);
this.errorContext=this.labelContainer.length&&this.labelContainer||$(this.currentForm);
this.containers=$(this.settings.errorContainer).add(this.settings.errorLabelContainer);
this.submitted={};
this.valueCache={};
this.pendingRequest=0;
this.pending={};
this.invalid={};
this.reset();

var groups=(this.groups={});
$.each(this.settings.groups,function(key,value){
$.each(value.split(/\s/),function(index,name){
groups[name]=key;
});
});
var rules=this.settings.rules;
$.each(rules,function(key,value){
rules[key]=$.validator.normalizeRule(value);
});

function delegate(event){
var validator=$.data(this[0].form,"validator"),
eventType="on"+event.type.replace(/^validate/,"");
validator.settings[eventType]&&validator.settings[eventType].call(validator,this[0]);
}
$(this.currentForm)
.validateDelegate(":text, :password, :file, select, textarea","focusin focusout keyup",delegate)
.validateDelegate(":radio, :checkbox, select, option","click",delegate);

if(this.settings.invalidHandler)
$(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler);
},


form:function(){
this.checkForm();
$.extend(this.submitted,this.errorMap);
this.invalid=$.extend({},this.errorMap);
if(!this.valid())
$(this.currentForm).triggerHandler("invalid-form",[this]);
this.showErrors();
return this.valid();
},

checkForm:function(){
this.prepareForm();
for(var i=0,elements=(this.currentElements=this.elements());elements[i];i++){
this.check(elements[i]);
}
return this.valid();
},


element:function(element){
element=this.clean(element);
this.lastElement=element;
this.prepareElement(element);
this.currentElements=$(element);
var result=this.check(element);
if(result){
delete this.invalid[element.name];
}else{
this.invalid[element.name]=true;
}
if(!this.numberOfInvalids()){

this.toHide=this.toHide.add(this.containers);
}
this.showErrors();
return result;
},


showErrors:function(errors){
if(errors){

$.extend(this.errorMap,errors);
this.errorList=[];
for(var name in errors){
this.errorList.push({
message:errors[name],
element:this.findByName(name)[0]
});
}

this.successList=$.grep(this.successList,function(element){
return!(element.name in errors);
});
}
this.settings.showErrors
?this.settings.showErrors.call(this,this.errorMap,this.errorList)
:this.defaultShowErrors();
},


resetForm:function(){
if($.fn.resetForm)
$(this.currentForm).resetForm();
this.submitted={};
this.prepareForm();
this.hideErrors();
this.elements().removeClass(this.settings.errorClass);
},

numberOfInvalids:function(){
return this.objectLength(this.invalid);
},

objectLength:function(obj){
var count=0;
for(var i in obj)
count++;
return count;
},

hideErrors:function(){
this.addWrapper(this.toHide).hide();
},

valid:function(){
return this.size()==0;
},

size:function(){
return this.errorList.length;
},

focusInvalid:function(){
if(this.settings.focusInvalid){
try{
$(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[])
.filter(":visible")
.focus()

.trigger("focusin");
}catch(e){

}
}
},

findLastActive:function(){
var lastActive=this.lastActive;
return lastActive&&$.grep(this.errorList,function(n){
return n.element.name==lastActive.name;
}).length==1&&lastActive;
},

elements:function(){
var validator=this,
rulesCache={};



return $([]).add(this.currentForm.elements)
.filter(":input")
.not(":submit, :reset, :image, [disabled]")
.not(this.settings.ignore)
.filter(function(){
!this.name&&validator.settings.debug&&window.console&&console.error("%o has no name assigned",this);


if(this.name in rulesCache||!validator.objectLength($(this).rules()))
return false;

rulesCache[this.name]=true;
return true;
});
},

clean:function(selector){
return $(selector)[0];
},

errors:function(){
return $(this.settings.errorElement+"."+this.settings.errorClass,this.errorContext);
},

reset:function(){
this.successList=[];
this.errorList=[];
this.errorMap={};
this.toShow=$([]);
this.toHide=$([]);
this.currentElements=$([]);
},

prepareForm:function(){
this.reset();
this.toHide=this.errors().add(this.containers);
},

prepareElement:function(element){
this.reset();
this.toHide=this.errorsFor(element);
},

check:function(element){
element=this.clean(element);


if(this.checkable(element)){
element=this.findByName(element.name)[0];
}
var rules=$(element).rules();
var dependencyMismatch=false;
for(method in rules){
var rule={method:method,parameters:rules[method]};
try{
var result=$.validator.methods[method].call(this,element.value.replace(/\r/g,""),element,rule.parameters);



if(result=="dependency-mismatch"){
dependencyMismatch=true;
continue;
}
dependencyMismatch=false;

if(result=="pending"){
this.toHide=this.toHide.not(this.errorsFor(element));
return;
}

if(!result){
this.formatAndAdd(element,rule);
return false;
}
}catch(e){
this.settings.debug&&window.console&&console.log("exception occured when checking element "+element.id
+", check the '"+rule.method+"' method",e);
throw e;
}
}
if(dependencyMismatch)
return;
if(this.objectLength(rules))
this.successList.push(element);
return true;
},



customMetaMessage:function(element,method){
if(!$.metadata)
return;

var meta=this.settings.meta
?$(element).metadata()[this.settings.meta]
:$(element).metadata();

return meta&&meta.messages&&meta.messages[method];
},


customMessage:function(name,method){
var m=this.settings.messages[name];
return m&&(m.constructor==String
?m
:m[method]);
},


findDefined:function(){
for(var i=0;i<arguments.length;i++){
if(arguments[i]!==undefined)
return arguments[i];
}
return undefined;
},

defaultMessage:function(element,method){
return this.findDefined(
this.customMessage(element.name,method),
this.customMetaMessage(element,method),

!this.settings.ignoreTitle&&element.title||undefined,
$.validator.messages[method],
"<strong>Warning: No message defined for "+element.name+"</strong>"
);
},

formatAndAdd:function(element,rule){
var message=this.defaultMessage(element,rule.method),
theregex=/\$?\{(\d+)\}/g;
if(typeof message=="function"){
message=message.call(this,rule.parameters,element);
}else if(theregex.test(message)){
message=jQuery.format(message.replace(theregex,'{$1}'),rule.parameters);
}
this.errorList.push({
message:message,
element:element
});

this.errorMap[element.name]=message;
this.submitted[element.name]=message;
},

addWrapper:function(toToggle){
if(this.settings.wrapper)
toToggle=toToggle.add(toToggle.parent(this.settings.wrapper));
return toToggle;
},

defaultShowErrors:function(){
for(var i=0;this.errorList[i];i++){
var error=this.errorList[i];
this.settings.highlight&&this.settings.highlight.call(this,error.element,this.settings.errorClass,this.settings.validClass);
this.showLabel(error.element,error.message);
}
if(this.errorList.length){
this.toShow=this.toShow.add(this.containers);
}
if(this.settings.success){
for(var i=0;this.successList[i];i++){
this.showLabel(this.successList[i]);
}
}
if(this.settings.unhighlight){
for(var i=0,elements=this.validElements();elements[i];i++){
this.settings.unhighlight.call(this,elements[i],this.settings.errorClass,this.settings.validClass);
}
}
this.toHide=this.toHide.not(this.toShow);
this.hideErrors();
this.addWrapper(this.toShow).show();
},

validElements:function(){
return this.currentElements.not(this.invalidElements());
},

invalidElements:function(){
return $(this.errorList).map(function(){
return this.element;
});
},

showLabel:function(element,message){
var label=this.errorsFor(element);
if(label.length){

label.removeClass().addClass(this.settings.errorClass);


label.attr("generated")&&label.html(message);
}else{

label=$("<"+this.settings.errorElement+"/>")
.attr({"for":this.idOrName(element),generated:true})
.addClass(this.settings.errorClass)
.html(message||"");
if(this.settings.wrapper){


label=label.hide().show().wrap("<"+this.settings.wrapper+"/>").parent();
}
if(!this.labelContainer.append(label).length)
this.settings.errorPlacement
?this.settings.errorPlacement(label,$(element))
:label.insertAfter(element);
}
if(!message&&this.settings.success){
label.text("");
typeof this.settings.success=="string"
?label.addClass(this.settings.success)
:this.settings.success(label);
}
this.toShow=this.toShow.add(label);
},

errorsFor:function(element){
var name=this.idOrName(element);
return this.errors().filter(function(){
return $(this).attr('for')==name;
});
},

idOrName:function(element){
return this.groups[element.name]||(this.checkable(element)?element.name:element.id||element.name);
},

checkable:function(element){
return/radio|checkbox/i.test(element.type);
},

findByName:function(name){

var form=this.currentForm;
return $(document.getElementsByName(name)).map(function(index,element){
return element.form==form&&element.name==name&&element||null;
});
},

getLength:function(value,element){
switch(element.nodeName.toLowerCase()){
case'select':
return $("option:selected",element).length;
case'input':
if(this.checkable(element))
return this.findByName(element.name).filter(':checked').length;
}
return value.length;
},

depend:function(param,element){
return this.dependTypes[typeof param]
?this.dependTypes[typeof param](param,element)
:true;
},

dependTypes:{
"boolean":function(param,element){
return param;
},
"string":function(param,element){
return!!$(param,element.form).length;
},
"function":function(param,element){
return param(element);
}
},

optional:function(element){
return!$.validator.methods.required.call(this,$.trim(element.value),element)&&"dependency-mismatch";
},

startRequest:function(element){
if(!this.pending[element.name]){
this.pendingRequest++;
this.pending[element.name]=true;
}
},

stopRequest:function(element,valid){
this.pendingRequest--;

if(this.pendingRequest<0)
this.pendingRequest=0;
delete this.pending[element.name];
if(valid&&this.pendingRequest==0&&this.formSubmitted&&this.form()){
$(this.currentForm).submit();
this.formSubmitted=false;
}else if(!valid&&this.pendingRequest==0&&this.formSubmitted){
$(this.currentForm).triggerHandler("invalid-form",[this]);
this.formSubmitted=false;
}
},

previousValue:function(element){
return $.data(element,"previousValue")||$.data(element,"previousValue",{
old:null,
valid:true,
message:this.defaultMessage(element,"remote")
});
}

},

classRuleSettings:{
required:{required:true},
email:{email:true},
url:{url:true},
date:{date:true},
dateISO:{dateISO:true},
dateDE:{dateDE:true},
number:{number:true},
numberDE:{numberDE:true},
digits:{digits:true},
creditcard:{creditcard:true}
},

addClassRules:function(className,rules){
className.constructor==String?
this.classRuleSettings[className]=rules:
$.extend(this.classRuleSettings,className);
},

classRules:function(element){
var rules={};
var classes=$(element).attr('class');
classes&&$.each(classes.split(' '),function(){
if(this in $.validator.classRuleSettings){
$.extend(rules,$.validator.classRuleSettings[this]);
}
});
return rules;
},

attributeRules:function(element){
var rules={};
var $element=$(element);

for(method in $.validator.methods){
var value=$element.attr(method);
if(value){
rules[method]=value;
}
}


if(rules.maxlength&&/-1|2147483647|524288/.test(rules.maxlength)){
delete rules.maxlength;
}

return rules;
},

metadataRules:function(element){
if(!$.metadata)return{};

var meta=$.data(element.form,'validator').settings.meta;
return meta?
$(element).metadata()[meta]:
$(element).metadata();
},

staticRules:function(element){
var rules={};
var validator=$.data(element.form,'validator');
if(validator.settings.rules){
rules=$.validator.normalizeRule(validator.settings.rules[element.name])||{};
}
return rules;
},

normalizeRules:function(rules,element){

$.each(rules,function(prop,val){

if(val===false){
delete rules[prop];
return;
}
if(val.param||val.depends){
var keepRule=true;
switch(typeof val.depends){
case"string":
keepRule=!!$(val.depends,element.form).length;
break;
case"function":
keepRule=val.depends.call(element,element);
break;
}
if(keepRule){
rules[prop]=val.param!==undefined?val.param:true;
}else{
delete rules[prop];
}
}
});


$.each(rules,function(rule,parameter){
rules[rule]=$.isFunction(parameter)?parameter(element):parameter;
});


$.each(['minlength','maxlength','min','max'],function(){
if(rules[this]){
rules[this]=Number(rules[this]);
}
});
$.each(['rangelength','range'],function(){
if(rules[this]){
rules[this]=[Number(rules[this][0]),Number(rules[this][1])];
}
});

if($.validator.autoCreateRanges){

if(rules.min&&rules.max){
rules.range=[rules.min,rules.max];
delete rules.min;
delete rules.max;
}
if(rules.minlength&&rules.maxlength){
rules.rangelength=[rules.minlength,rules.maxlength];
delete rules.minlength;
delete rules.maxlength;
}
}


if(rules.messages){
delete rules.messages;
}

return rules;
},


normalizeRule:function(data){
if(typeof data=="string"){
var transformed={};
$.each(data.split(/\s/),function(){
transformed[this]=true;
});
data=transformed;
}
return data;
},


addMethod:function(name,method,message){
$.validator.methods[name]=method;
$.validator.messages[name]=message!=undefined?message:$.validator.messages[name];
if(method.length<3){
$.validator.addClassRules(name,$.validator.normalizeRule(name));
}
},

methods:{


required:function(value,element,param){

if(!this.depend(param,element))
return"dependency-mismatch";
switch(element.nodeName.toLowerCase()){
case'select':

var val=$(element).val();
return val&&val.length>0;
case'input':
if(this.checkable(element))
return this.getLength(value,element)>0;
default:
return $.trim(value).length>0;
}
},


remote:function(value,element,param){
if(this.optional(element))
return"dependency-mismatch";

var previous=this.previousValue(element);
if(!this.settings.messages[element.name])
this.settings.messages[element.name]={};
previous.originalMessage=this.settings.messages[element.name].remote;
this.settings.messages[element.name].remote=previous.message;

param=typeof param=="string"&&{url:param}||param;

if(previous.old!==value){
previous.old=value;
var validator=this;
this.startRequest(element);
var data={};
data[element.name]=value;
$.ajax($.extend(true,{
url:param,
mode:"abort",
port:"validate"+element.name,
dataType:"json",
data:data,
success:function(response){
validator.settings.messages[element.name].remote=previous.originalMessage;
var valid=response===true;
if(valid){
var submitted=validator.formSubmitted;
validator.prepareElement(element);
validator.formSubmitted=submitted;
validator.successList.push(element);
validator.showErrors();
}else{
var errors={};
var message=(previous.message=response||validator.defaultMessage(element,"remote"));
errors[element.name]=$.isFunction(message)?message(value):message;
validator.showErrors(errors);
}
previous.valid=valid;
validator.stopRequest(element,valid);
}
},param));
return"pending";
}else if(this.pending[element.name]){
return"pending";
}
return previous.valid;
},


minlength:function(value,element,param){
return this.optional(element)||this.getLength($.trim(value),element)>=param;
},


maxlength:function(value,element,param){
return this.optional(element)||this.getLength($.trim(value),element)<=param;
},


rangelength:function(value,element,param){
var length=this.getLength($.trim(value),element);
return this.optional(element)||(length>=param[0]&&length<=param[1]);
},


min:function(value,element,param){
return this.optional(element)||value>=param;
},


max:function(value,element,param){
return this.optional(element)||value<=param;
},


range:function(value,element,param){
return this.optional(element)||(value>=param[0]&&value<=param[1]);
},


email:function(value,element){

return this.optional(element)||/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
},


url:function(value,element){

return this.optional(element)||/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
},


date:function(value,element){
return this.optional(element)||!/Invalid|NaN/.test(new Date(value));
},


dateISO:function(value,element){
return this.optional(element)||/^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);
},


number:function(value,element){
return this.optional(element)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);
},


digits:function(value,element){
return this.optional(element)||/^\d+$/.test(value);
},



creditcard:function(value,element){
if(this.optional(element))
return"dependency-mismatch";

if(/[^0-9-]+/.test(value))
return false;
var nCheck=0,
nDigit=0,
bEven=false;

value=value.replace(/\D/g,"");

for(var n=value.length-1;n>=0;n--){
var cDigit=value.charAt(n);
var nDigit=parseInt(cDigit,10);
if(bEven){
if((nDigit*=2)>9)
nDigit-=9;
}
nCheck+=nDigit;
bEven=!bEven;
}

return(nCheck%10)==0;
},


accept:function(value,element,param){
param=typeof param=="string"?param.replace(/,/g,'|'):"png|jpe?g|gif";
return this.optional(element)||value.match(new RegExp(".("+param+")$","i"));
},


equalTo:function(value,element,param){


var target=$(param).unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){
$(element).valid();
});
return value==target.val();
}

}

});


$.format=$.validator.format;

})(jQuery);




;(function($){
var ajax=$.ajax;
var pendingRequests={};
$.ajax=function(settings){

settings=$.extend(settings,$.extend({},$.ajaxSettings,settings));
var port=settings.port;
if(settings.mode=="abort"){
if(pendingRequests[port]){
pendingRequests[port].abort();
}
return(pendingRequests[port]=ajax.apply(this,arguments));
}
return ajax.apply(this,arguments);
};
})(jQuery);






;(function($){


if(!jQuery.event.special.focusin&&!jQuery.event.special.focusout&&document.addEventListener){
$.each({
focus:'focusin',
blur:'focusout'
},function(original,fix){
$.event.special[fix]={
setup:function(){
this.addEventListener(original,handler,true);
},
teardown:function(){
this.removeEventListener(original,handler,true);
},
handler:function(e){
arguments[0]=$.event.fix(e);
arguments[0].type=fix;
return $.event.handle.apply(this,arguments);
}
};
function handler(e){
e=$.event.fix(e);
e.type=fix;
return $.event.handle.call(this,e);
}
});
};
$.extend($.fn,{
validateDelegate:function(delegate,type,handler){
return this.bind(type,function(event){
var target=$(event.target);
if(target.is(delegate)){
return handler.apply(target,arguments);
}
});
}
});
})(jQuery);













































(function($j){
$j.fn.arrowSteps=function(){
this.addClass('arrowSteps');
var $steps=this.find('li');

var width=parseInt(100/$steps.length,10);
$steps.css('width',width+'%');



var arrowWidth=parseInt(this.outerHeight(),10);
$steps.filter(':not(:last-child)').addClass('arrow')
.find('div').css('padding-right',arrowWidth.toString()+'px');

this.data('arrowSteps',$steps);
return this;
};

$j.fn.arrowStepsHighlight=function(selector){
var $steps=this.data('arrowSteps');
var $previous;
$j.each($steps,function(i,step){
var $step=$j(step);
if($step.is(selector)){
if($previous){
$previous.addClass('tail');
}
$step.addClass('head');
}else{
$step.removeClass('head tail lasthead');
}
$previous=$step;
});
};

})(jQuery);
(function($){

jQuery.autocomplete=function(input,options){

var me=this;


var $input=$(input).attr("autocomplete","off");


if(options.inputClass)$input.addClass(options.inputClass);


if(!options.resultElem){
var results=document.createElement("div");

var $results=$(results);

$("body").append(results);
$results.hide().addClass(options.resultsClass).css("position","absolute");
if(options.width>0)$results.css("width",options.width);
}else{
var results=$j(options.resultElem).get(0);
var $results=$j(options.resultElem);
$results.hide();
}


input.autocompleter=me;

var timeout=null;
var prev="";
var active=-1;
var cache={};
var keyb=false;
var hasFocus=false;
var lastKeyPressCode=null;


function flushCache(){
cache={};
cache.data={};
cache.length=0;
};


flushCache();


if(options.data!=null){
var sFirstChar="",stMatchSets={},row=[];


if(typeof options.url!="string")options.cacheLength=1;


for(var i=0;i<options.data.length;i++){

row=((typeof options.data[i]=="string")?[options.data[i]]:options.data[i]);


if(row[0].length>0){

sFirstChar=row[0].substring(0,1).toLowerCase();

if(!stMatchSets[sFirstChar])stMatchSets[sFirstChar]=[];

stMatchSets[sFirstChar].push(row);
}
}


for(var k in stMatchSets){

options.cacheLength++;

addToCache(k,stMatchSets[k]);
}
}

$input
.keydown(function(e){

lastKeyPressCode=e.keyCode;
switch(e.keyCode){
case 38:
e.preventDefault();
moveSelect(-1);
break;
case 40:
e.preventDefault();
moveSelect(1);
break;
case 9:
case 13:
if(selectCurrent()){

$input.get(0).blur();
e.preventDefault();
}
break;
default:
active=-1;
if(timeout)clearTimeout(timeout);
timeout=setTimeout(function(){onChange();},options.delay);
break;
}
})
.focus(function(){

hasFocus=true;
})
.blur(function(){

hasFocus=false;
hideResults();
});

hideResultsNow();

function onChange(){

if(lastKeyPressCode==46||(lastKeyPressCode>8&&lastKeyPressCode<32))return $results.hide();
var v=$input.val();
if(v==prev)return;
prev=v;
if(v.length>=options.minChars){
$input.addClass(options.loadingClass);
requestData(v);
}else{
$input.removeClass(options.loadingClass);
$results.hide();
}
};

function moveSelect(step){
var lis=$("li",results);
if(!lis)return;

active+=step;

if(active<0){
active=0;
}else if(active>=lis.size()){
active=lis.size()-1;
}

lis.removeClass("ac_over");

$(lis[active]).addClass("ac_over");






};
function selectCurrent(){
var li=$("li.ac_over",results)[0];
if(!li){
var $li=$("li",results);
if(options.selectOnly){
if($li.length==1)li=$li[0];
}else if(options.selectFirst){
li=$li[0];
}
}
if(li){
selectItem(li);
return true;
}else{
return false;
}
};

function selectItem(li){
if(!li){
li=document.createElement("li");
li.extra=[];
li.selectValue="";
}
var v=$.trim(li.selectValue?li.selectValue:li.innerHTML);
input.lastSelected=v;
prev=v;
$results.html("");
$input.val(v);
hideResultsNow();
if(options.onItemSelect)setTimeout(function(){options.onItemSelect(li)},1);
};


function createSelection(start,end){

var field=$input.get(0);
if(field.createTextRange){
var selRange=field.createTextRange();
selRange.collapse(true);
selRange.moveStart("character",start);
selRange.moveEnd("character",end);
selRange.select();
}else if(field.setSelectionRange){
field.setSelectionRange(start,end);
}else{
if(field.selectionStart){
field.selectionStart=start;
field.selectionEnd=end;
}
}
field.focus();
};


function autoFill(sValue){

if(lastKeyPressCode!=8){

$input.val($input.val()+sValue.substring(prev.length));

createSelection(prev.length,sValue.length);
}
};

function showResults(){

var pos=findPos(input);

var iWidth=(options.width>0)?options.width:$input.width();

if(!options.resultElem){
$results.css({
width:parseInt(iWidth)+"px",
top:(pos.y+input.offsetHeight)+"px",
left:pos.x+"px"
}).show();
}else{
$results.show();
}
if(options.resultContainer){
$(options.resultContainer).css({top:(pos.y+input.offsetHeight)+"px",
left:(pos.x-parseInt(iWidth))+"px"}).show();
}
};

function hideResults(){
if(timeout)clearTimeout(timeout);
timeout=setTimeout(hideResultsNow,200);
};

function hideResultsNow(){
if(timeout)clearTimeout(timeout);
$input.removeClass(options.loadingClass);
if($results.is(":visible")){
$results.hide();
}
if(options.resultContainer){
$(options.resultContainer).hide();
}
if(options.mustMatch){
var v=$input.val();
if(v!=input.lastSelected){
selectItem(null);
}
}
};

function receiveData(q,data){
if(data){
$input.removeClass(options.loadingClass);
results.innerHTML="";


if(!hasFocus||data.length==0)return hideResultsNow();






results.appendChild(dataToDom(data));

if(options.autoFill&&($input.val().toLowerCase()==q.toLowerCase()))autoFill(data[0][0]);
showResults();
}else{
hideResultsNow();
}
};

function parseData(data){
if(!data)return null;
var parsed=[];
var rows=data.split(options.lineSeparator);
for(var i=0;i<rows.length;i++){
var row=$.trim(rows[i]);
if(row){
parsed[parsed.length]=row.split(options.cellSeparator);
}
}
return parsed;
};

function dataToDom(data){
var ul=document.createElement("ul");
if(options.ul_class)$(ul).addClass(options.ul_class);

var num=data.length;


if((options.maxItemsToShow>0)&&(options.maxItemsToShow<num))num=options.maxItemsToShow;

for(var i=0;i<num;i++){
var row=data[i];
if(!row)continue;
var li=document.createElement("li");
if(options.formatItem){
li.innerHTML=options.formatItem(row,i,num);
li.selectValue=row[0];
}else{
li.innerHTML=row[0];
li.selectValue=row[0];
}
var extra=null;
if(row.length>1){
extra=[];
for(var j=1;j<row.length;j++){
extra[extra.length]=row[j];
}
}
li.extra=extra;
ul.appendChild(li);
$(li).hover(
function(){$("li",ul).removeClass("ac_over");$(this).addClass("ac_over");active=$("li",ul).indexOf($(this).get(0));},
function(){$(this).removeClass("ac_over");}
).click(function(e){e.preventDefault();e.stopPropagation();selectItem(this)});
}
return ul;
};

function requestData(q){
if(!options.matchCase)q=q.toLowerCase();
var data=options.cacheLength?loadFromCache(q):null;

if(data){
receiveData(q,data);

}else if((typeof options.url=="string")&&(options.url.length>0)){
$.get(makeUrl(q),function(data){
data=parseData(data);
addToCache(q,data);
receiveData(q,data);
});

}else{
$input.removeClass(options.loadingClass);
}
};

function makeUrl(q){
var url=options.url+"?"+options.paramName+'='+encodeURI(q);
for(var i in options.extraParams){
url+="&"+i+"="+encodeURI(options.extraParams[i]);
}
return url;
};

function loadFromCache(q){
if(!q)return null;
if(typeof cache.data[q]!='undefined'){
return cache.data[q];
}
if(options.matchSubset){
for(var i=q.length-1;i>=options.minChars;i--){
var qs=q.substr(0,i);
var c=cache.data[qs];
if(c){
var csub=[];
for(var j=0;j<c.length;j++){
var x=c[j];
var x0=x[0];
if(matchSubset(x0,q)){
csub[csub.length]=x;
}
}
return csub;
}
}
}
return null;
};

function matchSubset(s,sub){
if(!options.matchCase)s=s.toLowerCase();
var i=s.indexOf(sub);
if(i==-1)return false;
return i==0||options.matchContains;
};

this.flushCache=function(){
flushCache();
};

this.setExtraParams=function(p){
options.extraParams=p;
};

this.findValue=function(){
var q=$input.val();

if(!options.matchCase)q=q.toLowerCase();
var data=options.cacheLength?loadFromCache(q):null;
if(data){
findValueCallback(q,data);
}else if((typeof options.url=="string")&&(options.url.length>0)){
$.get(makeUrl(q),function(data){
data=parseData(data)
addToCache(q,data);
findValueCallback(q,data);
});
}else{

findValueCallback(q,null);
}
}

function findValueCallback(q,data){
if(data)$input.removeClass(options.loadingClass);

var num=(data)?data.length:0;
var li=null;

for(var i=0;i<num;i++){
var row=data[i];

if(row[0].toLowerCase()==q.toLowerCase()){
li=document.createElement("li");
if(options.formatItem){
li.innerHTML=options.formatItem(row,i,num);
li.selectValue=row[0];
}else{
li.innerHTML=row[0];
li.selectValue=row[0];
}
var extra=null;
if(row.length>1){
extra=[];
for(var j=1;j<row.length;j++){
extra[extra.length]=row[j];
}
}
li.extra=extra;
}
}

if(options.onFindValue)setTimeout(function(){options.onFindValue(li)},1);
}

function addToCache(q,data){
if(!data||!q||!options.cacheLength)return;
if(!cache.length||cache.length>options.cacheLength){
flushCache();
cache.length++;
}else if(!cache[q]){
cache.length++;
}
cache.data[q]=data;
};

function findPos(obj){
var curleft=obj.offsetLeft||0;
var curtop=obj.offsetTop||0;
while(obj=obj.offsetParent){
curleft+=obj.offsetLeft
curtop+=obj.offsetTop
}
return{x:curleft,y:curtop};
}
}
})(jQuery);

jQuery.fn.autocomplete=function(url,options,data){

options=options||{};

options.url=url;

options.data=((typeof data=="object")&&(data.constructor==Array))?data:null;


options.resultElem=options.resultElem||null;
options.paramName=options.paramName||'q';

options.inputClass=options.inputClass||"ac_input";
options.resultsClass=options.resultsClass||"ac_results";
options.lineSeparator=options.lineSeparator||"\n";
options.cellSeparator=options.cellSeparator||"|";
options.minChars=options.minChars||1;
options.delay=options.delay||400;
options.matchCase=options.matchCase||0;
options.matchSubset=options.matchSubset||1;
options.matchContains=options.matchContains||0;
options.cacheLength=options.cacheLength||1;
options.mustMatch=options.mustMatch||0;
options.extraParams=options.extraParams||{};
options.loadingClass=options.loadingClass||"ac_loading";
options.selectFirst=options.selectFirst||false;
options.selectOnly=options.selectOnly||false;
options.maxItemsToShow=options.maxItemsToShow||-1;
options.autoFill=options.autoFill||false;
options.width=parseInt(options.width,10)||0;

this.each(function(){
var input=this;
new jQuery.autocomplete(input,options);
});


return this;
}

jQuery.fn.autocompleteArray=function(data,options){
return this.autocomplete(null,options,data);
}

jQuery.fn.indexOf=function(e){
for(var i=0;i<this.length;i++){
if(this[i]==e)return i;
}
return-1;
};
(function($){



$.fn.loadingSpinner=function(){
if(this){
$j(this).html(
$j('<div />')
.addClass("loadingSpinner")
);
}
return this;
}




$.fn.getAbsoluteOverlaySpinner=function(){
var pos=$j(this).offset();
var posLeft=($j(this).width())?
parseInt(pos.left+(.4*$j(this).width())):
pos.left+30;

var posTop=($j(this).height())?
parseInt(pos.top+(.4*$j(this).height())):
pos.top+30;

var $spinner=$j('<div />')
.loadingSpinner()
.css({
'width':32,
'height':32,
'position':'absolute',
'top':posTop+'px',
'left':posLeft+'px'
});
$j('body').append($spinner);
return $spinner;
}
})(jQuery);



(function($){


var cache={};

var matchTextCache={};

$.fn.autoEllipsis=function(options){
options=$.extend({
'position':'center',
'tooltip':false,
'restoreText':false,
'hasSpan':false,
'matchText':null
},options);
$(this).each(function(){
var $this=$(this);
if(options.restoreText){
if(!$this.data('autoEllipsis.originalText')){
$this.data('autoEllipsis.originalText',$this.text());
}else{
$this.text($this.data('autoEllipsis.originalText'));
}
}


var $container=$this;

var $trimmableText=null;

var $protectedText=null;

if(options.hasSpan){
$trimmableText=$this.children(options.selector);
}else{
$trimmableText=$('<span />')
.css('whiteSpace','nowrap')
.text($this.text());
$this
.empty()
.append($trimmableText);
}

var text=$container.text();
var trimmableText=$trimmableText.text();
var w=$container.width();
var pw=$protectedText?$protectedText.width():0;

if(!(text in cache)){
cache[text]={};
}
if(options.matchText&&!(text in matchTextCache)){
matchTextCache[text]={};
}
if(options.matchText&&!(options.matchText in matchTextCache[text])){
matchTextCache[text][options.matchText]={};
}
if(!options.matchText&&w in cache[text]){
$container.html(cache[text][w]);
if(options.tooltip)
$container.attr('title',text);
return;
}
if(options.matchText&&options.matchText in matchTextCache[text]&&w in matchTextCache[text][options.matchText]){
$container.html(matchTextCache[text][options.matchText][w]);
if(options.tooltip)
$container.attr('title',text);
return;
}
if($trimmableText.width()+pw>w){
switch(options.position){
case'right':

var l=0,r=trimmableText.length;
do{
var m=Math.ceil((l+r)/2);
$trimmableText.text(trimmableText.substr(0,m)+'...');
if($trimmableText.width()+pw>w){

r=m-1;
}else{
l=m;
}
}while(l<r);
$trimmableText.text(trimmableText.substr(0,l)+'...');
break;
case'center':

var i=[Math.round(trimmableText.length/2),Math.round(trimmableText.length/2)];
var side=1;
while($trimmableText.outerWidth()+pw>w&&i[0]>0){
$trimmableText.text(trimmableText.substr(0,i[0])+'...'+trimmableText.substr(i[1]));

if(side==0){

i[0]--;
side=1;
}else{

i[1]++;
side=0;
}
}
break;
case'left':

var r=0;
while($trimmableText.outerWidth()+pw>w&&r<trimmableText.length){
$trimmableText.text('...'+trimmableText.substr(r));
r++;
}
break;
}
}
if(options.tooltip){
$container.attr('title',text);
}
if(options.matchText){
$container.highlightText(options.matchText);
matchTextCache[text][options.matchText][w]=$container.html();
}else{
cache[text][w]=$container.html();
}

});
};

})(jQuery);











































(function($){

$.suggestions={




cancel:function(context){
if(context.data.timerID!=null){
clearTimeout(context.data.timerID);
}
if(typeof context.config.cancel=='function'){
context.config.cancel.call(context.data.$textbox);
}
},





restore:function(context){
context.data.$textbox.val(context.data.prevText);
},






update:function(context,delayed){

function maybeFetch(){
if(context.data.$textbox.val()!==context.data.prevText){
context.data.prevText=context.data.$textbox.val();
if(typeof context.config.fetch=='function'){
context.config.fetch.call(context.data.$textbox,context.data.$textbox.val());
}
}
}

if(context.data.timerID!=null){
clearTimeout(context.data.timerID);
}
if(delayed){

context.data.timerID=setTimeout(maybeFetch,context.config.delay);
}else{
maybeFetch();
}
$.suggestions.special(context);
},
special:function(context){

if(typeof context.config.special.render=='function'){

setTimeout(function(){

$special=context.data.$container.find('.suggestions-special');
context.config.special.render.call($special,context.data.$textbox.val());
},1);
}
},





configure:function(context,property,value){

switch(property){
case'fetch':
case'cancel':
case'special':
case'result':
case'$region':
context.config[property]=value;
break;
case'suggestions':
context.config[property]=value;

if(typeof context.data!=='undefined'){
if(context.data.$textbox.val().length==0){

context.data.$container.hide();
}else{

context.data.$container.show();

var newCSS={
'top':context.config.$region.offset().top+context.config.$region.outerHeight(),
'bottom':'auto',
'width':context.config.$region.outerWidth(),
'height':'auto'
}
if(context.config.positionFromLeft){
newCSS['left']=context.config.$region.offset().left;
newCSS['right']='auto';
}else{
newCSS['left']='auto';
newCSS['right']=$('body').width()-(context.config.$region.offset().left+context.config.$region.outerWidth());
}
context.data.$container.css(newCSS);
var $results=context.data.$container.children('.suggestions-results');
$results.empty();
var expWidth=-1;
var $autoEllipseMe=$([]);
var matchedText=null;
for(var i=0;i<context.config.suggestions.length;i++){
var text=context.config.suggestions[i];
var $result=$('<div />')
.addClass('suggestions-result')
.attr('rel',i)
.data('text',context.config.suggestions[i])
.mousemove(function(e){
context.data.selectedWithMouse=true;
$.suggestions.highlight(
context,$(this).closest('.suggestions-results div'),false
);
})
.appendTo($results);

if(typeof context.config.result.render=='function'){
context.config.result.render.call($result,context.config.suggestions[i]);
}else{

if(context.config.highlightInput){
matchedText=context.data.prevText;
}
$result.append($('<span />')
.css('whiteSpace','nowrap')
.text(text)
);



var $span=$result.children('span');
if($span.outerWidth()>$result.width()&&$span.outerWidth()>expWidth){

expWidth=$span.outerWidth()+(context.data.$container.width()-$span.parent().width());
}
$autoEllipseMe=$autoEllipseMe.add($result);
}
}

if(expWidth>context.data.$container.width()){
var maxWidth=context.config.maxExpandFactor*context.data.$textbox.width();
context.data.$container.width(Math.min(expWidth,maxWidth));
}

$autoEllipseMe.autoEllipsis({hasSpan:true,tooltip:true,matchText:matchedText});
}
}
break;
case'maxRows':
context.config[property]=Math.max(1,Math.min(100,value));
break;
case'delay':
context.config[property]=Math.max(0,Math.min(1200,value));
break;
case'maxExpandFactor':
context.config[property]=Math.max(1,value);
break;
case'submitOnClick':
case'positionFromLeft':
case'highlightInput':
context.config[property]=value?true:false;
break;
}
},





highlight:function(context,result,updateTextbox){
var selected=context.data.$container.find('.suggestions-result-current');
if(!result.get||selected.get(0)!=result.get(0)){
if(result=='prev'){
if(selected.is('.suggestions-special')){
result=context.data.$container.find('.suggestions-result:last')
}else{
result=selected.prev();
if(selected.length==0){

if(context.data.$container.find('.suggestions-special').html()!=""){
result=context.data.$container.find('.suggestions-special');
}else{
result=context.data.$container.find('.suggestions-results div:last');
}
}
}
}else if(result=='next'){
if(selected.length==0){

result=context.data.$container.find('.suggestions-results div:first');
if(result.length==0&&context.data.$container.find('.suggestions-special').html()!=""){

result=context.data.$container.find('.suggestions-special');
}
}else{
result=selected.next();
if(selected.is('.suggestions-special')){
result=$([]);
}else if(
result.length==0&&
context.data.$container.find('.suggestions-special').html()!=""
){

result=context.data.$container.find('.suggestions-special');
}
}
}
selected.removeClass('suggestions-result-current');
result.addClass('suggestions-result-current');
}
if(updateTextbox){
if(result.length==0||result.is('.suggestions-special')){
$.suggestions.restore(context);
}else{
context.data.$textbox.val(result.data('text'));


context.data.$textbox.change();
}
context.data.$textbox.trigger('change');
}
},




keypress:function(e,context,key){
var wasVisible=context.data.$container.is(':visible');
var preventDefault=false;
switch(key){

case 40:
if(wasVisible){
$.suggestions.highlight(context,'next',true);
context.data.selectedWithMouse=false;
}else{
$.suggestions.update(context,false);
}
preventDefault=true;
break;

case 38:
if(wasVisible){
$.suggestions.highlight(context,'prev',true);
context.data.selectedWithMouse=false;
}
preventDefault=wasVisible;
break;

case 27:
context.data.$container.hide();
$.suggestions.restore(context);
$.suggestions.cancel(context);
context.data.$textbox.trigger('change');
preventDefault=wasVisible;
break;

case 13:
context.data.$container.hide();
preventDefault=wasVisible;
selected=context.data.$container.find('.suggestions-result-current');
if(selected.size()==0||context.data.selectedWithMouse){


$.suggestions.cancel(context);
context.config.$region.closest('form').submit();
}else if(selected.is('.suggestions-special')){
if(typeof context.config.special.select=='function'){
context.config.special.select.call(selected,context.data.$textbox);
}
}else{
if(typeof context.config.result.select=='function'){
$.suggestions.highlight(context,selected,true);
context.config.result.select.call(selected,context.data.$textbox);
}else{
$.suggestions.highlight(context,selected,true);
}
}
break;
default:
$.suggestions.update(context,true);
break;
}
if(preventDefault){
e.preventDefault();
e.stopImmediatePropagation();
}
}
};
$.fn.suggestions=function(){


var returnValue=null;
var args=arguments;

$(this).each(function(){



var context=$(this).data('suggestions-context');
if(typeof context=='undefined'||context==null){
context={
config:{
'fetch':function(){},
'cancel':function(){},
'special':{},
'result':{},
'$region':$(this),
'suggestions':[],
'maxRows':7,
'delay':120,
'submitOnClick':false,
'maxExpandFactor':3,
'positionFromLeft':true,
'highlightInput':false
}
};
}




if(args.length>0){
if(typeof args[0]=='object'){

for(var key in args[0]){
$.suggestions.configure(context,key,args[0][key]);
}
}else if(typeof args[0]=='string'){
if(args.length>1){

$.suggestions.configure(context,args[0],args[1]);
}else if(returnValue==null){

returnValue=(args[0]in context.config?undefined:context.config[args[0]]);
}
}
}



if(typeof context.data=='undefined'){
context.data={

'timerID':null,

'prevText':null,

'visibleResults':0,

'mouseDownOn':$([]),
'$textbox':$(this),
'selectedWithMouse':false
};

var newCSS={
'top':Math.round(context.data.$textbox.offset().top+context.data.$textbox.outerHeight()),
'width':context.data.$textbox.outerWidth(),
'display':'none'
}
if(context.config.positionFromLeft){
newCSS['left']=context.config.$region.offset().left;
newCSS['right']='auto';
}else{
newCSS['left']='auto';
newCSS['right']=$('body').width()-(context.config.$region.offset().left+context.config.$region.outerWidth());
}

context.data.$container=$('<div />')
.css(newCSS)
.addClass('suggestions')
.append(
$('<div />').addClass('suggestions-results')


.mousedown(function(e){
context.data.mouseDownOn=$(e.target).closest('.suggestions-results div');
})
.mouseup(function(e){
var $result=$(e.target).closest('.suggestions-results div');
var $other=context.data.mouseDownOn;
context.data.mouseDownOn=$([]);
if($result.get(0)!=$other.get(0)){
return;
}
$.suggestions.highlight(context,$result,true);
context.data.$container.hide();
if(typeof context.config.result.select=='function'){
context.config.result.select.call($result,context.data.$textbox);
}
context.data.$textbox.focus();
})
)
.append(
$('<div />').addClass('suggestions-special')


.mousedown(function(e){
context.data.mouseDownOn=$(e.target).closest('.suggestions-special');
})
.mouseup(function(e){
var $special=$(e.target).closest('.suggestions-special');
var $other=context.data.mouseDownOn;
context.data.mouseDownOn=$([]);
if($special.get(0)!=$other.get(0)){
return;
}
context.data.$container.hide();
if(typeof context.config.special.select=='function'){
context.config.special.select.call($special,context.data.$textbox);
}
context.data.$textbox.focus();
})
.mousemove(function(e){
context.data.selectedWithMouse=true;
$.suggestions.highlight(
context,$(e.target).closest('.suggestions-special'),false
);
})
)
.appendTo($('body'));
$(this)

.attr('autocomplete','off')
.keydown(function(e){

context.data.keypressed=(e.keyCode==undefined)?e.which:e.keyCode;
context.data.keypressedCount=0;

switch(context.data.keypressed){


case 40:
e.preventDefault();
e.stopImmediatePropagation();
break;
case 38:
case 27:
case 13:
if(context.data.$container.is(':visible')){
e.preventDefault();
e.stopImmediatePropagation();
}
}
})
.keypress(function(e){
context.data.keypressedCount++;
$.suggestions.keypress(e,context,context.data.keypressed);
})
.keyup(function(e){


if(context.data.keypressedCount==0){
$.suggestions.keypress(e,context,context.data.keypressed);
}
})
.blur(function(){


if(context.data.mouseDownOn.length>0){
return;
}
context.data.$container.hide();
$.suggestions.cancel(context);
});
}

$(this).data('suggestions-context',context);
});
return returnValue!==null?returnValue:$(this);
};

})(jQuery);



(function($j){
$j.fn.removeCtrl=function(msgKey,tooltipMsgKey,callback){
var msg=(msgKey===null)?'':gM(msgKey);
return $j('<div class="mwe-upwiz-remove-ctrl ui-corner-all" />')
.attr('title',gM(tooltipMsgKey))
.click(callback)
.hover(function(){$j(this).addClass('hover');},
function(){$j(this).removeClass('hover');})
.append($j('<div class="ui-icon ui-icon-close" /><div class="mwe-upwiz-remove-ctrl-msg">'+msg+'</div>'));
};
})(jQuery);





(function($j){$j.fn.mwCoolCats=function(options){

var defaults={
buttontext:'Add'
};

var settings=$j.extend({},defaults,options);


var categoryNamespace=wgFormattedNamespaces[wgNamespaceIds['category']];

var $container;
return this.each(function(){
var _this=$j(this);
_this.addClass('categoryInput');

_this.suggestions({
'fetch':_fetchSuggestions,
'cancel':function(){
var req=$j(this).data('request');
if(req.abort){
req.abort();
}
}
});
_this.suggestions();

_this.wrap('<div class="cat-widget"></div>');
$container=_this.parent();
$container.append($j('<button type="button">'+settings.buttontext+'</button>')
.click(function(e){
e.stopPropagation();
e.preventDefault();
_processInput();
return false;
}));
$container.prepend('<ul class="cat-list pkg"></ul>');


_this.parents('form').submit(function(){
_processInput();
});

_this.keyup(function(e){
if(e.keyCode==13){
e.stopPropagation();
e.preventDefault();
_processInput();
}
});

this.getWikiText=function(){
return _getCats().map(function(){return'[['+categoryNamespace+':'+this+']]';})
.toArray()
.join("\n");
};

_processInput();
});

function _processInput(){
var $input=$container.find('input');
_insertCat($input.val().trim());
$input.val("");
}

function _insertCat(cat){
if(mw.isEmpty(cat)||_containsCat(cat)){
return;
}
var href=_catLink(cat);
var $li=$j('<li class="cat"></li>');
$container.find('ul').append($li);
$li.append('<a class="cat" target="_new" href="'+href+'">'+cat+' </a>');
$li.append($j.fn.removeCtrl(null,'mwe-upwiz-category-remove',function(){$li.remove();}));
}

function _catLink(cat){
var catLink=
encodeURIComponent(categoryNamespace)
+':'
+encodeURIComponent(mw.ucfirst(cat.replace(/ /g,'_')));



if(!(mw.isEmpty(wgServer)&&mw.isEmpty(wgArticlePath))){
catLink=wgServer+wgArticlePath.replace(/\$1/,catLink);
}

return catLink;
}

function _getCats(){
return $container.find('ul li a.cat').map(function(){return $j.trim(this.text);});
}

function _containsCat(cat){
return _getCats().filter(function(){return this==cat;}).length!==0;
}

function _fetchSuggestions(query){
var _this=this;
var request=$j.ajax({
url:wgScriptPath+'/api.php',
data:{
'action':'query',
'list':'allpages',
'apnamespace':wgNamespaceIds['category'],
'apprefix':$j(this).val(),
'format':'json'
},
dataType:'json',
success:function(data){

var pages=data.query.allpages;
var titleArr=[];

$j.each(pages,function(i,page){
var title=page.title.split(':',2)[1];
titleArr.push(title);
});

$j(_this).suggestions('suggestions',titleArr);
}
});

$j(_this).data('request',request);
}

}})(jQuery);


if(typeof window.mw==='undefined'){
window.mw={};
}


(function(mw,$j){






mw.log=function(s,level){

if(typeof level==='undefined'){
level=30;
}

if(level>mw.log.level){
return;
}


if(mw.log.preAppendLog){
s=mw.log.preAppendLog+s;
}

if(window.console){
window.console.log(s);
}else{




var log_elm=document.getElementById('mv_js_log');

if(!log_elm){
var body=document.getElementsByTagName("body")[0];
if(body){
body.innerHTML=document.getElementsByTagName("body")[0].innerHTML+
'<div style="position:absolute;z-index:500;bottom:0px;left:0px;right:0px;height:100px;">'+
'<textarea id="mv_js_log" cols="120" rows="4"></textarea>'+
'</div>';
log_elm=document.getElementById('mv_js_log');
}else{
mw.logBuffered+=s+"\n";
}
}

if(log_elm){
if(mw.logBuffered.length){
log_elm.value+=mw.logBuffered;
mw.logBuffered="";
}
log_elm.value+=s+"\n";
}

}
};

mw.log.level=mw.log.NONE=0;
mw.log.FATAL=10;
mw.log.WARN=20;
mw.log.INFO=30;
mw.log.ALL=100;

mw.log.fatal=function(s){
mw.log(s,mw.log.FATAL);
};

mw.log.warn=function(s){
mw.log(s,mw.log.WARN);
};

mw.log.info=function(s){
mw.log(s,mw.log.INFO);
};

mw.log.level=mw.log.ALL;

mw.logBuffered="";

})(window.mw);



(function(mw){







mw.isEmpty=function(obj){
if(typeof obj=='string'){
if(obj=='')return true;

return false;
}


if(Object.prototype.toString.call(obj)==="[object Array]"
&&obj.length==0){
return true;
}


for(var i in obj){return false;}


return true;
};







mw.isFull=function(obj){
return!mw.isEmpty(obj);
};







mw.isDefined=function(obj){
return typeof obj!=='undefined';
};







mw.ucfirst=function(s){
return s.substring(0,1).toUpperCase()+s.substr(1);
};


})(window.mw);



(function(mw){











mw.seconds2npt=function(sec,show_ms){
if(isNaN(sec)){
mw.log("Warning: trying to get npt time on NaN:"+sec);
return'0:00:00';
}

var tm=mw.seconds2Measurements(sec)



if(show_ms){
tm.seconds=Math.round(tm.seconds*1000)/1000;
}else{
tm.seconds=Math.round(tm.seconds);
}
if(tm.seconds<10){
tm.seconds='0'+tm.seconds;
}
if(tm.hours==0){
hoursStr=''
}else{
if(tm.minutes<10)
tm.minutes='0'+tm.minutes;

hoursStr=tm.hours+":";
}
return hoursStr+tm.minutes+":"+tm.seconds;
}







mw.seconds2Measurements=function(sec){
var tm={};
tm.days=Math.floor(sec/(3600*24))
tm.hours=Math.floor(sec/3600);
tm.minutes=Math.floor((sec/60)%60);
tm.seconds=sec%60;
return tm;
}








mw.npt2seconds=function(npt_str){
if(!npt_str){

return false;
}

npt_str=npt_str.replace(/npt:|s/g,'');

var hour=0;
var min=0;
var sec=0;

times=npt_str.split(':');
if(times.length==3){
sec=times[2];
min=times[1];
hour=times[0];
}else if(times.length==2){
sec=times[1];
min=times[0];
}else{
sec=times[0];
}

sec=sec.replace(/,\s?/,'.');

return parseInt(hour*3600)+parseInt(min*60)+parseFloat(sec);
}

})(window.mw);



















































(function(mw,$){






mw.Uri=function(uri,strictMode){
strictMode=!!strictMode;
if(mw.isFull(uri)){
if(typeof uri==='string'){
this._parse(uri,strictMode);
}else if(uri instanceof Location){
this._parse(uri.href,strictMode);
}else if(typeof uri==='object'){
var _this=this;
$.each(this._properties,function(i,property){
_this[property]=uri[property];
});
if(!mw.isDefined(this.query)){
this.query={};
}
}
}
if(!(this.protocol&&this.host&&this.path)){
throw new Error("bad constructor arguments");
}
};

mw.Uri.prototype={






encode:function(component){
return encodeURIComponent(component)
.replace(/!/g,'%21')
.replace(/'/g,'%27')
.replace(/\(/g,'%28')
.replace(/\)/g,'%29')
.replace(/\*/g,'%2A')
.replace(/%20/g,'+');
},






decode:function(component){
return decodeURIComponent(component).replace(/\+/g,' ');
},



_parser:{
strict:/^(?:([^:\/?#]+):)?(?:\/\/(?:(?:([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)?((?:[^?#\/]*\/)*[^?#]*)(?:\?([^#]*))?(?:#(.*))?/,
loose:/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?(?:(?:([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?((?:\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?[^?#\/]*)(?:\?([^#]*))?(?:#(.*))?/
},



_properties:[
"protocol",
"user",
"password",
"host",
"port",
"path",
"query",
"fragment"
],







_parse:function(str,strictMode){
var matches=this._parser[strictMode?"strict":"loose"].exec(str);
var uri=this;
$.each(uri._properties,function(i,property){
uri[property]=matches[i+1];
});




var query={};



if(uri.query){
uri.query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function($0,$1,$2){
if($1){
query[uri.decode($1)]=uri.decode($2);
}
});
}
this.query=query;
},





getUserInfo:function(){
var userInfo='';
if(mw.isFull(this.user)){
userInfo+=this.encode(this.user);
if(mw.isFull(this.password)){
userInfo+=':'+this.encode(this.password);
}
}
return userInfo;
},





getHostPort:function(){
return this.host
+(mw.isFull(this.port)?':'+this.port
:''
);
},






getAuthority:function(){
var userInfo=this.getUserInfo();
return(mw.isFull(userInfo)?userInfo+'@'
:''
)
+this.getHostPort();
},






getQueryString:function(){
var pairs=[];
var _this=this;
$.each(this.query,function(key,value){
pairs.push(_this.encode(key)+'='+_this.encode(value));
});
return pairs.join('&');
},





getRelativePath:function(){
var queryString=this.getQueryString();
return this.path
+(mw.isFull(queryString)?'?'+queryString
:''
)
+(mw.isFull(this.fragment)?'#'+this.encode(this.fragment)
:''
);
},





toString:function(){
return this.protocol+'://'+this.getAuthority()+this.getRelativePath();
},





clone:function(){
return new mw.Uri(this);
},






extend:function(parameters){
$.extend(this.query,parameters);
return this;
}
};

})(window.mw,jQuery);




(function(mw,$j){















mw.Api=function(options){


if(!mw.isDefined(options.url)){
throw new Error('Configuration error - needs url property');
};

this.url=options.url;

var _this=this;




this.defaults={
parameters:{
action:'query',
format:'json'
},

ajax:{

url:new String(this.url),


ok:function(){},


err:function(code,result){
var errorMsg="mw.Api error: "+code;
mw.log(errorMsg);
},

timeout:30000,

dataType:'json'

}
};


if(options.parameters){
$j.extend(this.defaults.parameters,options.parameters);
}

if(options.ajax){
$j.extend(this.defaults.ajax,options.ajax);
}
};

mw.Api.prototype={









normalizeAjaxOptions:function(arg){
if(typeof arg==='function'){
var ok=arg;
arg={'ok':ok};
}
if(!arg.ok){
throw Error("ajax options must include ok callback");
}
return arg;
},







get:function(parameters,ajaxOptions){
ajaxOptions=this.normalizeAjaxOptions(ajaxOptions);
ajaxOptions.type='GET';
this.ajax(parameters,ajaxOptions);
},








post:function(parameters,ajaxOptions){
ajaxOptions=this.normalizeAjaxOptions(ajaxOptions);
ajaxOptions.type='POST';
this.ajax(parameters,ajaxOptions);
},







ajax:function(parameters,ajaxOptions){
parameters=$j.extend({},this.defaults.parameters,parameters);
ajaxOptions=$j.extend({},this.defaults.ajax,ajaxOptions);
ajaxOptions.data=parameters;

ajaxOptions.error=function(xhr,textStatus,exception){
ajaxOptions.err('http-'+textStatus,{xhr:xhr,exception:exception});
};


ajaxOptions.success=function(result){
if(mw.isEmpty(result)){
ajaxOptions.err("empty","OK response but empty result (check HTTP headers?)");
}else if(result.error){
var code=mw.isDefined(result.error.code)?result.error.code:"unknown";
ajaxOptions.err(code,result);
}else{
ajaxOptions.ok(result);
}
};

$j.ajax(ajaxOptions);

}

}

})(window.mw,jQuery);




(function(mw,$){


var cachedToken=null;

$.extend(mw.Api.prototype,{









postWithEditToken:function(params,ok,err){
var api=this;
mw.log('post with edit token');
if(cachedToken===null){
mw.log('no cached token');



var useTokenToPost=function(token){
mw.log('posting with token = '+token);
params.token=token;
this.post(params,ok,err);
};
mw.log('getting edit token');
api.getEditToken(useTokenToPost,err);
}else{


params.token=cachedToken;
mw.log('we do have a token = '+params.token);
var getTokenIfBad=function(code,result){
mw.log("error with posting with token!");
if(code==='badtoken'){
mw.log("bad token; try again");
cachedToken=null;
api.postWidthEditToken(params,ok,err);
}else{
err(code,result);
}
};
mw.log("posting with the token that was cached ");
api.post(params,ok,getTokenIfBad);
}
},












getEditToken:function(tokenCallback,err){

var parameters={
'prop':'info',
'intoken':'edit',


'titles':'DummyPageForEditToken'
};

var ok=function(data){
var token;
$.each(data.query.pages,function(i,page){
if(page['edittoken']){
token=page['edittoken'];
return false;
}
});
if(mw.isDefined(token)){
cachedToken=token;
tokenCallback(token);
}else{
err('token-missing',data);
}
};

var ajaxOptions={'ok':ok,'err':err};

this.get(parameters,ajaxOptions);
}



});

})(window.mw,jQuery);





























(function($j){mw.Title=function(title,namespace){

var ns=0;


var prefix='';


var name=null;


var ext=null;






function clean(s){
if(mw.isDefined(s)){
return s.replace(/[\x00-\x1f\s]+/g,'_');
}
}





function getDotExtension(){
return ext?'.'+ext:'';
}

function text(s){
return s.replace(/_/g,' ');
}





this.toString=this.getPrefixedDb=function(){
return prefix+this.getMain();
};





this.toText=this.getPrefixedText=function(){
return text(this.toString());
};





this.getMain=function(){
return name+getDotExtension();
};





this.getMainText=function(){
return text(this.getMain());
};





this.getNameText=function(){
return text(name);
};






this.setName=function(s){
name=mw.ucfirst($j.trim(clean(s)));
return this;
};






this.setNameText=function(s){
name=mw.ucfirst($j.trim(clean(s))).replace(/ /g,'_');
return this;
}







this.setNamespaceById=function(id){
ns=id;
prefix=wgFormattedNamespaces[""+id].replace(/ /g,'_')+':';
return this;
};






this.setNamespace=function(s){
if(!mw.isDefined(wgNamespaceIds[s])){
throw new Error('unrecognized namespace: '+s);
}
return this.setNamespaceById(wgNamespaceIds[s]);
};







this.setPrefix=function(s){
var found=false;
var _this=this;
$j.each(wgFormattedNamespaces,function(k,v){
if(s===v){
found=true;
_this.setNamespaceById(parseInt(k,10));
return false;
}
});
if(!found){
throw new Error("unrecognized prefix");
}
return this;
};






this.setExtension=function(s){
ext=clean(s.toLowerCase());
return this;
};






this.getExtension=function(){
return ext;
}



var matches=title.match(/^(?:([^:]+):)?(.*?)(?:\.(\w{1,5}))?$/);
if(matches.length){
matches[1]&&this.setPrefix(matches[1]);
matches[2]&&this.setName(matches[2]);
matches[3]&&this.setExtension(matches[3]);
}else{
throw new Error("couldn't parse title '"+title+"'");
}

if(mw.isDefined(namespace)){
this.setNamespace(namespace);
}

};})(jQuery);












var JQUERY_SWAP_STRING='ZjQuerySwapZ';


(function(mw){


mw.Language={};




var messageCache={};
var gRuleSet={};







mw.addMessages=function(msgSet){
for(var i in msgSet){
messageCache[i]=msgSet[i];
}
}















mw.getMsg=function(messageKey,args){


if(!messageCache[messageKey]){


var rlMsg=mediaWiki.msg(messageKey);
if(rlMsg==('<'+messageKey+'>')){
return'['+messageKey+']';
}
messageCache[messageKey]=rlMsg;
}

if(typeof args!='undefined'){


if(typeof args=='string'
||typeof args=='number'
||args instanceof jQuery)
{
args=[args];
}


var extraArgs=$j.makeArray(arguments);
for(var i=2;i<extraArgs.length;i++){
args.push(extraArgs[i]);
}
}

if((!args||args.length==0)
&&messageCache[messageKey].indexOf('{{')===-1
&&messageCache[messageKey].indexOf('[')===-1
){
return messageCache[messageKey];
}


var messageSwap=new mw.Language.messageSwapObject(messageCache[messageKey],args);


return messageSwap.getMsg();
}









mw.Language.messageSwapObject=function(message,arguments){
this.init(message,arguments);
}

mw.Language.messageSwapObject.prototype={

init:function(message,arguments){
this.message=message;
this.arguments=arguments;


includesjQueryArgs:false;
},


getMsg:function(){

this.replaceStringArgs();


if(this.message.indexOf('{{')===-1
&&this.message.indexOf('[')===-1
&&!this.includesjQueryArgs)
{

return this.message
}


var pObj=new mw.Parser(this.message);


this.message=pObj.getHTML();


if(!this.includesjQueryArgs){

return this.message;
}


return this.getJQueryArgsReplace();

},








replaceStringArgs:function(){
if(!this.arguments){
return;
}

for(var v=0;v<this.arguments.length;v++){
if(typeof this.arguments[v]=='undefined'){
continue;
}
var replaceValue=this.arguments[v];


if(parseInt(replaceValue)==replaceValue){
replaceValue=mw.Language.convertNumber(replaceValue);
}


var argumentRegExp=new RegExp('\\$'+(parseInt(v)+1),'g');


if(replaceValue instanceof jQuery){

this.includesjQueryArgs=true;

this.message=this.message.replace(argumentRegExp,
'<span id="'+JQUERY_SWAP_STRING+v+'"></span>');
}else{

this.message=this.message.replace(argumentRegExp,replaceValue);
}
}
},





getJQueryArgsReplace:function(){
var $jQueryMessage=false;
mw.log('msgReplaceJQueryArgs');
for(var v=0;v<this.arguments.length;v++){
if(typeof this.arguments[v]=='undefined'){
continue;
}
var $replaceValue=this.arguments[v];

if($replaceValue instanceof jQuery){

if(!$jQueryMessage){

$jQueryMessage=$j('<span />').html(this.message);
}
mw.log(" current jQueryMessage::: "+$jQueryMessage.html());

var $swapTarget=$jQueryMessage.find('#'+JQUERY_SWAP_STRING+v);

if(!$swapTarget.length){
mw.log("Error could not find jQuery Swap target: "+v+' by id: '+JQUERY_SWAP_STRING+v
+' In string: '+this.message);
continue;
}

if($swapTarget.html()!=''){
$replaceValue.html($swapTarget.html());
}


$swapTarget.replaceWith($replaceValue);
}
}

return $jQueryMessage;
}
}






mw.Language.msgNoTrans=function(key){
if(messageCache[key])
return messageCache[key]


return'&lt;'+key+'&gt;';
}





mw.Language.doneSetup=false;
mw.Language.magicSetup=function(){
if(!mw.Language.doneSetup){
mw.addTemplateTransform({
'PLURAL':mw.Language.procPLURAL,
'GENDER':mw.Language.procGENDER
})

mw.Language.doneSetup=true;
}

}





mw.Language.names={
"aa":"Qaf\u00e1r af",
"ab":"\u0410\u04a7\u0441\u0443\u0430",
"ace":"Ac\u00e8h",
"af":"Afrikaans",
"ak":"Akan",
"aln":"Geg\u00eb",
"als":"Alemannisch",
"am":"\u12a0\u121b\u122d\u129b",
"an":"Aragon\u00e9s",
"ang":"Anglo-Saxon",
"ar":"\u0627\u0644\u0639\u0631\u0628\u064a\u0629",
"arc":"\u0710\u072a\u0721\u071d\u0710",
"arn":"Mapudungun",
"arz":"\u0645\u0635\u0631\u0649",
"as":"\u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be",
"ast":"Asturianu",
"av":"\u0410\u0432\u0430\u0440",
"avk":"Kotava",
"ay":"Aymar aru",
"az":"Az\u0259rbaycan",
"ba":"\u0411\u0430\u0448\u04a1\u043e\u0440\u0442",
"bar":"Boarisch",
"bat-smg":"\u017demait\u0117\u0161ka",
"bcc":"\u0628\u0644\u0648\u0686\u06cc \u0645\u06a9\u0631\u0627\u0646\u06cc",
"bcl":"Bikol Central",
"be":"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f",
"be-tarask":"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)",
"be-x-old":"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)",
"bg":"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438",
"bh":"\u092d\u094b\u091c\u092a\u0941\u0930\u0940",
"bi":"Bislama",
"bm":"Bamanankan",
"bn":"\u09ac\u09be\u0982\u09b2\u09be",
"bo":"\u0f56\u0f7c\u0f51\u0f0b\u0f61\u0f72\u0f42",
"bpy":"\u0987\u09ae\u09be\u09b0 \u09a0\u09be\u09b0\/\u09ac\u09bf\u09b7\u09cd\u09a3\u09c1\u09aa\u09cd\u09b0\u09bf\u09af\u09bc\u09be \u09ae\u09a3\u09bf\u09aa\u09c1\u09b0\u09c0",
"bqi":"\u0628\u062e\u062a\u064a\u0627\u0631\u064a",
"br":"Brezhoneg",
"bs":"Bosanski",
"bug":"\u1a05\u1a14 \u1a15\u1a18\u1a01\u1a17",
"bxr":"\u0411\u0443\u0440\u044f\u0430\u0434",
"ca":"Catal\u00e0",
"cbk-zam":"Chavacano de Zamboanga",
"cdo":"M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304",
"ce":"\u041d\u043e\u0445\u0447\u0438\u0439\u043d",
"ceb":"Cebuano",
"ch":"Chamoru",
"cho":"Choctaw",
"chr":"\u13e3\u13b3\u13a9",
"chy":"Tsets\u00eahest\u00e2hese",
"ckb":"Soran\u00ee \/ \u06a9\u0648\u0631\u062f\u06cc",
"ckb-latn":"\u202aSoran\u00ee (lat\u00een\u00ee)\u202c",
"ckb-arab":"\u202b\u06a9\u0648\u0631\u062f\u06cc (\u0639\u06d5\u0631\u06d5\u0628\u06cc)\u202c",
"co":"Corsu",
"cr":"N\u0113hiyaw\u0113win \/ \u14c0\u1426\u1403\u152d\u140d\u140f\u1423",
"crh":"Q\u0131r\u0131mtatarca",
"crh-latn":"\u202aQ\u0131r\u0131mtatarca (Latin)\u202c",
"crh-cyrl":"\u202a\u041a\u044a\u044b\u0440\u044b\u043c\u0442\u0430\u0442\u0430\u0440\u0434\u0436\u0430 (\u041a\u0438\u0440\u0438\u043b\u043b)\u202c",
"cs":"\u010cesky",
"csb":"Kasz\u00ebbsczi",
"cu":"\u0421\u043b\u043e\u0432\u0463\u0301\u043d\u044c\u0441\u043a\u044a \/ \u2c14\u2c0e\u2c11\u2c02\u2c21\u2c10\u2c20\u2c14\u2c0d\u2c1f",
"cv":"\u0427\u04d1\u0432\u0430\u0448\u043b\u0430",
"cy":"Cymraeg",
"da":"Dansk",
"de":"Deutsch",
"de-at":"\u00d6sterreichisches Deutsch",
"de-ch":"Schweizer Hochdeutsch",
"de-formal":"Deutsch (Sie-Form)",
"diq":"Zazaki",
"dk":"Dansk (deprecated:da)",
"dsb":"Dolnoserbski",
"dv":"\u078b\u07a8\u0788\u07ac\u0780\u07a8\u0784\u07a6\u0790\u07b0",
"dz":"\u0f47\u0f7c\u0f44\u0f0b\u0f41",
"ee":"E\u028begbe",
"el":"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac",
"eml":"Emili\u00e0n e rumagn\u00f2l",
"en":"English",
"en-gb":"British English",
"eo":"Esperanto",
"es":"Espa\u00f1ol",
"et":"Eesti",
"eu":"Euskara",
"ext":"Estreme\u00f1u",
"fa":"\u0641\u0627\u0631\u0633\u06cc",
"ff":"Fulfulde",
"fi":"Suomi",
"fiu-vro":"V\u00f5ro",
"fj":"Na Vosa Vakaviti",
"fo":"F\u00f8royskt",
"fr":"Fran\u00e7ais",
"frc":"Fran\u00e7ais cadien",
"frp":"Arpetan",
"fur":"Furlan",
"fy":"Frysk",
"ga":"Gaeilge",
"gag":"Gagauz",
"gan":"\u8d1b\u8a9e",
"gan-hans":"\u8d63\u8bed(\u7b80\u4f53)",
"gan-hant":"\u8d1b\u8a9e(\u7e41\u9ad4)",
"gd":"G\u00e0idhlig",
"gl":"Galego",
"glk":"\u06af\u06cc\u0644\u06a9\u06cc",
"gn":"Ava\u00f1e'\u1ebd",
"got":"\ud800\udf32\ud800\udf3f\ud800\udf44\ud800\udf39\ud800\udf43\ud800\udf3a",
"grc":"\u1f08\u03c1\u03c7\u03b1\u03af\u03b1 \u1f11\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u1f74",
"gsw":"Alemannisch",
"gu":"\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0",
"gv":"Gaelg",
"ha":"\u0647\u064e\u0648\u064f\u0633\u064e",
"hak":"Hak-k\u00e2-fa",
"haw":"Hawai`i",
"he":"\u05e2\u05d1\u05e8\u05d9\u05ea",
"hi":"\u0939\u093f\u0928\u094d\u0926\u0940",
"hif":"Fiji Hindi",
"hif-deva":"\u092b\u093c\u0940\u091c\u0940 \u0939\u093f\u0928\u094d\u0926\u0940",
"hif-latn":"Fiji Hindi",
"hil":"Ilonggo",
"ho":"Hiri Motu",
"hr":"Hrvatski",
"hsb":"Hornjoserbsce",
"ht":"Krey\u00f2l ayisyen",
"hu":"Magyar",
"hy":"\u0540\u0561\u0575\u0565\u0580\u0565\u0576",
"hz":"Otsiherero",
"ia":"Interlingua",
"id":"Bahasa Indonesia",
"ie":"Interlingue",
"ig":"Igbo",
"ii":"\ua187\ua259",
"ik":"I\u00f1upiak",
"ike-cans":"\u1403\u14c4\u1483\u144e\u1450\u1466",
"ike-latn":"inuktitut",
"ilo":"Ilokano",
"inh":"\u0413\u0406\u0430\u043b\u0433\u0406\u0430\u0439 \u011eal\u011faj",
"io":"Ido",
"is":"\u00cdslenska",
"it":"Italiano",
"iu":"\u1403\u14c4\u1483\u144e\u1450\u1466\/inuktitut",
"ja":"\u65e5\u672c\u8a9e",
"jbo":"Lojban",
"jut":"Jysk",
"jv":"Basa Jawa",
"ka":"\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8",
"kaa":"Qaraqalpaqsha",
"kab":"Taqbaylit",
"kg":"Kongo",
"ki":"G\u0129k\u0169y\u0169",
"kiu":"Kurmanc\u00ee",
"kj":"Kwanyama",
"kk":"\u049a\u0430\u0437\u0430\u049b\u0448\u0430",
"kk-arab":"\u202b\u0642\u0627\u0632\u0627\u0642\u0634\u0627 (\u062a\u0674\u0648\u062a\u06d5)\u202c",
"kk-cyrl":"\u202a\u049a\u0430\u0437\u0430\u049b\u0448\u0430 (\u043a\u0438\u0440\u0438\u043b)\u202c",
"kk-latn":"\u202aQazaq\u015fa (lat\u0131n)\u202c",
"kk-cn":"\u202b\u0642\u0627\u0632\u0627\u0642\u0634\u0627 (\u062c\u06c7\u0646\u06af\u0648)\u202c",
"kk-kz":"\u202a\u049a\u0430\u0437\u0430\u049b\u0448\u0430 (\u049a\u0430\u0437\u0430\u049b\u0441\u0442\u0430\u043d)\u202c",
"kk-tr":"\u202aQazaq\u015fa (T\u00fcrk\u00efya)\u202c",
"kl":"Kalaallisut",
"km":"\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a",
"kn":"\u0c95\u0ca8\u0ccd\u0ca8\u0ca1",
"ko":"\ud55c\uad6d\uc5b4",
"ko-kp":"\ud55c\uad6d\uc5b4 (\uc870\uc120)",
"kr":"Kanuri",
"kri":"Krio",
"krj":"Kinaray-a",
"ks":"\u0915\u0936\u094d\u092e\u0940\u0930\u0940 - (\u0643\u0634\u0645\u064a\u0631\u064a)",
"ksh":"Ripoarisch",
"ku":"Kurd\u00ee \/ \u0643\u0648\u0631\u062f\u06cc",
"ku-latn":"\u202aKurd\u00ee (lat\u00een\u00ee)\u202c",
"ku-arab":"\u202b\u0643\u0648\u0631\u062f\u064a (\u0639\u06d5\u0631\u06d5\u0628\u06cc)\u202c",
"kv":"\u041a\u043e\u043c\u0438",
"kw":"Kernowek",
"ky":"\u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430",
"la":"Latina",
"lad":"Ladino",
"lb":"L\u00ebtzebuergesch",
"lbe":"\u041b\u0430\u043a\u043a\u0443",
"lez":"\u041b\u0435\u0437\u0433\u0438",
"lfn":"Lingua Franca Nova",
"lg":"Luganda",
"li":"Limburgs",
"lij":"L\u00edguru",
"lmo":"Lumbaart",
"ln":"Ling\u00e1la",
"lo":"\u0ea5\u0eb2\u0ea7",
"loz":"Silozi",
"lt":"Lietuvi\u0173",
"lv":"Latvie\u0161u",
"lzh":"\u6587\u8a00",
"mai":"\u092e\u0948\u0925\u093f\u0932\u0940",
"map-bms":"Basa Banyumasan",
"mdf":"\u041c\u043e\u043a\u0448\u0435\u043d\u044c",
"mg":"Malagasy",
"mh":"Ebon",
"mhr":"\u041e\u043b\u044b\u043a \u041c\u0430\u0440\u0438\u0439",
"mi":"M\u0101ori",
"mk":"\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438",
"ml":"\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02",
"mn":"\u041c\u043e\u043d\u0433\u043e\u043b",
"mo":"\u041c\u043e\u043b\u0434\u043e\u0432\u0435\u043d\u044f\u0441\u043a\u044d",
"mr":"\u092e\u0930\u093e\u0920\u0940",
"ms":"Bahasa Melayu",
"mt":"Malti",
"mus":"Mvskoke",
"mwl":"Mirand\u00e9s",
"my":"\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c",
"myv":"\u042d\u0440\u0437\u044f\u043d\u044c",
"mzn":"\u0645\u064e\u0632\u0650\u0631\u0648\u0646\u064a",
"na":"Dorerin Naoero",
"nah":"N\u0101huatl",
"nan":"B\u00e2n-l\u00e2m-g\u00fa",
"nap":"Nnapulitano",
"nb":"\u202aNorsk (bokm\u00e5l)\u202c",
"nds":"Plattd\u00fc\u00fctsch",
"nds-nl":"Nedersaksisch",
"ne":"\u0928\u0947\u092a\u093e\u0932\u0940",
"new":"\u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e",
"ng":"Oshiwambo",
"niu":"Niu\u0113",
"nl":"Nederlands",
"nn":"\u202aNorsk (nynorsk)\u202c",
"no":"\u202aNorsk (bokm\u00e5l)\u202c",
"nov":"Novial",
"nrm":"Nouormand",
"nso":"Sesotho sa Leboa",
"nv":"Din\u00e9 bizaad",
"ny":"Chi-Chewa",
"oc":"Occitan",
"om":"Oromoo",
"or":"\u0b13\u0b21\u0b3c\u0b3f\u0b06",
"os":"\u0418\u0440\u043e\u043d\u0430\u0443",
"pa":"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40",
"pag":"Pangasinan",
"pam":"Kapampangan",
"pap":"Papiamentu",
"pcd":"Picard",
"pdc":"Deitsch",
"pdt":"Plautdietsch",
"pfl":"Pf\u00e4lzisch",
"pi":"\u092a\u093e\u093f\u0934",
"pih":"Norfuk \/ Pitkern",
"pl":"Polski",
"pms":"Piemont\u00e8is",
"pnb":"\u067e\u0646\u062c\u0627\u0628\u06cc",
"pnt":"\u03a0\u03bf\u03bd\u03c4\u03b9\u03b1\u03ba\u03ac",
"ps":"\u067e\u069a\u062a\u0648",
"pt":"Portugu\u00eas",
"pt-br":"Portugu\u00eas do Brasil",
"qu":"Runa Simi",
"rif":"Tarifit",
"rm":"Rumantsch",
"rmy":"Romani",
"rn":"Kirundi",
"ro":"Rom\u00e2n\u0103",
"roa-rup":"Arm\u00e3neashce",
"roa-tara":"Tarand\u00edne",
"ru":"\u0420\u0443\u0441\u0441\u043a\u0438\u0439",
"ruq":"Vl\u0103he\u015fte",
"ruq-cyrl":"\u0412\u043b\u0430\u0445\u0435\u0441\u0442\u0435",
"ruq-latn":"Vl\u0103he\u015fte",
"rw":"Kinyarwanda",
"sa":"\u0938\u0902\u0938\u094d\u0915\u0943\u0924",
"sah":"\u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430",
"sc":"Sardu",
"scn":"Sicilianu",
"sco":"Scots",
"sd":"\u0633\u0646\u068c\u064a",
"sdc":"Sassaresu",
"se":"S\u00e1megiella",
"sei":"Cmique Itom",
"sg":"S\u00e4ng\u00f6",
"sh":"Srpskohrvatski \/ \u0421\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438",
"shi":"Ta\u0161l\u1e25iyt",
"si":"\u0dc3\u0dd2\u0d82\u0dc4\u0dbd",
"simple":"Simple English",
"sk":"Sloven\u010dina",
"sl":"Sloven\u0161\u010dina",
"sli":"Schl\u00e4sch",
"sm":"Gagana Samoa",
"sma":"\u00c5arjelsaemien",
"sn":"chiShona",
"so":"Soomaaliga",
"sq":"Shqip",
"sr":"\u0421\u0440\u043f\u0441\u043a\u0438 \/ Srpski",
"sr-ec":"\u0421\u0440\u043f\u0441\u043a\u0438 (\u045b\u0438\u0440\u0438\u043b\u0438\u0446\u0430)",
"sr-el":"Srpski (latinica)",
"srn":"Sranantongo",
"ss":"SiSwati",
"st":"Sesotho",
"stq":"Seeltersk",
"su":"Basa Sunda",
"sv":"Svenska",
"sw":"Kiswahili",
"szl":"\u015al\u016fnski",
"ta":"\u0ba4\u0bae\u0bbf\u0bb4\u0bcd",
"tcy":"\u0ca4\u0cc1\u0cb3\u0cc1",
"te":"\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41",
"tet":"Tetun",
"tg":"\u0422\u043e\u04b7\u0438\u043a\u04e3",
"tg-cyrl":"\u0422\u043e\u04b7\u0438\u043a\u04e3",
"tg-latn":"tojik\u012b",
"th":"\u0e44\u0e17\u0e22",
"ti":"\u1275\u130d\u122d\u129b",
"tk":"T\u00fcrkmen\u00e7e",
"tl":"Tagalog",
"tn":"Setswana",
"to":"lea faka-Tonga",
"tokipona":"Toki Pona",
"tp":"Toki Pona (deprecated:tokipona)",
"tpi":"Tok Pisin",
"tr":"T\u00fcrk\u00e7e",
"ts":"Xitsonga",
"tt":"\u0422\u0430\u0442\u0430\u0440\u0447\u0430\/Tatar\u00e7a",
"tt-cyrl":"\u0422\u0430\u0442\u0430\u0440\u0447\u0430",
"tt-latn":"Tatar\u00e7a",
"tum":"chiTumbuka",
"tw":"Twi",
"ty":"Reo M\u0101`ohi",
"tyv":"\u0422\u044b\u0432\u0430 \u0434\u044b\u043b",
"udm":"\u0423\u0434\u043c\u0443\u0440\u0442",
"ug":"Uyghurche\u200e \/ \u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5",
"ug-arab":"\u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5",
"ug-latn":"Uyghurche\u200e",
"uk":"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430",
"ur":"\u0627\u0631\u062f\u0648",
"uz":"O'zbek",
"ve":"Tshivenda",
"vec":"V\u00e8neto",
"vep":"Vepsan kel'",
"vi":"Ti\u1ebfng Vi\u1ec7t",
"vls":"West-Vlams",
"vo":"Volap\u00fck",
"vro":"V\u00f5ro",
"wa":"Walon",
"war":"Winaray",
"wo":"Wolof",
"wuu":"\u5434\u8bed",
"xal":"\u0425\u0430\u043b\u044c\u043c\u0433",
"xh":"isiXhosa",
"xmf":"\u10db\u10d0\u10e0\u10d2\u10d0\u10da\u10e3\u10e0\u10d8",
"yi":"\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9",
"yo":"Yor\u00f9b\u00e1",
"yue":"\u7cb5\u8a9e",
"za":"Vahcuengh",
"zea":"Ze\u00eauws",
"zh":"\u4e2d\u6587",
"zh-classical":"\u6587\u8a00",
"zh-cn":"\u202a\u4e2d\u6587(\u4e2d\u56fd\u5927\u9646)\u202c",
"zh-hans":"\u202a\u4e2d\u6587(\u7b80\u4f53)\u202c",
"zh-hant":"\u202a\u4e2d\u6587(\u7e41\u9ad4)\u202c",
"zh-hk":"\u202a\u4e2d\u6587(\u9999\u6e2f)\u202c",
"zh-min-nan":"B\u00e2n-l\u00e2m-g\u00fa",
"zh-mo":"\u202a\u4e2d\u6587(\u6fb3\u9580)\u202c",
"zh-my":"\u202a\u4e2d\u6587(\u9a6c\u6765\u897f\u4e9a)\u202c",
"zh-sg":"\u202a\u4e2d\u6587(\u65b0\u52a0\u5761)\u202c",
"zh-tw":"\u202a\u4e2d\u6587(\u53f0\u7063)\u202c",
"zh-yue":"\u7cb5\u8a9e",
"zu":"isiZulu"
};





















mw.Language.gender=function(gender,forms){
if(!forms.length){
return'';
}
forms=mw.Language.preConvertPlural(forms,2);
if(gender==='male')return forms[0];
if(gender==='female')return forms[1];
return(forms[2])?forms[2]:forms[0];
};











mw.Language.procPLURAL=function(templateObject){


var rs=gRuleSet['PLURAL'];

if(templateObject.arg&&templateObject.param&&mw.Language.convertPlural){

if(templateObject.param.length==0){
return'';
}

var count=mw.Language.convertNumber(templateObject.arg,true);


return mw.Language.convertPlural(parseInt(count),templateObject.param);

}

if(templateObject.param[0]){
return templateObject.param[0];
}
return'';
};


mw.Language.procGENDER=function(templateObject){
return'gender-not-supported-in-js-yet';
}



mw.Language.convertPlural=function(count,forms){
if(!forms||forms.length==0){
return'';
}
return(parseInt(count)==1)?forms[0]:forms[1];
};








mw.Language.preConvertPlural=function(forms,count){
while(forms.length<count){
forms.push(forms[forms.length-1]);
}
return forms;
};




mw.Language.digitTransformTable=null;






mw.Language.convertNumber=function(number,typeInt){
if(!mw.Language.digitTransformTable)
return number;


var transformTable=mw.Language.digitTransformTable;


if(typeInt){
if(parseInt(number)==number)
return number;
var tmp=[];
for(var i in transformTable){
tmp[transformTable[i]]=i;
}
transformTable=tmp;
}

var numberString=''+number;
var convertedNumber='';
for(var i=0;i<numberString.length;i++){
if(transformTable[numberString[i]]){
convertedNumber+=transformTable[numberString[i]];
}else{
convertedNumber+=numberString[i];
}
}
return(typeInt)?parseInt(convertedNumber):convertedNumber;
}






mw.isValidLang=function(langKey){
return(mw.Language.names[langKey])?true:false;
}






mw.Language.addDecimalSeparators=function(num){






function addSeparatorsNF(nStr,outD,sep){
nStr+='';
var dpos=nStr.indexOf('.');
var nStrEnd='';
if(dpos!=-1){
nStrEnd=outD+nStr.substring(dpos+1,nStr.length);
nStr=nStr.substring(0,dpos);
}
var rgx=/(\d+)(\d{3})/;
while(rgx.test(nStr)){
nStr=nStr.replace(rgx,'$1'+sep+'$2');
}
return nStr+nStrEnd;
}

return addSeparatorsNF(num,'.',',');
}

})(window.mw);


window['gM']=mw.getMsg;






var JQUERY_SWAP_STRING='ZjQuerySwapZ';
var LINK_SWAP_STRING='ZreplaceZ';

(function(mw){


var pMagicSet={};








mw.addTemplateTransform=function(magicSet){
for(var name in magicSet){
pMagicSet[name]=magicSet[name];
}
};








mw.Parser=function(wikiText,options){

this.init(wikiText,options);
};

mw.Parser.prototype={


pOut:false,

init:function(wikiText,parserOptions){
this.wikiText=wikiText;
},


updateText:function(wikiText){
this.wikiText=wikiText;


this.pOut=false;
},




parse:function(){
function recurseTokenizeNodes(text){
var node={};

for(var a=0;a<text.length;a++){
if(text[a]=='{'&&text[a+1]=='{'){
a=a+2;
node['parent']=node;
if(!node['child']){
node['child']=new Array();
}

node['child'].push(recurseTokenizeNodes(text.substr(a)));
}else if(text[a]=='}'&&text[a+1]=='}'){
a++;
if(!node['parent']){
return node;
}
node=node['parent'];
}
if(!node['text']){
node['text']='';
}

if(text[a]&&text[a]!='}'){
node['text']+=text[a];
}
}
return node;
}





function parseTmplTxt(templateString){
var templateObject={};


templateName=templateString.split('\|').shift();
templateName=templateName.split('\{').shift();
templateName=templateName.replace(/^\s+|\s+$/g,"");


if(templateName.split(':').length==1){
templateObject["name"]=templateName;
}else{
templateObject["name"]=templateName.split(':').shift();
templateObject["arg"]=templateName.split(':').pop();
}

var paramSet=templateString.split('\|');
paramSet.splice(0,1);
if(paramSet.length){
templateObject.param=new Array();
for(var pInx=0;pInx<paramSet.length;pInx++){
var paramString=paramSet[pInx];

if(paramString==''){
templateObject.param[pInx]='';
continue;
}
for(var b=0;b<paramString.length;b++){
if(paramString[b]=='='&&b>0&&b<paramString.length&&paramString[b-1]!='\\'){

templateObject.param[paramString.split('=').shift()]=paramString.split('=').pop();
}else{

templateObject.param[pInx]=paramString;
}
}
}
}
return templateObject;
}




function getMagicTxtFromTempNode(node){
node.templateObject=parseTmplTxt(node.text);

if(node.templateObject.name in pMagicSet){
var nodeText=pMagicSet[node.templateObject.name](node.templateObject);
return nodeText;
}else{

return node.text;
}
}








function linkSwapText(text){

var re=new RegExp(/\[([^\s]+[\s]+[^\]]*)\]/g);
var matchSet=text.match(re);

if(!matchSet){
return text;
}

text=text.replace(re,LINK_SWAP_STRING);

for(var i=0;i<matchSet.length;i++){

var matchParts=matchSet[i].substr(1,matchSet[i].length-2);


if(matchParts.indexOf(JQUERY_SWAP_STRING)!==-1){

var $matchParts=$j('<span>'+matchParts+'</span>');

$jQuerySpan=$matchParts.find('#'+JQUERY_SWAP_STRING+i);

var linkText=$matchParts.text();

$jQuerySpan.text(linkText);

text=text.replace(LINK_SWAP_STRING,$j('<span />').append($jQuerySpan).html());
}else{

matchParts=matchParts.split(/ /);
var link=matchParts[0];
matchParts.shift();
var linkText=matchParts.join(' ');

text=text.replace(LINK_SWAP_STRING,'<a href="'+link+'">'+linkText+'</a>');
}
}
return text;
}






var pNode=null;
function recurse_magic_swap(node){
if(!pNode)
pNode=node;

if(node['child']){

for(var i=0;i<node['child'].length;i++){
var nodeText=recurse_magic_swap(node['child'][i]);

if(node.text){
node.text=node.text.replace(node['child'][i].text,nodeText);
}

pNode.text=pNode.text.replace(node['child'][i].text,nodeText);
}

var nodeText=getMagicTxtFromTempNode(node);
pNode.text=pNode.text.replace(node.text,nodeText);

return node.text;
}else{
return getMagicTxtFromTempNode(node);
}
}


this.pNode=recurseTokenizeNodes(this.wikiText);


this.pNode['parent']=null;


this.pOut=recurse_magic_swap(this.pNode);


this.pOut=linkSwapText(this.pOut);
},







templates:function(templateName){
this.parse();
var tmplSet=new Array();
function getMatchingTmpl(node){
if(node['child']){
for(var i=0;i<node['child'].length;i++){
getMatchingTmpl(node['child']);
}
}
if(templateName&&node.templateObject){
if(node.templateObject['name']==templateName)
tmplSet.push(node.templateObject);
}else if(node.templateObject){
tmplSet.push(node.templateObject);
}
}
getMatchingTmpl(this.pNode);
return tmplSet;
},







getTemplateVars:function(){

templateVars=new Array();
var tempVars=wikiText.match(/\{\{\{([^\}]*)\}\}\}/gi);


for(var i=0;i<tempVars.length;i++){

var tvar=tempVars[i].replace('{{{','').replace('}}}','');


if(tvar.indexOf('|')!=-1){
tvar=tvar.substr(0,tvar.indexOf('|'));
}


var do_add=true;
for(var j=0;j<templateVars.length;j++){
if(templateVars[j]==tvar)
do_add=false;
}


if(do_add)
templateVars.push(tvar);
}
return templateVars;
},













getHTML:function(){

if(!this.pOut){
this.parse();
}
return this.pOut;
}
};

})(window.mw);
mw.addMessages({
"mwe-upwiz-code-unknown":"Unknown language"
});





mw.LanguageUpWiz={

defaultCode:'en',

initialized:false,

UNKNOWN:'unknown',









languages:[
{code:"ace",text:"Ac\u00e8h"},
{code:"af",text:"Afrikaans"},
{code:"ak",text:"Akan"},
{code:"als",text:"Alemannisch"},
{code:"gsw",text:"Alemannisch"},
{code:"ang",text:"Anglo-Saxon"},
{code:"an",text:"Aragon\u00e9s"},
{code:"roa-rup",text:"Arm\u00e3neashce"},
{code:"frp",text:"Arpetan"},
{code:"ast",text:"Asturianu"},
{code:"gn",text:"Ava\u00f1e'\u1ebd"},
{code:"ay",text:"Aymar aru"},
{code:"az",text:"Az\u0259rbaycan"},
{code:"id",text:"Bahasa Indonesia"},
{code:"ms",text:"Bahasa Melayu"},
{code:"bm",text:"Bamanankan"},
{code:"map-bms",text:"Basa Banyumasan"},
{code:"jv",text:"Basa Jawa"},
{code:"su",text:"Basa Sunda"},
{code:"bcl",text:"Bikol Central"},
{code:"bi",text:"Bislama"},
{code:"bar",text:"Boarisch"},
{code:"bs",text:"Bosanski"},
{code:"br",text:"Brezhoneg"},
{code:"en-gb",text:"British English"},
{code:"nan",text:"B\u00e2n-l\u00e2m-g\u00fa"},
{code:"zh-min-nan",text:"B\u00e2n-l\u00e2m-g\u00fa"},
{code:"ca",text:"Catal\u00e0"},
{code:"ceb",text:"Cebuano"},
{code:"ch",text:"Chamoru"},
{code:"cbk-zam",text:"Chavacano de Zamboanga"},
{code:"ny",text:"Chi-Chewa"},
{code:"cho",text:"Choctaw"},
{code:"sei",text:"Cmique Itom"},
{code:"co",text:"Corsu"},
{code:"cy",text:"Cymraeg"},
{code:"da",text:"Dansk"},
{code:"dk",text:"Dansk (deprecated:da)"},
{code:"pdc",text:"Deitsch"},
{code:"de",text:"Deutsch"},
{code:"de-formal",text:"Deutsch (Sie-Form)"},
{code:"nv",text:"Din\u00e9 bizaad"},
{code:"dsb",text:"Dolnoserbski"},
{code:"na",text:"Dorerin Naoero"},
{code:"mh",text:"Ebon"},
{code:"et",text:"Eesti"},
{code:"eml",text:"Emili\u00e0n e rumagn\u00f2l"},
{code:"en",text:"English"},
{code:"es",text:"Espa\u00f1ol"},
{code:"eo",text:"Esperanto"},
{code:"ext",text:"Estreme\u00f1u"},
{code:"eu",text:"Euskara"},
{code:"ee",text:"E\u028begbe"},
{code:"hif",text:"Fiji Hindi"},
{code:"hif-latn",text:"Fiji Hindi"},
{code:"fr",text:"Fran\u00e7ais"},
{code:"frc",text:"Fran\u00e7ais canadien"},
{code:"fy",text:"Frysk"},
{code:"ff",text:"Fulfulde"},
{code:"fur",text:"Furlan"},
{code:"fo",text:"F\u00f8royskt"},
{code:"ga",text:"Gaeilge"},
{code:"gv",text:"Gaelg"},
{code:"sm",text:"Gagana Samoa"},
{code:"gag",text:"Gagauz"},
{code:"gl",text:"Galego"},
{code:"aln",text:"Geg\u00eb"},
{code:"gd",text:"G\u00e0idhlig"},
{code:"ki",text:"G\u0129k\u0169y\u0169"},
{code:"hak",text:"Hak-k\u00e2-fa"},
{code:"haw",text:"Hawai`i"},
{code:"ho",text:"Hiri Motu"},
{code:"hsb",text:"Hornjoserbsce"},
{code:"hr",text:"Hrvatski"},
{code:"io",text:"Ido"},
{code:"ig",text:"Igbo"},
{code:"ilo",text:"Ilokano"},
{code:"hil",text:"Ilonggo"},
{code:"ia",text:"Interlingua"},
{code:"ie",text:"Interlingue"},
{code:"it",text:"Italiano"},
{code:"ik",text:"I\u00f1upiak"},
{code:"jut",text:"Jysk"},
{code:"kl",text:"Kalaallisut"},
{code:"kr",text:"Kanuri"},
{code:"pam",text:"Kapampangan"},
{code:"csb",text:"Kasz\u00ebbsczi"},
{code:"kw",text:"Kernowek"},
{code:"krj",text:"Kinaray-a"},
{code:"rw",text:"Kinyarwanda"},
{code:"rn",text:"Kirundi"},
{code:"sw",text:"Kiswahili"},
{code:"kg",text:"Kongo"},
{code:"avk",text:"Kotava"},
{code:"ht",text:"Krey\u00f2l ayisyen"},
{code:"kri",text:"Krio"},
{code:"ku",text:"Kurd\u00ee \/ \u0643\u0648\u0631\u062f\u06cc"},
{code:"kiu",text:"Kurmanc\u00ee"},
{code:"kj",text:"Kwanyama"},
{code:"lad",text:"Ladino"},
{code:"la",text:"Latina"},
{code:"lv",text:"Latvie\u0161u"},
{code:"lt",text:"Lietuvi\u0173"},
{code:"li",text:"Limburgs"},
{code:"lfn",text:"Lingua Franca Nova"},
{code:"ln",text:"Ling\u00e1la"},
{code:"jbo",text:"Lojban"},
{code:"lg",text:"Luganda"},
{code:"lmo",text:"Lumbaart"},
{code:"lb",text:"L\u00ebtzebuergesch"},
{code:"lij",text:"L\u00edguru"},
{code:"hu",text:"Magyar"},
{code:"mg",text:"Malagasy"},
{code:"mt",text:"Malti"},
{code:"arn",text:"Mapudungun"},
{code:"mwl",text:"Mirand\u00e9s"},
{code:"mus",text:"Mvskoke"},
{code:"cdo",text:"M\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304"},
{code:"mi",text:"M\u0101ori"},
{code:"fj",text:"Na Vosa Vakaviti"},
{code:"nl",text:"Nederlands"},
{code:"nds-nl",text:"Nedersaksisch"},
{code:"niu",text:"Niu\u0113"},
{code:"nap",text:"Nnapulitano"},
{code:"pih",text:"Norfuk \/ Pitkern"},
{code:"nb",text:"Norsk (bokm\u00e5l)"},
{code:"no",text:"Norsk (bokm\u00e5l)"},
{code:"nn",text:"Norsk (nynorsk)"},
{code:"nrm",text:"Nouormand"},
{code:"nov",text:"Novial"},
{code:"nah",text:"N\u0101huatl"},
{code:"cr",text:"N\u0113hiyaw\u0113win \/ \u14c0\u1426\u1403\u152d\u140d\u140f\u1423"},
{code:"uz",text:"O'zbek"},
{code:"oc",text:"Occitan"},
{code:"om",text:"Oromoo"},
{code:"ng",text:"Oshiwambo"},
{code:"hz",text:"Otsiherero"},
{code:"pag",text:"Pangasinan"},
{code:"pap",text:"Papiamentu"},
{code:"pfl",text:"Pf\u00e4lzisch"},
{code:"pcd",text:"Picard"},
{code:"pms",text:"Piemont\u00e8is"},
{code:"nds",text:"Plattd\u00fc\u00fctsch"},
{code:"pdt",text:"Plautdietsch"},
{code:"pl",text:"Polski"},
{code:"pt",text:"Portugu\u00eas"},
{code:"pt-br",text:"Portugu\u00eas do Brasil"},
{code:"aa",text:"Qaf\u00e1r af"},
{code:"kaa",text:"Qaraqalpaqsha"},
{code:"crh",text:"Q\u0131r\u0131mtatarca"},
{code:"ty",text:"Reo M\u0101`ohi"},
{code:"ksh",text:"Ripoarisch"},
{code:"rmy",text:"Romani"},
{code:"ro",text:"Rom\u00e2n\u0103"},
{code:"rm",text:"Rumantsch"},
{code:"qu",text:"Runa Simi"},
{code:"sc",text:"Sardu"},
{code:"sdc",text:"Sassaresu"},
{code:"sli",text:"Schl\u00e4sch"},
{code:"de-ch",text:"Schweizer Hochdeutsch"},
{code:"sco",text:"Scots"},
{code:"stq",text:"Seeltersk"},
{code:"st",text:"Sesotho"},
{code:"nso",text:"Sesotho sa Leboa"},
{code:"tn",text:"Setswana"},
{code:"sq",text:"Shqip"},
{code:"ss",text:"SiSwati"},
{code:"scn",text:"Sicilianu"},
{code:"loz",text:"Silozi"},
{code:"simple",text:"Simple English"},
{code:"sk",text:"Sloven\u010dina"},
{code:"sl",text:"Sloven\u0161\u010dina"},
{code:"so",text:"Soomaaliga"},
{code:"ckb",text:"Soran\u00ee \/ \u06a9\u0648\u0631\u062f\u06cc"},
{code:"srn",text:"Sranantongo"},
{code:"sr-el",text:"Srpski (latinica)"},
{code:"sh",text:"Srpskohrvatski \/ \u0421\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438"},
{code:"fi",text:"Suomi"},
{code:"sv",text:"Svenska"},
{code:"se",text:"S\u00e1megiella"},
{code:"sg",text:"S\u00e4ng\u00f6"},
{code:"tl",text:"Tagalog"},
{code:"kab",text:"Taqbaylit"},
{code:"roa-tara",text:"Tarand\u00edne"},
{code:"rif",text:"Tarifit"},
{code:"tt-latn",text:"Tatar\u00e7a"},
{code:"shi",text:"Ta\u0161l\u1e25iyt"},
{code:"tet",text:"Tetun"},
{code:"vi",text:"Ti\u1ebfng Vi\u1ec7t"},
{code:"tpi",text:"Tok Pisin"},
{code:"tokipona",text:"Toki Pona"},
{code:"tp",text:"Toki Pona (deprecated:tokipona)"},
{code:"chy",text:"Tsets\u00eahest\u00e2hese"},
{code:"ve",text:"Tshivenda"},
{code:"tw",text:"Twi"},
{code:"tk",text:"T\u00fcrkmen\u00e7e"},
{code:"tr",text:"T\u00fcrk\u00e7e"},
{code:"ug-latn",text:"Uyghurche\u200e"},
{code:"ug",text:"Uyghurche\u200e \/ \u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5"},
{code:"za",text:"Vahcuengh"},
{code:"vep",text:"Vepsan kel'"},
{code:"ruq",text:"Vl\u0103he\u015fte"},
{code:"ruq-latn",text:"Vl\u0103he\u015fte"},
{code:"vo",text:"Volap\u00fck"},
{code:"vec",text:"V\u00e8neto"},
{code:"fiu-vro",text:"V\u00f5ro"},
{code:"vro",text:"V\u00f5ro"},
{code:"wa",text:"Walon"},
{code:"vls",text:"West-Vlams"},
{code:"war",text:"Winaray"},
{code:"wo",text:"Wolof"},
{code:"ts",text:"Xitsonga"},
{code:"yo",text:"Yor\u00f9b\u00e1"},
{code:"diq",text:"Zazaki"},
{code:"zea",text:"Ze\u00eauws"},
{code:"sn",text:"chiShona"},
{code:"tum",text:"chiTumbuka"},
{code:"ike-latn",text:"inuktitut"},
{code:"xh",text:"isiXhosa"},
{code:"zu",text:"isiZulu"},
{code:"to",text:"lea faka-Tonga"},
{code:"tg-latn",text:"tojik\u012b"},
{code:"is",text:"\u00cdslenska"},
{code:"de-at",text:"\u00d6sterreichisches Deutsch"},
{code:"szl",text:"\u015al\u016fnski"},
{code:"el",text:"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac"},
{code:"pnt",text:"\u03a0\u03bf\u03bd\u03c4\u03b9\u03b1\u03ba\u03ac"},
{code:"av",text:"\u0410\u0432\u0430\u0440"},
{code:"ab",text:"\u0410\u04a7\u0441\u0443\u0430"},
{code:"ba",text:"\u0411\u0430\u0448\u04a1\u043e\u0440\u0442"},
{code:"be",text:"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f"},
{code:"be-tarask",text:"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)"},
{code:"be-x-old",text:"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)"},
{code:"bxr",text:"\u0411\u0443\u0440\u044f\u0430\u0434"},
{code:"bg",text:"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438"},
{code:"ruq-cyrl",text:"\u0412\u043b\u0430\u0445\u0435\u0441\u0442\u0435"},
{code:"inh",text:"\u0413\u0406\u0430\u043b\u0433\u0406\u0430\u0439 \u011eal\u011faj"},
{code:"os",text:"\u0418\u0440\u043e\u043d\u0430\u0443"},
{code:"kv",text:"\u041a\u043e\u043c\u0438"},
{code:"ky",text:"\u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430"},
{code:"lbe",text:"\u041b\u0430\u043a\u043a\u0443"},
{code:"lez",text:"\u041b\u0435\u0437\u0433\u0438"},
{code:"mk",text:"\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438"},
{code:"mdf",text:"\u041c\u043e\u043a\u0448\u0435\u043d\u044c"},
{code:"mo",text:"\u041c\u043e\u043b\u0434\u043e\u0432\u0435\u043d\u044f\u0441\u043a\u044d"},
{code:"mn",text:"\u041c\u043e\u043d\u0433\u043e\u043b"},
{code:"ce",text:"\u041d\u043e\u0445\u0447\u0438\u0439\u043d"},
{code:"mhr",text:"\u041e\u043b\u044b\u043a \u041c\u0430\u0440\u0438\u0439"},
{code:"ru",text:"\u0420\u0443\u0441\u0441\u043a\u0438\u0439"},
{code:"sah",text:"\u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430"},
{code:"cu",text:"\u0421\u043b\u043e\u0432\u0463\u0301\u043d\u044c\u0441\u043a\u044a \/ \u2c14\u2c0e\u2c11\u2c02\u2c21\u2c10\u2c20\u2c14\u2c0d\u2c1f"},
{code:"sr-ec",text:"\u0421\u0440\u043f\u0441\u043a\u0438 (\u045b\u0438\u0440\u0438\u043b\u0438\u0446\u0430)"},
{code:"sr",text:"\u0421\u0440\u043f\u0441\u043a\u0438 \/ Srpski"},
{code:"tt-cyrl",text:"\u0422\u0430\u0442\u0430\u0440\u0447\u0430"},
{code:"tt",text:"\u0422\u0430\u0442\u0430\u0440\u0447\u0430\/Tatar\u00e7a"},
{code:"tg",text:"\u0422\u043e\u04b7\u0438\u043a\u04e3"},
{code:"tg-cyrl",text:"\u0422\u043e\u04b7\u0438\u043a\u04e3"},
{code:"tyv",text:"\u0422\u044b\u0432\u0430 \u0434\u044b\u043b"},
{code:"udm",text:"\u0423\u0434\u043c\u0443\u0440\u0442"},
{code:"uk",text:"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430"},
{code:"xal",text:"\u0425\u0430\u043b\u044c\u043c\u0433"},
{code:"cv",text:"\u0427\u04d1\u0432\u0430\u0448\u043b\u0430"},
{code:"myv",text:"\u042d\u0440\u0437\u044f\u043d\u044c"},
{code:"kk",text:"\u049a\u0430\u0437\u0430\u049b\u0448\u0430"},
{code:"hy",text:"\u0540\u0561\u0575\u0565\u0580\u0565\u0576"},
{code:"yi",text:"\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9"},
{code:"he",text:"\u05e2\u05d1\u05e8\u05d9\u05ea"},
{code:"ug-arab",text:"\u0626\u06c7\u064a\u063a\u06c7\u0631\u0686\u06d5"},
{code:"ur",text:"\u0627\u0631\u062f\u0648"},
{code:"ar",text:"\u0627\u0644\u0639\u0631\u0628\u064a\u0629"},
{code:"bqi",text:"\u0628\u062e\u062a\u064a\u0627\u0631\u064a"},
{code:"bcc",text:"\u0628\u0644\u0648\u0686\u06cc \u0645\u06a9\u0631\u0627\u0646\u06cc"},
{code:"sd",text:"\u0633\u0646\u068c\u064a"},
{code:"fa",text:"\u0641\u0627\u0631\u0633\u06cc"},
{code:"arz",text:"\u0645\u0635\u0631\u0649"},
{code:"mzn",text:"\u0645\u064e\u0632\u0650\u0631\u0648\u0646\u064a"},
{code:"ha",text:"\u0647\u064e\u0648\u064f\u0633\u064e"},
{code:"pnb",text:"\u067e\u0646\u062c\u0627\u0628\u06cc"},
{code:"ps",text:"\u067e\u069a\u062a\u0648"},
{code:"glk",text:"\u06af\u06cc\u0644\u06a9\u06cc"},
{code:"arc",text:"\u0710\u072a\u0721\u071d\u0710"},
{code:"dv",text:"\u078b\u07a8\u0788\u07ac\u0780\u07a8\u0784\u07a6\u0790\u07b0"},
{code:"ks",text:"\u0915\u0936\u094d\u092e\u0940\u0930\u0940 - (\u0643\u0634\u0645\u064a\u0631\u064a)"},
{code:"new",text:"\u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e"},
{code:"ne",text:"\u0928\u0947\u092a\u093e\u0932\u0940"},
{code:"pi",text:"\u092a\u093e\u093f\u0934"},
{code:"hif-deva",text:"\u092b\u093c\u0940\u091c\u0940 \u0939\u093f\u0928\u094d\u0926\u0940"},
{code:"bh",text:"\u092d\u094b\u091c\u092a\u0941\u0930\u0940"},
{code:"mr",text:"\u092e\u0930\u093e\u0920\u0940"},
{code:"mai",text:"\u092e\u0948\u0925\u093f\u0932\u0940"},
{code:"sa",text:"\u0938\u0902\u0938\u094d\u0915\u0943\u0924"},
{code:"hi",text:"\u0939\u093f\u0928\u094d\u0926\u0940"},
{code:"as",text:"\u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be"},
{code:"bpy",text:"\u0987\u09ae\u09be\u09b0 \u09a0\u09be\u09b0\/\u09ac\u09bf\u09b7\u09cd\u09a3\u09c1\u09aa\u09cd\u09b0\u09bf\u09af\u09bc\u09be \u09ae\u09a3\u09bf\u09aa\u09c1\u09b0\u09c0"},
{code:"bn",text:"\u09ac\u09be\u0982\u09b2\u09be"},
{code:"pa",text:"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40"},
{code:"gu",text:"\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0"},
{code:"or",text:"\u0b13\u0b21\u0b3c\u0b3f\u0b06"},
{code:"ta",text:"\u0ba4\u0bae\u0bbf\u0bb4\u0bcd"},
{code:"te",text:"\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41"},
{code:"sma",text:"\u00c5arjelsaemien"},
{code:"kn",text:"\u0c95\u0ca8\u0ccd\u0ca8\u0ca1"},
{code:"tcy",text:"\u0ca4\u0cc1\u0cb3\u0cc1"},
{code:"ml",text:"\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02"},
{code:"si",text:"\u0dc3\u0dd2\u0d82\u0dc4\u0dbd"},
{code:"th",text:"\u0e44\u0e17\u0e22"},
{code:"lo",text:"\u0ea5\u0eb2\u0ea7"},
{code:"dz",text:"\u0f47\u0f7c\u0f44\u0f0b\u0f41"},
{code:"bo",text:"\u0f56\u0f7c\u0f51\u0f0b\u0f61\u0f72\u0f42"},
{code:"my",text:"\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c"},
{code:"cs",text:"\u010cesky"},
{code:"xmf",text:"\u10db\u10d0\u10e0\u10d2\u10d0\u10da\u10e3\u10e0\u10d8"},
{code:"ka",text:"\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8"},
{code:"ti",text:"\u1275\u130d\u122d\u129b"},
{code:"am",text:"\u12a0\u121b\u122d\u129b"},
{code:"chr",text:"\u13e3\u13b3\u13a9"},
{code:"ike-cans",text:"\u1403\u14c4\u1483\u144e\u1450\u1466"},
{code:"iu",text:"\u1403\u14c4\u1483\u144e\u1450\u1466\/inuktitut"},
{code:"km",text:"\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a"},
{code:"bat-smg",text:"\u017demait\u0117\u0161ka"},
{code:"bug",text:"\u1a05\u1a14 \u1a15\u1a18\u1a01\u1a17"},
{code:"grc",text:"\u1f08\u03c1\u03c7\u03b1\u03af\u03b1 \u1f11\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u1f74"},
{code:"ku-latn",text:"\u202aKurd\u00ee (lat\u00een\u00ee)\u202c"},
{code:"kk-tr",text:"\u202aQazaq\u015fa (T\u00fcrk\u00efya)\u202c"},
{code:"kk-latn",text:"\u202aQazaq\u015fa (lat\u0131n)\u202c"},
{code:"crh-latn",text:"\u202aQ\u0131r\u0131mtatarca (Latin)\u202c"},
{code:"crh-cyrl",text:"\u202a\u041a\u044a\u044b\u0440\u044b\u043c\u0442\u0430\u0442\u0430\u0440\u0434\u0436\u0430 (\u041a\u0438\u0440\u0438\u043b\u043b)\u202c"},
{code:"kk-cyrl",text:"\u202a\u049a\u0430\u0437\u0430\u049b\u0448\u0430 (\u043a\u0438\u0440\u0438\u043b)\u202c"},
{code:"kk-kz",text:"\u202a\u049a\u0430\u0437\u0430\u049b\u0448\u0430 (\u049a\u0430\u0437\u0430\u049b\u0441\u0442\u0430\u043d)\u202c"},
{code:"kk-arab",text:"\u202b\u0642\u0627\u0632\u0627\u0642\u0634\u0627 (\u062a\u0674\u0648\u062a\u06d5)\u202c"},
{code:"kk-cn",text:"\u202b\u0642\u0627\u0632\u0627\u0642\u0634\u0627 (\u062c\u06c7\u0646\u06af\u0648)\u202c"},
{code:"ku-arab",text:"\u202b\u0643\u0648\u0631\u062f\u064a (\u0639\u06d5\u0631\u06d5\u0628\u06cc)\u202c"},
{code:"zh",text:"\u4e2d\u6587"},
{code:"zh-cn",text:"\u4e2d\u6587(\u4e2d\u56fd\u5927\u9646)"},
{code:"zh-tw",text:"\u4e2d\u6587(\u53f0\u7063)"},
{code:"zh-sg",text:"\u4e2d\u6587(\u65b0\u52a0\u5761)"},
{code:"zh-mo",text:"\u4e2d\u6587(\u6fb3\u9580)"},
{code:"zh-hans",text:"\u4e2d\u6587(\u7b80\u4f53)"},
{code:"zh-hant",text:"\u4e2d\u6587(\u7e41\u9ad4)"},
{code:"zh-hk",text:"\u4e2d\u6587(\u9999\u6e2f)"},
{code:"zh-my",text:"\u4e2d\u6587(\u9a6c\u6765\u897f\u4e9a)"},
{code:"wuu",text:"\u5434\u8bed"},
{code:"lzh",text:"\u6587\u8a00"},
{code:"zh-classical",text:"\u6587\u8a00"},
{code:"ja",text:"\u65e5\u672c\u8a9e"},
{code:"yue",text:"\u7cb5\u8a9e"},
{code:"zh-yue",text:"\u7cb5\u8a9e"},
{code:"gan",text:"\u8d1b\u8a9e"},
{code:"gan-hant",text:"\u8d1b\u8a9e(\u7e41\u9ad4)"},
{code:"gan-hans",text:"\u8d63\u8bed(\u7b80\u4f53)"},
{code:"ii",text:"\ua187\ua259"},
{code:"ko",text:"\ud55c\uad6d\uc5b4"},
{code:"ko-kp",text:"\ud55c\uad6d\uc5b4 (\uc870\uc120)"},
{code:"got",text:"\ud800\udf32\ud800\udf3f\ud800\udf44\ud800\udf39\ud800\udf43\ud800\udf3a"}
],






initialize:function(){
if(mw.LanguageUpWiz.initialized){
return;
}
mw.LanguageUpWiz._codes={};
var select=$j('<select/>');
$j.each(mw.LanguageUpWiz.languages,function(i,language){
select.append(
$j('<option>')
.attr('value',language.code)
.append(language.text)
);
mw.LanguageUpWiz._codes[language.code]=language.text;
});
mw.LanguageUpWiz.$_select=select;
mw.LanguageUpWiz.initialized=true;
},







getMenu:function(name,code){
mw.LanguageUpWiz.initialize();
var $select=mw.LanguageUpWiz.$_select.clone();
$select.attr('name',name);
if(code===mw.LanguageUpWiz.UNKNOWN){

$select.prepend($j('<option>').attr('value',mw.LanguageUpWiz.UNKNOWN).append(gM('mwe-upwiz-code-unknown')));
$select.val(mw.LanguageUpWiz.UNKNOWN);
}else if(code!==undefined){
$select.val(mw.LanguageUpWiz.getClosest(code));
}
return $select.get(0);
},















getClosest:function(code){
mw.LanguageUpWiz.initialize();
if(typeof(code)!='string'||code===null||code.length===0){
return mw.LanguageUpWiz.defaultCode;
}
if(code=='nan'||code=='minnan'){
return'zh-min-nan';
}else if(mw.LanguageUpWiz._codes[code]!==undefined){
return code;
}
return mw.LanguageUpWiz.getClosest(code.substring(0,code.indexOf('-')));
}







































};










mw.IframeTransport=function($form,progressCb,transportedCb){
this.$form=$form;
this.progressCb=progressCb;
this.transportedCb=transportedCb;

this.iframeId='f_'+($j('iframe').length+1);


var iframe;
try{
iframe=document.createElement('<iframe name="'+this.iframeId+'">');
}catch(ex){
iframe=document.createElement('iframe');
}
this.$iframe=$j(iframe);



var _this=this;
this.$iframe.attr({'src':'javascript:false;',
'id':this.iframeId,
'name':this.iframeId})
.load(function(){_this.configureForm();})
.css('display','none');

$j("body").append(iframe);
};

mw.IframeTransport.prototype={




configureForm:function(){
mw.log("configuring form for iframe transport");

this.$form.attr('target',this.iframeId);



this.$form.submit(function(){
mw.log("submitting to iframe...");
return true;
});


var _this=this;
$j('#'+this.iframeId).load(function(){
mw.log("received result in iframe");
_this.progressCb(1.0);
_this.processIframeResult($j(this).get(0));
});
},







processIframeResult:function(iframe){
var _this=this;
var doc=iframe.contentDocument?iframe.contentDocument:frames[iframe.id].document;

if(doc.readyState&&doc.readyState!='complete'){
mw.log("not complete");
return;
}


if(doc.body&&doc.body.innerHTML=="false"){
mw.log("no innerhtml");
return;
}
var response;
if(doc.XMLDocument){

response=doc.XMLDocument;
}else if(doc.body){




json=$j(doc.body).find('pre').text();
mw.log('iframe:json::'+json);
if(json){
response=window["eval"]("( "+json+" )");
}else{
response={};
}
}else{

response=doc;
}

_this.transportedCb(response);
}
};














mw.ApiUploadHandler=function(upload,api){
this.upload=upload;
this.api=api;
this.$form=$j(this.upload.ui.form);
this.configureForm();



var _this=this;
this.transport=new mw.IframeTransport(
this.$form,
function(fraction){
_this.upload.setTransportProgress(fraction);
},
function(result){
_this.upload.setTransported(result);
}
);

};

mw.ApiUploadHandler.prototype={





configureForm:function(){
var _this=this;
mw.log("configuring form for Upload API");


try{
this.$form.attr({
action:_this.api.url,
method:'POST',
enctype:'multipart/form-data'
});
}catch(e){
alert("oops, form modification didn't work in ApiUploadHandler");
mw.log("IE for some reason error's out when you change the action");


}

_this.addFormInputIfMissing('action','upload');


_this.addFormInputIfMissing('stash',1);


_this.addFormInputIfMissing('comment','DUMMY TEXT');


_this.addFormInputIfMissing('format','jsonfm');







},






configureEditToken:function(callerOk,err){
var _this=this;

var ok=function(token){
_this.addFormInputIfMissing('token',token);
callerOk();
};

_this.api.getEditToken(ok,err);
},






addFormInputIfMissing:function(name,value){
if(this.$form.find("[name='"+name+"']").length===0){
this.$form.append($j('<input />').attr({'type':"hidden",'name':name,'value':value}));
}
},




start:function(){
var _this=this;
var ok=function(){
mw.log("api: upload start!");
_this.beginTime=(new Date()).getTime();
_this.upload.ui.setStatus('mwe-upwiz-transport-started');
_this.upload.ui.showTransportProgress();
_this.$form.submit();
};
var err=function(code,info){
_this.upload.setFailed(code,info);
};
this.configureEditToken(ok,err);
}
};






















mw.DestinationChecker=function(options){

var _this=this;
_this.selector=options.selector;
_this.spinner=options.spinner;
_this.processResult=options.processResult;
_this.api=options.api;

$j.each(['preprocess','delay','events'],function(i,option){
if(options[option]){
_this[option]=options[option];
}
});




var check=_this.getDelayedChecker();

$j.each(_this.events,function(i,eventName){
$j(_this.selector)[eventName](check);
});

};

mw.DestinationChecker.prototype={


events:['change','keyup'],


delay:500,


timeoutId:null,


cachedResult:{},











preprocess:function(x){return x;},





getDelayedChecker:function(){
var checker=this;
return function(){
var el=this;


if(checker.timeoutId){
window.clearTimeout(checker.timeoutId);
}


checker.timeoutId=window.setTimeout(
function(){checker.checkUnique();},
checker.delay
);
};
},





getTitle:function(){
return this.preprocess($j(this.selector).val());
},





checkUnique:function(){
var _this=this;

var found=false;

var title=_this.getTitle();

if(_this.cachedResult[name]!==undefined){
_this.processResult(_this.cachedResult[name]);
return;
}


_this.spinner(true);



var params={
'titles':title,
'prop':'imageinfo',
'iiprop':'url|mime|size',
'iiurlwidth':150
};


_this.api.get(params,function(data){

_this.spinner(false);


if(title!=_this.getTitle()){
return;
}

if(!data||!data.query||!data.query.pages){

mw.log(" No data in checkUnique result");
return;
}

var result=undefined;

if(data.query.pages[-1]){

mw.log(" No pages in checkUnique result");
result={isUnique:true};

}else{

for(var page_id in data.query.pages){
if(!data.query.pages[page_id].imageinfo){
continue;
}


mw.log(" conflict! ");

var ntitle;
if(data.query.normalized){
ntitle=data.query.normalized[0].to;
}else{
ntitle=data.query.pages[page_id].title;
}

var img=data.query.pages[page_id].imageinfo[0];

result={
isUnique:false,
img:img,
title:ntitle,
href:img.descriptionurl
};

break;
}
}

if(result!==undefined){
_this.cachedResult[title]=result;
_this.processResult(result);
}

});
}

};





(function($){
$.fn.destinationChecked=function(options){
var _this=this;
options.selector=_this;
var checker=new mw.DestinationChecker(options);

_this.checkUnique=function(){checker.checkUnique();};
return _this;
};
})(jQuery);



mw.UploadWizardUtil={







makeToggler:function(toggleDiv,moreDiv){
var $toggleLink=$j('<a>')
.addClass('mwe-upwiz-toggler mwe-upwiz-more-options')
.append(gM('mwe-upwiz-more-options'));
$j(toggleDiv).append($toggleLink);


var toggle=function(open){
if(typeof open==='undefined'){
open=!($j(this).data('open'));
}
$j(this).data('open',open);
if(open){
moreDiv.maskSafeShow();

$toggleLink.html(gM('mwe-upwiz-fewer-options'));
$toggleLink.addClass("mwe-upwiz-toggler-open");
}else{
moreDiv.maskSafeHide();

$toggleLink.html(gM('mwe-upwiz-more-options'));
$toggleLink.removeClass("mwe-upwiz-toggler-open");
}
};

toggle(false);

$toggleLink.click(function(e){e.stopPropagation();toggle();});

$j(moreDiv).addClass('mwe-upwiz-toggled');
},








removeItem:function(items,item){
for(var i=0;i<items.length;i++){
if(items[i]===item){
items.splice(i,1);
break;
}
}
},
















































getBasename:function(path){
if(!mw.isDefined(path)||path===null){
return'';
}



return path.substr(Math.max(path.lastIndexOf('/'),path.lastIndexOf('\\'))+1);
},






mimetypeToExtension:{
'image/jpeg':'jpg',
'image/gif':'gif'

}


};





mw.GroupProgressBar=function(selector,text,uploads,successStates,errorStates,progressProperty,weightProperty){
var _this=this;


_this.$selector=$j(selector);
_this.$selector.html(
'<div class="mwe-upwiz-progress">'
+'<div class="mwe-upwiz-progress-bar-etr-container">'
+'<div class="mwe-upwiz-progress-bar-etr" style="display: none">'
+'<div class="mwe-upwiz-progress-bar"></div>'
+'<div class="mwe-upwiz-etr"></div>'
+'</div>'
+'</div>'
+'<div class="mwe-upwiz-count"></div>'
+'</div>'
);

_this.$selector.find('.mwe-upwiz-progress-bar').progressbar({value:0});

_this.uploads=uploads;
_this.successStates=successStates;
_this.errorStates=errorStates;
_this.progressProperty=progressProperty;
_this.weightProperty=weightProperty;
_this.beginTime=undefined;

};

mw.GroupProgressBar.prototype={




showBar:function(){
this.$selector.find('.mwe-upwiz-progress-bar-etr').fadeIn(200);
},




start:function(){
var _this=this;

var totalWeight=0.0;
$j.each(_this.uploads,function(i,upload){
totalWeight+=upload[_this.weightProperty];
});

_this.setBeginTime();
var shown=false;

var displayer=function(){
var fraction=0.0;
var successStateCount=0;
var errorStateCount=0;
var hasData=false;
$j.each(_this.uploads,function(i,upload){
if($j.inArray(upload.state,_this.successStates)!==-1){
successStateCount++;
}
if($j.inArray(upload.state,_this.errorStates)!==-1){
errorStateCount++;
}
if(upload[_this.progressProperty]!==undefined){
fraction+=upload[_this.progressProperty]*(upload[_this.weightProperty]/totalWeight);
if(upload[_this.progressProperty]>0){
hasData=true;
}
}
});



if(hasData&&fraction<1.0){
if(!shown){
_this.showBar();
shown=true;
}
_this.showProgress(fraction);
}
_this.showCount(successStateCount);

if(successStateCount+errorStateCount<_this.uploads.length){
setTimeout(displayer,200);
}else{
_this.showProgress(1.0);
setTimeout(function(){_this.hideBar();},500);
}
};
displayer();
},





hideBar:function(){
this.$selector.find('.mwe-upwiz-progress-bar-etr').fadeOut(200);
},







setBeginTime:function(time){
this.beginTime=time?time:(new Date()).getTime();
},









showProgress:function(fraction){
var _this=this;

_this.$selector.find('.mwe-upwiz-progress-bar').progressbar('value',parseInt(fraction*100,10));

var remainingTime=_this.getRemainingTime(fraction);

if(remainingTime!==null){
var t=mw.seconds2Measurements(parseInt(remainingTime/1000,10));
var timeString;
if(t.hours===0){
if(t.minutes===0){
if(t.seconds===0){
timeString=gM('mwe-upwiz-finished');
}else{
timeString=gM('mwe-upwiz-secs-remaining',t.seconds);
}
}else{
timeString=gM('mwe-upwiz-mins-secs-remaining',t.minutes,t.seconds);
}
}else{
timeString=gM('mwe-upwiz-hrs-mins-secs-remaining',t.hours,t.minutes,t.seconds);
}
_this.$selector.find('.mwe-upwiz-etr').html(timeString);
}
},







getRemainingTime:function(fraction){
var _this=this;
if(_this.beginTime){
var elapsedTime=(new Date()).getTime()-_this.beginTime;
if(fraction>0.0&&elapsedTime>0){
var rate=fraction/elapsedTime;
return parseInt((1.0-fraction)/rate,10);
}
}
return null;
},






showCount:function(count){
var _this=this;
_this.$selector
.find('.mwe-upwiz-count')
.html(gM('mwe-upwiz-upload-count',[count,_this.uploads.length]));
}


};





(function($j){

mw.UploadWizardDeed=function(){
var _this=this;

return false;
};

mw.UploadWizardDeed.prototype={
valid:function(){
return false;
},

setFormFields:function(){},

getSourceWikiText:function(){
return $j(this.sourceInput).val();
},

getAuthorWikiText:function(){
return $j(this.authorInput).val();
},





getLicenseWikiText:function(){
var _this=this;
var wikiText='';
$j.each(_this.licenseInput.getTemplates(),function(i,template){
wikiText+="{{"+template+"}}\n";
});

return wikiText;
}

};


mw.UploadWizardNullDeed=$j.extend(new mw.UploadWizardDeed(),{
valid:function(){
return false;
}
});






mw.UploadWizardDeedOwnWork=function(uploadCount){
uploadCount=uploadCount?uploadCount:1;

var _this=new mw.UploadWizardDeed();

_this.authorInput=$j('<input />')
.attr({name:"author",type:"text"})
.addClass('mwe-upwiz-sign');

var licenseInputDiv=$j('<div class="mwe-upwiz-deed-license"></div>');
_this.licenseInput=new mw.UploadWizardLicenseInput(licenseInputDiv);
_this.licenseInput.setDefaultValues();

return $j.extend(_this,{

name:'ownwork',





valid:function(){


var formValid=_this.$form.valid();
var licenseInputValid=_this.licenseInput.valid();
return formValid&&licenseInputValid;
},

getSourceWikiText:function(){
return'{{own}}';
},



getAuthorWikiText:function(){
return"[[User:"+mw.UploadWizard.config['userName']+'|'+$j(_this.authorInput).val()+']]';
},


getLicenseWikiText:function(){
var wikiText='{{self';
$j.each(_this.licenseInput.getTemplates(),function(i,template){
wikiText+='|'+template;
});
wikiText+='}}';
return wikiText;
},

setFormFields:function($selector){
_this.$selector=$selector;

_this.$form=$j('<form/>');

var $standardDiv=$j('<div />').append(
$j('<label for="author2" generated="true" class="mwe-validator-error" style="display:block;"/>'),
$j('<p>')
.html(gM('mwe-upwiz-source-ownwork-assert',
uploadCount,
'<span class="mwe-standard-author-input"></span>')
),
$j('<p class="mwe-small-print" />').append(gM('mwe-upwiz-source-ownwork-assert-note'))
);
$standardDiv.find('.mwe-standard-author-input').append($j('<input name="author2" type="text" class="mwe-upwiz-sign" />'));

var $customDiv=$j('<div/>').append(
$j('<label for="author" generated="true" class="mwe-validator-error" style="display:block;"/>'),
$j('<p>')
.html(gM('mwe-upwiz-source-ownwork-assert-custom',
uploadCount,
'<span class="mwe-custom-author-input"></span>')),
licenseInputDiv
);

$customDiv.find('.mwe-custom-author-input').append(_this.authorInput);


var $crossfader=$j('<div>').append($standardDiv,$customDiv);
var $toggler=$j('<p class="mwe-more-options" style="text-align: right" />')
.append($j('<a />')
.append(gM('mwe-upwiz-license-show-all'))
.click(function(){
_this.formValidator.resetForm();
if($crossfader.data('crossfadeDisplay')===$customDiv){
_this.licenseInput.setDefaultValues();
$crossfader.morphCrossfade($standardDiv);
$j(this).html(gM('mwe-upwiz-license-show-all'));
}else{
$crossfader.morphCrossfade($customDiv);
$j(this).html(gM('mwe-upwiz-license-show-recommended'));
}
}));

var $formFields=$j('<div class="mwe-upwiz-deed-form-internal" />')
.append($crossfader,$toggler);







$formFields.find('.mwe-upwiz-sign')
.attr({
title:gM('mwe-upwiz-tooltip-sign'),
value:mw.UploadWizard.config['userName']
})
.tipsyPlus()
.keyup(function(){
var thisInput=this;
var thisVal=$j(thisInput).val();
$j.each($formFields.find('.mwe-upwiz-sign'),function(i,input){
if(thisInput!==input){
$j(input).val(thisVal);
}
});
});

_this.$form.append($formFields);
$selector.append(_this.$form);


$crossfader.morphCrossfader();



_this.formValidator=_this.$form.validate({
rules:{
author2:{
required:function(element){
return $crossfader.data('crossfadeDisplay').get(0)===$standardDiv.get(0);
},
minlength:mw.UploadWizard.config['minAuthorLength'],
maxlength:mw.UploadWizard.config['maxAuthorLength']
},
author:{
required:function(element){
return $crossfader.data('crossfadeDisplay').get(0)===$customDiv.get(0);
},
minlength:mw.UploadWizard.config['minAuthorLength'],
maxlength:mw.UploadWizard.config['maxAuthorLength']
}
},
messages:{
author2:{
required:gM('mwe-upwiz-error-signature-blank'),
minlength:gM('mwe-upwiz-error-signature-too-short',mw.UploadWizard.config['minAuthorLength']),
maxlength:gM('mwe-upwiz-error-signature-too-long',mw.UploadWizard.config['maxAuthorLength'])
},
author:{
required:gM('mwe-upwiz-error-signature-blank'),
minlength:gM('mwe-upwiz-error-signature-too-short',mw.UploadWizard.config['minAuthorLength']),
maxlength:gM('mwe-upwiz-error-signature-too-long',mw.UploadWizard.config['maxAuthorLength'])
}
}
});
}


});

};


mw.UploadWizardDeedThirdParty=function(uploadCount){
var _this=new mw.UploadWizardDeed();

_this.uploadCount=uploadCount?uploadCount:1;
_this.sourceInput=$j('<textarea class="mwe-source mwe-long-textarea" name="source" rows="1" cols="40"></textarea>')
.growTextArea()
.attr('title',gM('mwe-upwiz-tooltip-source'))
.tipsyPlus();
_this.authorInput=$j('<textarea class="mwe-author mwe-long-textarea" name="author" rows="1" cols="40"></textarea>')
.growTextArea()
.attr('title',gM('mwe-upwiz-tooltip-author'))
.tipsyPlus();
licenseInputDiv=$j('<div class="mwe-upwiz-deed-license"></div>');
_this.licenseInput=new mw.UploadWizardLicenseInput(licenseInputDiv);


return $j.extend(_this,mw.UploadWizardDeed.prototype,{
name:'thirdparty',

setFormFields:function($selector){
var _this=this;
_this.$form=$j('<form/>');

var $formFields=$j('<div class="mwe-upwiz-deed-form-internal"/>');

if(uploadCount>1){
$formFields.append($j('<div />').append(gM('mwe-upwiz-source-thirdparty-custom-multiple-intro')));
}

$formFields.append(
$j('<div class="mwe-upwiz-source-thirdparty-custom-multiple-intro" />'),
$j('<label for="source" generated="true" class="mwe-validator-error" style="display:block;"/>'),
$j('<div class="mwe-upwiz-thirdparty-fields" />')
.append($j('<label for="source"/>').text(gM('mwe-upwiz-source')),
_this.sourceInput),
$j('<label for="author" generated="true" class="mwe-validator-error" style="display:block;"/>'),
$j('<div class="mwe-upwiz-thirdparty-fields" />')
.append($j('<label for="author"/>').text(gM('mwe-upwiz-author')),
_this.authorInput),
$j('<div class="mwe-upwiz-thirdparty-license" />')
.append(gM('mwe-upwiz-source-thirdparty-license',uploadCount)),
licenseInputDiv
);

_this.$form.validate({
rules:{
source:{required:true,
minlength:mw.UploadWizard.config['minSourceLength'],
maxlength:mw.UploadWizard.config['maxSourceLength']},
author:{required:true,
minlength:mw.UploadWizard.config['minAuthorLength'],
maxlength:mw.UploadWizard.config['maxAuthorLength']}
},
messages:{
source:{
required:gM('mwe-upwiz-error-blank'),
minlength:gM('mwe-upwiz-error-too-short',mw.UploadWizard.config['minSourceLength']),
maxlength:gM('mwe-upwiz-error-too-long',mw.UploadWizard.config['maxSourceLength'])
},
author:{
required:gM('mwe-upwiz-error-blank'),
minlength:gM('mwe-upwiz-error-too-short',mw.UploadWizard.config['minAuthorLength']),
maxlength:gM('mwe-upwiz-error-too-long',mw.UploadWizard.config['maxAuthorLength'])
}
}
});

_this.$form.append($formFields);

$selector.append(_this.$form);
},







valid:function(){


var formValid=_this.$form.valid();
var licenseInputValid=_this.licenseInput.valid();
return formValid&&licenseInputValid;
}
});
};








mw.UploadWizardDeedChooser=function(selector,deeds,uploadCount){
var _this=this;
_this.$selector=$j(selector);
_this.uploadCount=uploadCount?uploadCount:1;


_this.$errorEl=$j('<div class="mwe-error"></div>');
_this.$selector.append(_this.$errorEl);


mw.UploadWizardDeedChooser.prototype.widgetCount++;
_this.name='deedChooser'+mw.UploadWizardDeedChooser.prototype.widgetCount.toString();

$j.each(deeds,function(i,deed){
var id=_this.name+'-'+deed.name;

var $deedInterface=$j(
'<div class="mwe-upwiz-deed mwe-upwiz-deed-'+deed.name+'">'
+'<div class="mwe-upwiz-deed-option-title">'
+'<span class="mwe-upwiz-deed-header">'
+'<input id="'+id+'" name="'+_this.name+'" type="radio" value="'+deed.name+'">'
+'<label for="'+id+'" class="mwe-upwiz-deed-name">'
+gM('mwe-upwiz-source-'+deed.name,_this.uploadCount)
+'</label>'
+'</input>'
+'</span>'
+'</div>'
+'<div class="mwe-upwiz-deed-form">'
+'</div>'
);

var $deedSelector=_this.$selector.append($deedInterface);

deed.setFormFields($deedInterface.find('.mwe-upwiz-deed-form'));

$deedInterface.find('span.mwe-upwiz-deed-header input').click(function(){
if($j(this).is(':checked')){
_this.choose(deed);
_this.showDeed($deedInterface);
}
});

});

_this.choose(mw.UploadWizardNullDeed);
_this.showDeedChoice();


};


mw.UploadWizardDeedChooser.prototype={




widgetCount:0,





valid:function(){
var _this=this;

var valid=_this.deed.valid();


if(valid){
_this.hideError();
}else{
if(_this.deed===mw.UploadWizardNullDeed){
_this.showError(gM('mwe-upwiz-deeds-need-deed',_this.uploadCount));
$j(_this).bind('chooseDeed',function(){
_this.hideError();
});
}
}
return valid;
},

showError:function(error){
this.$errorEl.html(error);
this.$errorEl.fadeIn();
},

hideError:function(){
this.$errorEl.fadeOut();
this.$errorEl.empty();
},




uploadCount:0,



choose:function(deed){
var _this=this;
_this.deed=deed;
if(deed===mw.UploadWizardNullDeed){
$j(_this).trigger('chooseNullDeed');

_this.$selector
.find('input.mwe-accept-deed')
.attr('checked',false);
}else{
$j(_this).trigger('chooseDeed');
}
},




showDeedChoice:function(){
var $allDeeds=this.$selector.find('.mwe-upwiz-deed');
this.deselectDeed($allDeeds);

},




deselectDeed:function($deedSelector){
$deedSelector.removeClass('selected');

$deedSelector.find('.mwe-upwiz-deed-form').slideUp(500);
},




showDeed:function($deedSelector){
var $otherDeeds=$deedSelector.siblings().filter('.mwe-upwiz-deed');
this.deselectDeed($otherDeeds);


$deedSelector
.addClass('selected')
.fadeTo('fast',1.0)
.find('.mwe-upwiz-deed-form').slideDown(500);

}

};

})(jQuery);






(function($j){
mw.UploadWizardLicenseInput=function(selector,values){
var _this=this;

var widgetCount=mw.UploadWizardLicenseInput.prototype.count++;

_this.inputs=[];



_this.$selector=$j(selector);
_this.$selector.append($j('<div class="mwe-error"></div>'));

$j.each(mw.UploadWizard.config['licenses'],function(i,licenseConfig){
var template=licenseConfig.template;
var messageKey=licenseConfig.messageKey;

var name='license_'+template;
var id='licenseInput'+widgetCount+'_'+name;
var $input=$j('<input />')
.attr({id:id,name:name,type:'checkbox',value:template})

.click(function(){_this.$selector.trigger('changeLicenses');});
_this.inputs.push($input);
_this.$selector.append(
$input,
$j('<label />').attr({'for':id}).html(gM(messageKey)),
$j('<br/>')
);
});

if(values){
_this.setValues(values);
}

return _this;
};

mw.UploadWizardLicenseInput.prototype={
count:0,





setValues:function(licenseValues){
var _this=this;
$j.each(_this.inputs,function(i,$input){
var template=$input.val();
$input.attr('checked',~~!!licenseValues[template]);
});

_this.$selector.trigger('changeLicenses');
},




setDefaultValues:function(){
var _this=this;
var values={};
$j.each(mw.UploadWizard.config['licenses'],function(i,licenseConfig){
values[licenseConfig.template]=licenseConfig['default'];
});
_this.setValues(values);
},





getTemplates:function(){
return $j(this.inputs)
.filter(function(){return this.is(':checked');})
.map(function(){return this.val();});
},






valid:function(){
var _this=this;
var isValid=true;

if(!_this.isSet()){
isValid=false;
errorHtml=gM('mwe-upwiz-deeds-need-license');
}



var $errorEl=this.$selector.find('.mwe-error');
if(isValid){
$errorEl.fadeOut();
}else{

_this.$selector.bind('changeLicenses.valid',function(){
_this.$selector.unbind('changeLicenses.valid');
_this.valid();
});
$errorEl.html(errorHtml).show();
}

return isValid;
},






isSet:function(){
return this.getTemplates().length>0;
}

};

})(jQuery);







(function($j){

mw.UploadWizardUpload=function(api,filesDiv){
this.api=api;
this.state='new';
this.thumbnails={};
this.imageinfo={};
this.title=undefined;
this.mimetype=undefined;
this.extension=undefined;

this.sessionKey=undefined;


this.transportWeight=1;
this.detailsWeight=1;


this.ui=new mw.UploadWizardUploadInterface(this,filesDiv);




this.handler=new mw.ApiUploadHandler(this,api);
};

mw.UploadWizardUpload.prototype={

acceptDeed:function(deed){
var _this=this;
_this.deed.applyDeed(_this);
},




start:function(){
var _this=this;
_this.setTransportProgress(0.0);

_this.handler.start();
},




remove:function(){
if(this.details&&this.details.div){
this.details.div.remove();
}
if(this.thanksDiv){
this.thanksDiv.remove();
}




$j(this.ui.div).trigger('removeUploadEvent');
},







setTransportProgress:function(fraction){
var _this=this;
_this.state='transporting';
_this.transportProgress=fraction;
$j(_this.ui.div).trigger('transportProgressEvent');
},




setError:function(code,info){

this.state='error';
this.transportProgress=0;
this.ui.showError(code,info);
},





setTransported:function(result){
var _this=this;

if(result.upload&&result.upload.imageinfo){

_this.state='transported';
_this.transportProgress=1;
_this.ui.setStatus('mwe-upwiz-getting-metadata');
_this.extractUploadInfo(result);


_this.getThumbnail(
function(image){
_this.ui.setPreview(image);
_this.deedPreview.setup();
_this.details.populate();
_this.state='stashed';
_this.ui.showStashed();
},
mw.UploadWizard.config['iconThumbnailWidth'],
mw.UploadWizard.config['iconThumbnailMaxHeight']
);

}else if(result.upload&&result.upload.sessionkey){

if(result.upload.warnings.duplicate){
var duplicates=result.upload.warnings.duplicate;
_this.details.errorDuplicate(result.upload.sessionkey,duplicates);
}


}else{

var code='unknown';
var info='unknown';
if(result.error){
code=result.error.code;
info=result.error.info;
}
_this.setError(code,info);
}

},






extractLocalFileInfo:function(localFilename){
if(false){
this.transportWeight=getFileSize();
}
this.title=new mw.Title(mw.UploadWizardUtil.getBasename(localFilename),'file');
},






extractUploadInfo:function(result){
this.sessionKey=result.upload.sessionkey;
this.extractImageInfo(result.upload.imageinfo);
},






extractImageInfo:function(imageinfo){
var _this=this;
for(var key in imageinfo){

if(key=='metadata'){
_this.imageinfo.metadata={};
if(imageinfo.metadata&&imageinfo.metadata.length){
$j.each(imageinfo.metadata,function(i,pair){
if(pair!==undefined){
_this.imageinfo.metadata[pair['name'].toLowerCase()]=pair['value'];
}
});
}
}else{
_this.imageinfo[key]=imageinfo[key];
}
}



if(_this.title.getExtension()===null){










}
},









getThumbnail:function(callback,width,height){
var _this=this;
if(mw.isEmpty(height)){
height=-1;
}
var key="width"+width+',height'+height;
if(mw.isDefined(_this.thumbnails[key])){
callback(_this.thumbnails[key]);
}else{
var params={
'prop':'stashimageinfo',
'siisessionkey':_this.sessionKey,
'siiurlwidth':width,
'siiurlheight':height,
'siiprop':'url'
};

this.api.get(params,function(data){
if(!data||!data.query||!data.query.stashimageinfo){
mw.log(" No data? ");

return;
}
var thumbnails=data.query.stashimageinfo;
for(var i=0;i<thumbnails.length;i++){
var thumb=thumbnails[i];
var image=document.createElement('img');
$j(image).load(function(){
callback(image);
});
image.width=thumb.thumbwidth;
image.height=thumb.thumbheight;
image.src=thumb.thumburl;
_this.thumbnails[key]=image;
}
});
}
},








setThumbnail:function(selector,width,height){

$j(selector).loadingSpinner();

var _this=this;
if(typeof width==='undefined'||width===null||width<=0){
width=mw.UploadWizard.config['thumbnailWidth'];
}
width=parseInt(width,10);
height=null;
if(!mw.isEmpty(height)){
height=parseInt(height,10);
}

var callback=function(image){

$j(selector).html(
$j('<a/>')
.attr({'href':_this.imageinfo.url,
'target':'_new'})
.append(
$j('<img/>')
.attr({'width':image.width,
'height':image.height,
'src':image.src})
)
);
};

$j(selector).loadingSpinner();
_this.getThumbnail(callback,width,height);
}

};







mw.UploadWizardUploadInterface=function(upload,filesDiv){
var _this=this;

_this.upload=upload;



_this.div=$j('<div class="mwe-upwiz-file"></div>').get(0);
_this.isFilled=false;

_this.$fileInputCtrl=$j('<input size="1" class="mwe-upwiz-file-input" name="file" type="file"/>')
.change(function(){_this.fileChanged();});


visibleFilenameDiv=$j('<div class="mwe-upwiz-visible-file"></div>')
.append('<div class="mwe-upwiz-file-indicator"></div>'
+'<div class="mwe-upwiz-visible-file-filename">'
+'<div class="mwe-upwiz-file-preview"/>'
+'<div class="mwe-upwiz-file-texts">'
+'<div class="mwe-upwiz-visible-file-filename-text"/>'
+'<div class="mwe-upwiz-file-status-line">'
+'<div class="mwe-upwiz-file-status mwe-upwiz-file-status-line-item"></div>'
+'</div>'
+'</div>'
+'</div>'
);

_this.$removeCtrl=$j.fn.removeCtrl(
'mwe-upwiz-remove',
'mwe-upwiz-remove-upload',
function(){_this.upload.remove();}
).addClass("mwe-upwiz-file-status-line-item");

visibleFilenameDiv.find('.mwe-upwiz-file-status-line')
.append(_this.$removeCtrl);



_this.filenameCtrl=$j('<input type="hidden" name="filename" value=""/>').get(0);




_this.fileCtrlContainer=$j('<div class="mwe-upwiz-file-ctrl-container">');












_this.form=$j('<form class="mwe-upwiz-form"></form>')
.append(visibleFilenameDiv)
.append(_this.fileCtrlContainer
.append(_this.$fileInputCtrl)
)
.append(_this.filenameCtrl)
.append(_this.thumbnailParam)
.get(0);


$j(_this.div).append(_this.form);



$j(filesDiv).append(_this.div);



$j(_this.div).bind('transportProgressEvent',function(e){_this.showTransportProgress();});


};


mw.UploadWizardUploadInterface.prototype={



start:function(){
var _this=this;

$j(_this.div)
.unbind('mouseenter mouseover mouseleave mouseout');


$j(_this.div)
.find('.mwe-upwiz-remove-ctrl')
.unbind('mouseenter mouseover mouseleave mouseout')
.remove();
},





showIndicator:function(statusClass){
var $indicator=$j(this.div).find('.mwe-upwiz-file-indicator');

$j.each($indicator.attr('class').split(/\s+/),function(i,className){
if(className.match(/^mwe-upwiz-status/)){
$indicator.removeClass(className);
}
});

$indicator.addClass('mwe-upwiz-status-'+statusClass)
.css('visibility','visible');
},





setPreview:function(image){

$j(this.div).find('.mwe-upwiz-file-preview').css('background-image','url('+image.src+')');
},






setStatus:function(msgKey,args){
if(!mw.isDefined(args)){
args=[];
}
this.setStatusStr(gM(msgKey,args));
},





setStatusStr:function(str){
$j(this.div).find('.mwe-upwiz-file-status').html(str).show();
},




clearStatus:function(){
$j(this.div).find('.mwe-upwiz-file-status').hide();
},





showTransportProgress:function(fraction){

this.showIndicator('progress');
this.setStatus('mwe-upwiz-uploading');
},




showStashed:function(){
this.$removeCtrl.detach();
this.$fileInputCtrl.detach();
this.showIndicator('stashed');
this.setStatus('mwe-upwiz-stashed-upload');
},




showError:function(code,info){

this.showIndicator('error');

},





fileChanged:function(){
var _this=this;
_this.clearErrors();
_this.upload.extractLocalFileInfo(_this.$fileInputCtrl.val());
if(_this.isGoodExtension(_this.upload.title.getExtension())){
_this.updateFilename();
}else{

alert("bad extension");
}
this.clearStatus();
},









moveFileInputToCover:function(selector){
var $covered=$j(selector);

this.fileCtrlContainer
.css($covered.position())
.width($covered.outerWidth())
.height($covered.outerHeight());




this.$fileInputCtrl.css({
'margin-left':'-'+~~(this.$fileInputCtrl.width()-$covered.outerWidth()-10)+'px',
'margin-top':'-'+~~(this.$fileInputCtrl.height()-$covered.outerHeight()-10)+'px'
});


},









updateFilename:function(){
var _this=this;

var path=_this.$fileInputCtrl.val();


$j(_this.form).find('.mwe-upwiz-visible-file-filename-text').html(path);

_this.upload.title=new mw.Title(mw.UploadWizardUtil.getBasename(path),'file');
$j(_this.filenameCtrl).val(_this.upload.title.getMain());

if(!_this.isFilled){
var $div=$j(_this.div);
_this.isFilled=true;
$div.addClass('filled');




_this.moveFileInputToCover(
$div.find('.mwe-upwiz-visible-file-filename-text')
);











$div.bind('mouseenter mouseover',function(){
$div.addClass('hover');
$j('#mwe-upwiz-filelist')
.children()
.filter(function(){return this!==_this.div;})
.removeClass('hover');
},false);
$div.bind('mouseleave mouseout',function(){
$div.removeClass('hover');
},false);
$j(_this.div).trigger('filled');
}else{
$j(_this.div).trigger('filenameAccepted');
}
},





clearErrors:function(){
var _this=this;
$j(_this.div).removeClass('mwe-upwiz-upload-error ');
$j(_this.errorDiv).hide().empty();
},




error:function(){
var _this=this;
var args=Array.prototype.slice.call(arguments);
var msg='mwe-upwiz-upload-error-'+args[0];
$j(_this.errorDiv).append($j('<p class="mwe-upwiz-upload-error">'+gM(msg,args.slice(1))+'</p>'));

$j(_this.div).addClass('mwe-upwiz-upload-error');
$j(_this.errorDiv).show();
},






isGoodExtension:function(ext){
return $j.inArray(ext.toLowerCase(),mw.UploadWizard.config['fileExtensions'])!==-1;
}

};






mw.UploadWizardDescription=function(languageCode,required){
var _this=this;
mw.UploadWizardDescription.prototype.count++;
_this.id='description'+mw.UploadWizardDescription.prototype.count;


var errorLabelDiv=$j('<div class="mwe-upwiz-details-input-error">'
+'<label generated="true" class="mwe-validator-error" for="'+_this.id+'" />'
+'</div>');

var fieldnameDiv=$j('<div class="mwe-upwiz-details-fieldname" />');
if(required){
fieldnameDiv.append(gM('mwe-upwiz-desc')).requiredFieldLabel();
}




if(languageCode=='pt-br'){
languageCode='pt';

}else if(languageCode=='en-gb'){
languageCode='en';
}

_this.languageMenu=mw.LanguageUpWiz.getMenu('lang',languageCode);
$j(_this.languageMenu).addClass('mwe-upwiz-desc-lang-select');

_this.input=$j('<textarea name="'+_this.id+'" rows="2" cols="36" class="mwe-upwiz-desc-lang-text"></textarea>')
.attr('title',gM('mwe-upwiz-tooltip-description'))
.growTextArea()
.tipsyPlus({plus:'even more stuff'});


_this.div=$j('<div class="mwe-upwiz-details-descriptions-container ui-helper-clearfix"></div>')
.append(errorLabelDiv,fieldnameDiv,_this.languageMenu,_this.input);

};

mw.UploadWizardDescription.prototype={


count:0,





getWikiText:function(){
var _this=this;
var description=$j(_this.input).val().trim();


if(description.length===0){
return'';
}
var language=$j(_this.languageMenu).val().trim();
var fix=mw.UploadWizard.config["languageTemplateFixups"];
if(fix[language]){
language=fix[language];
}
return'{{'+language+'|1='+description+'}}';
},





addValidationRules:function(required){

return this.input.rules("add",{
minlength:mw.UploadWizard.config['minDescriptionLength'],
maxlength:mw.UploadWizard.config['maxDescriptionLength'],
required:required,
messages:{
required:gM('mwe-upwiz-error-blank'),
minlength:gM('mwe-upwiz-error-too-short',mw.UploadWizard.config['minDescriptionLength']),
maxlength:gM('mwe-upwiz-error-too-long',mw.UploadWizard.config['maxDescriptionLength'])
}
});
}
};















mw.UploadWizardDetails=function(upload,containerDiv){

var _this=this;
_this.upload=upload;

_this.descriptions=[];

_this.div=$j('<div class="mwe-upwiz-info-file ui-helper-clearfix"></div>');

_this.thumbnailDiv=$j('<div class="mwe-upwiz-thumbnail mwe-upwiz-thumbnail-side"></div>');

_this.dataDiv=$j('<div class="mwe-upwiz-data"></div>');


_this.descriptionsDiv=$j('<div class="mwe-upwiz-details-descriptions"></div>');

_this.descriptionAdder=$j('<a class="mwe-upwiz-more-options"/>')
.html(gM('mwe-upwiz-desc-add-0'))
.click(function(){_this.addDescription();});

var descriptionAdderDiv=
$j('<div />').append(
$j('<div class="mwe-upwiz-details-fieldname" />'),
$j('<div class="mwe-upwiz-details-descriptions-add" />')
.append(_this.descriptionAdder)
);





_this.titleId="title"+_this.upload.index;
_this.titleInput=$j('<textarea type="text" id="'+_this.titleId+'" name="'+_this.titleId+'" rows="1" class="mwe-title mwe-long-textarea"></textarea>')
.attr('title',gM('mwe-upwiz-tooltip-title'))
.tipsyPlus()
.keyup(function(){
_this.upload.title.setNameText(_this.titleInput.value);

})
.growTextArea()
.destinationChecked({
api:_this.upload.api,
spinner:function(bool){_this.toggleDestinationBusy(bool);},
preprocess:function(name){

return _this.upload.title.setNameText(name).toString();
},
processResult:function(result){_this.processDestinationCheck(result);}
});

_this.titleErrorDiv=$j('<div class="mwe-upwiz-details-input-error"><label class="mwe-error" for="'+_this.titleId+'" generated="true"/></div>');

var titleContainerDiv=$j('<div class="mwe-upwiz-details-fieldname-input ui-helper-clearfix"></div>')
.append(
_this.titleErrorDiv,
$j('<div class="mwe-upwiz-details-fieldname"></div>')
.requiredFieldLabel()
.append(gM('mwe-upwiz-title')),
$j('<div class="mwe-upwiz-details-input"></div>').append(_this.titleInput)
);

_this.deedDiv=$j('<div class="mwe-upwiz-custom-deed" />');

_this.copyrightInfoFieldset=$j('<fieldset class="mwe-fieldset mwe-upwiz-copyright-info"></fieldset>')
.hide()
.append(
$j('<legend class="mwe-legend">').append(gM('mwe-upwiz-copyright-info')),
_this.deedDiv
);

var $categoriesDiv=$j('<div class="mwe-upwiz-details-fieldname-input ui-helper-clearfix">'
+'<div class="mwe-upwiz-details-fieldname"></div>'
+'<div class="mwe-upwiz-details-input"></div>'
+'</div>');
$categoriesDiv.find('.mwe-upwiz-details-fieldname').append(gM('mwe-upwiz-categories'));
var categoriesId='categories'+_this.upload.index;
$categoriesDiv.find('.mwe-upwiz-details-input')
.append($j('<input/>').attr({id:categoriesId,
name:categoriesId,
type:'text'})
);

var moreDetailsDiv=$j('<div class="mwe-more-details"></div>');

var moreDetailsCtrlDiv=$j('<div class="mwe-upwiz-details-more-options"></div>');

var dateInputId="dateInput"+(_this.upload.index).toString();
var dateDisplayInputId="dateDisplayInput"+(_this.upload.index).toString();

var dateErrorDiv=$j('<div class="mwe-upwiz-details-input-error"><label class="mwe-validator-error" for="'+dateInputId+'" generated="true"/></div>');




_this.dateInput=
$j('<input type="text" id="'+dateInputId+'" name="'+dateInputId+'" type="text" class="mwe-date" size="20"/>');
_this.dateDisplayInput=
$j('<input type="text" id="'+dateDisplayInputId+'" name="'+dateDisplayInputId+'" type="text" class="mwe-date-display" size="20"/>');


var dateInputDiv=$j('<div class="mwe-upwiz-details-fieldname-input ui-helper-clearfix"></div>')
.append(
dateErrorDiv,
$j('<div class="mwe-upwiz-details-fieldname"></div>').append(gM('mwe-upwiz-date-created')),
$j('<div class="mwe-upwiz-details-input"></div>').append(_this.dateInput,_this.dateDisplayInput));

var otherInformationId="otherInformation"+_this.upload.index;
_this.otherInformationInput=$j('<textarea id="'+otherInformationId+'" name="'+otherInformationId+'" class="mwe-upwiz-other-textarea"></textarea>')
.growTextArea()
.attr('title',gM('mwe-upwiz-tooltip-other'))
.tipsyPlus();

var otherInformationDiv=$j('<div></div>')
.append($j('<div class="mwe-upwiz-details-more-label">').append(gM('mwe-upwiz-other')))
.append(_this.otherInformationInput);


$j(moreDetailsDiv).append(
dateInputDiv,

otherInformationDiv
);

_this.$form=$j('<form></form>');
_this.$form.append(
_this.descriptionsDiv,
descriptionAdderDiv,
titleContainerDiv,
_this.copyrightInfoFieldset,
$categoriesDiv,
moreDetailsCtrlDiv,
moreDetailsDiv
);

$j(_this.dataDiv).append(
_this.$form
);

$j(_this.div).append(
_this.thumbnailDiv,
_this.dataDiv
);

_this.$form.validate();
_this.$form.find('.mwe-date').rules("add",{
dateISO:true,
messages:{
dateISO:gM('mwe-upwiz-error-date')
}
});


_this.$form.find('.mwe-date-display')
.datepicker({
dateFormat:'DD, MM d, yy',

showOn:'focus',


changeMonth:true,
changeYear:true,
showAnim:'slideDown',
altField:'#'+dateInputId,
altFormat:'yy-mm-dd'})
.click(function(){$j(this).datepicker('show');})
.readonly();

_this.$form.find('.mwe-date')
.bind('change',function(){$j(this).valid();})
.hide();




mw.UploadWizardUtil.makeToggler(moreDetailsCtrlDiv,moreDetailsDiv);

_this.addDescription(true,mw.UploadWizard.config['userLanguage']);
$j(containerDiv).append(_this.div);


$categoriesDiv.find('.mwe-upwiz-details-input')
.find('input')
.mwCoolCats({buttontext:gM('mwe-upwiz-categories-add')});

};

mw.UploadWizardDetails.prototype={







valid:function(){
var _this=this;




var titleInputValid=$j(_this.titleInput).data('valid');
if(typeof titleInputValid=='undefined'){
alert("please wait, still checking the title for uniqueness...");
return false;
}


var formValid=_this.$form.valid();
return titleInputValid&&formValid;









},






useCustomDeedChooser:function(){
var _this=this;
_this.copyrightInfoFieldset.show();
_this.upload.wizardDeedChooser=_this.upload.deedChooser;
_this.upload.deedChooser=new mw.UploadWizardDeedChooser(
_this.deedDiv,
[new mw.UploadWizardDeedOwnWork(),
new mw.UploadWizardDeedThirdParty()]
);
},





toggleDestinationBusy:function(busy){
var _this=this;
if(busy){
_this.titleInput.addClass("busy");
$j(_this.titleInput).data('valid',undefined);
}else{
_this.titleInput.removeClass("busy");
}
},








processDestinationCheck:function(result){
var _this=this;

if(result.isUnique){
$j(_this.titleInput).data('valid',true);
_this.$form.find('label[for='+_this.titleId+']').hide().empty();
_this.ignoreWarningsInput=undefined;
return;
}

$j(_this.titleInput).data('valid',false);


var title=new mw.Title(result.title).setNamespace('file').getNameText();



_this.$form.find('label[for='+_this.titleId+']')
.html(gM('mwe-upwiz-fileexists-replace',title))
.show();















































































},




recountDescriptions:function(){
var _this=this;

$j(_this.descriptionAdder).html(gM('mwe-upwiz-desc-add-'+(_this.descriptions.length===0?'0':'n')));
},





addDescription:function(required,languageCode){
var _this=this;
if(typeof required==='undefined'){
required=false;
}

if(typeof languageCode==='undefined'){
languageCode=mw.LanguageUpWiz.UNKNOWN;
}

var description=new mw.UploadWizardDescription(languageCode,required);

if(!required){
$j(description.div).append(
$j.fn.removeCtrl(null,'mwe-upwiz-remove-description',function(){_this.removeDescription(description);})
);
}

$j(_this.descriptionsDiv).append(description.div);



description.addValidationRules(required);

_this.descriptions.push(description);
_this.recountDescriptions();
},





removeDescription:function(description){
var _this=this;
$j(description.div).remove();
mw.UploadWizardUtil.removeItem(_this.descriptions,description);
_this.recountDescriptions();
},





error:function(){
var _this=this;
var args=Array.prototype.slice.call(arguments);
var msg='mwe-upwiz-upload-error-'+args[0];
$j(_this.errorDiv).append($j('<p class="mwe-upwiz-upload-error">'+gM(msg,args.slice(1))+'</p>'));

$j(_this.div).addClass('mwe-upwiz-upload-error');
$j(_this.dataDiv).hide();
$j(_this.errorDiv).show();
},





populate:function(){
var _this=this;
mw.log("populating details from upload");
_this.upload.setThumbnail(_this.thumbnailDiv,mw.UploadWizard.config['thumbnailWidth'],mw.UploadWizard.config['thumbnailMaxHeight']);
_this.prefillDate();
_this.prefillSource();
_this.prefillAuthor();
_this.prefillTitle();
_this.prefillLocation();
},







prefillDate:function(){

function pad(n){
return n<10?"0"+n:n;
}

var _this=this;
var yyyyMmDdRegex=/^(\d\d\d\d)[:\/-](\d\d)[:\/-](\d\d)\D.*/;
var dateObj;
var metadata=_this.upload.imageinfo.metadata;
$j.each([metadata.datetimeoriginal,metadata.datetimedigitized,metadata.datetime,metadata['date']],
function(i,imageinfoDate){
if(!mw.isEmpty(imageinfoDate)){
var matches=imageinfoDate.trim().match(yyyyMmDdRegex);
if(!mw.isEmpty(matches)){
dateObj=new Date(parseInt(matches[1],10),
parseInt(matches[2],10)-1,
parseInt(matches[3],10));
return false;
}
}
}
);




if(typeof dateObj==='undefined'){
dateObj=new Date();
}
dateStr=dateObj.getUTCFullYear()+'-'+pad(dateObj.getUTCMonth())+'-'+pad(dateObj.getUTCDate());


$j(_this.dateInput).val(dateStr);
$j(_this.dateDisplayInput).datepicker("setDate",dateObj);
},





prefillTitle:function(){
$j(this.titleInput).val(this.upload.title.getNameText());
},




























prefillLocation:function(){
var _this=this;
var metadata=_this.upload.imageinfo.metadata;
if(metadata===undefined){
return;
}


},









coordsToWikiText:function(latitude,longitude,scale,heading){









},





prefillSource:function(){

},





prefillAuthor:function(){
var _this=this;
if(_this.upload.imageinfo.metadata.author!==undefined){
$j(_this.authorInput).val(_this.upload.imageinfo.metadata.author);
}

},





prefillLicense:function(){
var _this=this;
var copyright=_this.upload.imageinfo.metadata.copyright;
if(copyright!==undefined){
if(copyright.match(/\bcc-by-sa\b/i)){
alert("unimplemented cc-by-sa in prefillLicense");

}else if(copyright.match(/\bcc-by\b/i)){
alert("unimplemented cc-by in prefillLicense");

}else if(copyright.match(/\bcc-zero\b/i)){
alert("unimplemented cc-zero in prefillLicense");


}else{
$j(_this.licenseInput).val(copyright);
}
}

},







getWikiText:function(){
var _this=this;



if(!_this.valid()){
return null;
}

wikiText='';





var information={
'description':'',
'date':'',
'source':'',
'author':'',
'permission':'',
'other_versions':'',
'other_fields':''
};



if(_this.descriptions.length===0){
alert("something has gone horribly wrong, unimplemented error check for zero descriptions");


}
$j.each(_this.descriptions,function(i,desc){
information['description']+=desc.getWikiText();
});


information['date']=$j(_this.dateInput).val().trim();

var deed=_this.upload.deedChooser.deed;

information['source']=deed.getSourceWikiText();

information['author']=deed.getAuthorWikiText();

var info='';
for(var key in information){
info+='|'+key+'='+information[key]+"\n";
}

wikiText+="=={{int:filedesc}}==\n";

wikiText+='{{Information\n'+info+'}}\n';




var otherInfoWikiText=$j(_this.otherInformationInput).val().trim();
if(!mw.isEmpty(otherInfoWikiText)){
wikiText+="=={{int:otherinfo}}==\n";
wikiText+=otherInfoWikiText;
}

wikiText+="=={{int:license-header}}==\n";



wikiText+=deed.getLicenseWikiText()+_this.div.find('.categoryInput').get(0).getWikiText();


return wikiText;
},






submit:function(endCallback){
var _this=this;


var wikiText=_this.getWikiText();
mw.log(wikiText);

var params={
action:'upload',
sessionkey:_this.upload.sessionKey,
filename:_this.upload.title.getMain(),
text:wikiText,
summary:"User created page with "+mw.UploadWizard.userAgent
};

var finalCallback=function(){
endCallback();
_this.completeDetailsSubmission();
};

mw.log("uploading!");
mw.log(params);
var callback=function(result){
mw.log(result);
mw.log("successful upload");
finalCallback();
};

_this.upload.state='submitting-details';

_this.upload.api.postWithEditToken(params,callback);
},











getImageInfo:function(upload,callback){
var params={
'titles':upload.title.toString(),
'prop':'imageinfo',
'iiprop':'timestamp|url|user|size|sha1|mime|metadata'
};

this.api.get(params,function(data){
if(data&&data.query&&data.query.pages){
if(!data.query.pages[-1]){
for(var page_id in data.query.pages){
var page=data.query.pages[page_id];
if(!page.imageinfo){
alert("unimplemented error check, missing imageinfo");

}else{
upload.extractImageInfo(page.imageinfo[0]);
}
}
}
}
callback();
});
},

completeDetailsSubmission:function(){
var _this=this;
_this.upload.state='complete';

_this.upload.detailsProgress=1.0;
},

dateInputCount:0


};





mw.UploadWizard=function(config){

this.uploads=[];
this.api=new mw.Api({url:config.apiUrl});



mw.UploadWizard.config=config;


this.maxUploads=mw.UploadWizard.config['maxUploads']||10;
this.maxSimultaneousConnections=mw.UploadWizard.config['maxSimultaneousConnections']||2;

};

mw.UploadWizard.DEBUG=true;

mw.UploadWizard.userAgent="UploadWizard (alpha)";


mw.UploadWizard.prototype={
stepNames:['tutorial','file','deeds','details','thanks'],
currentStepName:undefined,





































reset:function(){
window.location.reload();
},






createInterface:function(selector){
var _this=this;

$j('#mwe-upwiz-steps')
.addClass('ui-helper-clearfix ui-state-default ui-widget ui-helper-reset ui-helper-clearfix')
.arrowSteps();

$j('.mwe-upwiz-button-home')
.append(gM('mwe-upwiz-home'))
.click(function(){window.location.href='/';});

$j('.mwe-upwiz-button-begin')
.append(gM('mwe-upwiz-upload-another'))
.click(function(){_this.reset();});


$j('#mwe-upwiz-stepdiv-tutorial .mwe-upwiz-button-next')
.append(gM('mwe-upwiz-next'))
.click(function(){
_this.moveToStep('file',function(){




setTimeout(function(){
upload.ui.moveFileInputToCover('#mwe-upwiz-add-file');
},300);
});
});

$j('#mwe-upwiz-stepdiv-file .mwe-upwiz-button-next')
.append(gM('mwe-upwiz-next-file'))
.click(function(){

if(_this.uploads.length===0){

alert(gM('mwe-upwiz-file-need-file'));
return;
}

_this.removeEmptyUploads();
_this.startUploads(function(){

alert("hey, uploads are done");

});
});



$j('#mwe-upwiz-deeds-intro').html(gM('mwe-upwiz-deeds-intro'));

$j('#mwe-upwiz-stepdiv-deeds .mwe-upwiz-button-next')
.append(gM('mwe-upwiz-next-deeds'))
.click(function(){


if(_this.deedChooser.valid()){

var lastUploadIndex=_this.uploads.length-1;

$j.each(_this.uploads,function(i,upload){

if(_this.deedChooser.deed.name=='custom'){
upload.details.useCustomDeedChooser();
}else{
upload.deedChooser=_this.deedChooser;
}


if(i<lastUploadIndex){
upload.details.div.css('border-bottom','1px solid #e0e0e0');
}


upload.details.titleInput.checkUnique();
});

_this.moveToStep('details');
}
});




$j('#mwe-upwiz-stepdiv-details .mwe-upwiz-button-next')
.append(gM('mwe-upwiz-next-details'))
.click(function(){
if(_this.detailsValid()){
_this.detailsSubmit(function(){
_this.prefillThanksPage();
_this.moveToStep('thanks');
});
}
});






var upload=_this.newUpload();


_this.moveToStep('tutorial');

},



prepareAndMoveToDeeds:function(){


var deeds=[
new mw.UploadWizardDeedOwnWork(_this.uploads.length),
new mw.UploadWizardDeedThirdParty(_this.uploads.length)
];



if(_this.uploads.length>1){
var customDeed=$j.extend(new mw.UploadWizardDeed(),{
valid:function(){return true;},
name:'custom'
});
deeds.push(customDeed);
}

_this.deedChooser=new mw.UploadWizardDeedChooser(
'#mwe-upwiz-deeds',
deeds,
_this.uploads.length);

$j('<div>').html(gM('mwe-upwiz-deeds-macro-prompt',_this.uploads.length))
.insertBefore(_this.deedChooser.$selector.find('.mwe-upwiz-deed-ownwork'));

if(_this.uploads.length>1){
$j('<div style="margin-top: 1em">').html(gM('mwe-upwiz-deeds-custom-prompt'))
.insertBefore(_this.deedChooser.$selector.find('.mwe-upwiz-deed-custom'));
}

_this.moveToStep('deeds');

},









moveToStep:function(selectedStepName,callback){
var _this=this;


$j('html, body').animate({scrollTop:0},'slow');

$j.each(_this.stepNames,function(i,stepName){


var step=$j('#mwe-upwiz-step-'+stepName);


var stepDiv=$j('#mwe-upwiz-stepdiv-'+stepName);

if(_this.currentStepName===stepName){
stepDiv.hide();


}else{
if(selectedStepName===stepName){
stepDiv.maskSafeShow();
}else{
stepDiv.maskSafeHide(1000);
}
}

});

$j('#mwe-upwiz-steps').arrowStepsHighlight('#mwe-upwiz-step-'+selectedStepName);

_this.currentStepName=selectedStepName;

$j.each(_this.uploads,function(i,upload){
upload.state=selectedStepName;
});

if(callback){
callback();
}
},








newUpload:function(){
var _this=this;
if(_this.uploads.length==_this.maxUploads){
return false;
}

var upload=new mw.UploadWizardUpload(_this.api,'#mwe-upwiz-filelist');
_this.uploadToAdd=upload;

upload.ui.moveFileInputToCover('#mwe-upwiz-add-file');


$j(upload.ui.div).bind('filenameAccepted',function(e){_this.updateFileCounts();e.stopPropagation();});
$j(upload.ui.div).bind('removeUploadEvent',function(e){_this.removeUpload(upload);e.stopPropagation();});
$j(upload.ui.div).bind('filled',function(e){
mw.log("filled! received!");
_this.newUpload();
mw.log("filled! new upload!");
_this.setUploadFilled(upload);
mw.log("filled! set upload filled!");
e.stopPropagation();
mw.log("filled! stop propagation!");
});



return upload;
},






setUploadFilled:function(upload){
var _this=this;


_this.uploads.push(upload);


_this.uploadsSeen++;
upload.index=_this.uploadsSeen;

_this.updateFileCounts();

upload.deedPreview=new mw.UploadWizardDeedPreview(upload);




upload.details=new mw.UploadWizardDetails(upload,$j('#mwe-upwiz-macro-files'));
},


uploadsSeen:0,









removeUpload:function(upload){
var _this=this;

var $div=$j(upload.ui.div);
$div.unbind();

$div.fadeOut('fast',function(){
$div.remove();

mw.UploadWizardUtil.removeItem(_this.uploads,upload);
_this.updateFileCounts();
});
},





removeEmptyUploads:function(){
var _this=this;
var toRemove=[];

for(var i=0;i<_this.uploads.length;i++){
if(mw.isEmpty(_this.uploads[i].ui.$fileInputCtrl.val())){
toRemove.push(_this.uploads[i]);
}
}

for(var j=0;j<toRemove.length;j++){
toRemove[j].remove();
}
},










makeTransitioner:function(beginState,progressStates,endStates,starter,endCallback){

var _this=this;

var transitioner=function(){
var uploadsToStart=_this.maxSimultaneousConnections;
var endStateCount=0;
$j.each(_this.uploads,function(i,upload){
if($j.inArray(upload.state,endStates)!==-1){
endStateCount++;
}else if($j.inArray(upload.state,progressStates)!==-1){
uploadsToStart--;
}else if((upload.state==beginState)&&(uploadsToStart>0)){
starter(upload);
uploadsToStart--;
}
});


var nextAction=(endStateCount==_this.uploads.length)?endCallback:transitioner;

setTimeout(nextAction,_this.transitionerDelay);
};

transitioner();
},

transitionerDelay:200,








startUploads:function(endCallback){
var _this=this;

$j('#mwe-upwiz-upload-ctrls').hide();
$j('#mwe-upwiz-add-file').hide();

var allowCloseWindow=$j().preventCloseWindow({
message:gM('mwe-prevent-close')
});


var progressBar=new mw.GroupProgressBar('#mwe-upwiz-progress',
gM('mwe-upwiz-uploading'),
_this.uploads,
['stashed'],
['error'],
'transportProgress',
'transportWeight');
progressBar.start();








_this.makeTransitioner(
'new',
['transporting','transported','metadata'],
['error','verified'],
function(upload){
upload.start();
},
function(){
allowCloseWindow();
$j().notify(gM('mwe-upwiz-files-complete'));
endCallback();
}
);
},









updateFileCounts:function(){
var _this=this;

if(_this.uploads.length){

$j('#mwe-upwiz-upload-ctrl').removeAttr('disabled');
$j('#mwe-upwiz-stepdiv-file .mwe-upwiz-buttons').show();


$j('#mwe-upwiz-add-file').html(gM('mwe-upwiz-add-file-n'));
$j('#mwe-upwiz-add-file-container').removeClass('mwe-upwiz-add-files-0');
$j('#mwe-upwiz-add-file-container').addClass('mwe-upwiz-add-files-n');


$j('#mwe-upwiz-filelist').addClass('mwe-upwiz-filled-filelist');



$j('#mwe-upwiz-filelist .filled .mwe-upwiz-visible-file').removeClass('ui-corner-top').removeClass('ui-corner-bottom');
$j('#mwe-upwiz-filelist .filled .mwe-upwiz-visible-file:first').addClass('ui-corner-top');
$j('#mwe-upwiz-filelist .filled .mwe-upwiz-visible-file:last').addClass('ui-corner-bottom');
$j('#mwe-upwiz-filelist .filled:odd').addClass('odd');
$j('#mwe-upwiz-filelist .filled:even').removeClass('odd');
}else{

$j('#mwe-upwiz-upload-ctrl').attr('disabled','disabled');



$j('#mwe-upwiz-filelist').removeClass('mwe-upwiz-filled-filelist');


$j('#mwe-upwiz-stepdiv-file .mwe-upwiz-buttons').hide();


$j('#mwe-upwiz-add-file').html(gM('mwe-upwiz-add-file-0'));
$j('#mwe-upwiz-add-file-container').addClass('mwe-upwiz-add-files-0');
$j('#mwe-upwiz-add-file-container').removeClass('mwe-upwiz-add-files-n');
}


if(_this.uploads.length<_this.maxUploads){
$j('#mwe-upwiz-add-file').removeAttr('disabled');
$j(_this.uploadToAdd.ui.div).show();
_this.uploadToAdd.ui.moveFileInputToCover('#mwe-upwiz-add-file');
}else{
$j('#mwe-upwiz-add-file').attr('disabled',true);
$j(_this.uploadToAdd.ui.div).hide();
}


},






detailsValid:function(){
var _this=this;
var valid=true;
$j.each(_this.uploads,function(i,upload){
valid&=upload.details.valid();
});
return valid;
},





detailsSubmit:function(endCallback){
var _this=this;

_this.removeBlockedDetails();




$j.each(_this.uploads,function(i,upload){
upload.details.div.mask();
upload.details.div.data('mask').loadingSpinner();
});



_this.makeTransitioner(
'details',
['submitting-details'],
['complete'],
function(upload){
upload.details.submit(function(){
upload.details.div.data('mask').html();
});
},
endCallback
);
},




removeBlockedDetails:function(){

},


prefillThanksPage:function(){
var _this=this;

$j('#mwe-upwiz-thanks')
.append($j('<h3 style="text-align: center;">').append(gM('mwe-upwiz-thanks-intro')),
$j('<p style="margin-bottom: 2em; text-align: center;">')
.append(gM('mwe-upwiz-thanks-explain',_this.uploads.length)));

$j.each(_this.uploads,function(i,upload){
var thanksDiv=$j('<div class="mwe-upwiz-thanks ui-helper-clearfix" />');
_this.thanksDiv=thanksDiv;

var thumbnailDiv=$j('<div class="mwe-upwiz-thumbnail mwe-upwiz-thumbnail-side"></div>');
upload.setThumbnail(thumbnailDiv);
thumbnailDiv.append($j('<p/>').append(
$j('<a />')
.attr({target:'_new',
href:upload.imageinfo.descriptionurl})
.text(upload.title)
));

thanksDiv.append(thumbnailDiv);

var thumbWikiText="[["+upload.title+"|thumb|Add caption here]]";

thanksDiv.append(
$j('<div class="mwe-upwiz-data"></div>')
.append(
$j('<p/>').append(
gM('mwe-upwiz-thanks-wikitext'),
$j('<br />'),
$j('<textarea class="mwe-long-textarea" rows="2"/>')
.growTextArea()
.readonly()
.append(thumbWikiText)
.trigger('resizeEvent')
),
$j('<p/>').append(
gM('mwe-upwiz-thanks-url'),
$j('<br />'),
$j('<textarea class="mwe-long-textarea" rows="2"/>')
.growTextArea()
.readonly()
.append(upload.imageinfo.descriptionurl)
.trigger('resizeEvent')
)
)
);

$j('#mwe-upwiz-thanks').append(thanksDiv);
});
},




pause:function(){

},




stop:function(){

}
};


mw.UploadWizardDeedPreview=function(upload){
this.upload=upload;
};

mw.UploadWizardDeedPreview.prototype={
setup:function(){
var _this=this;

var thumbnailDiv=$j('<div class="mwe-upwiz-thumbnail-small"></div>');
$j('#mwe-upwiz-deeds-thumbnails').append(thumbnailDiv);
_this.upload.setThumbnail(thumbnailDiv,mw.UploadWizard.config['smallThumbnailWidth'],mw.UploadWizard.config['smallThumbnailMaxHeight']);
}
};

})(jQuery);

(function($j){











$j.fn.preventCloseWindow=function(options){
if(typeof options==='undefined'){
options={};
}

if(typeof options.message==='undefined'){
options.message='Are you sure you want to close this window?';
}

$j(window).unload(function(){
return options.message;
});

return function(){
$j(window).removeAttr('unload');
};

};


$j.fn.notify=function(message){




};

$j.fn.enableNextButton=function(){
return this.find('.mwe-upwiz-button-next')
.removeAttr('disabled');

};

$j.fn.disableNextButton=function(){
return this.find('.mwe-upwiz-button-next')
.attr('disabled',true);
};

$j.fn.readonly=function(){
return this.attr('readonly','readonly').addClass('mwe-readonly');
};


$j.fn.requiredFieldLabel=function(){
this.addClass('mwe-upwiz-required-field');
return this.prepend($j('<span/>').append('*').addClass('mwe-upwiz-required-marker'));
};






jQuery.fn.growTextArea=function(options){







if($j.msie){
this.each(function(i,textArea){
textArea.style.overflow='visible';
});
}

var resizeIfNeeded=function(){


if(this.scrollHeight>=this.offsetHeight){
this.rows++;
while(this.scrollHeight>this.offsetHeight){
this.rows++;
}
}
return this;
};

this.addClass('mwe-grow-textarea');

this.bind('resizeEvent',resizeIfNeeded);

this.keyup(resizeIfNeeded);
this.change(resizeIfNeeded);


return this;
};

jQuery.fn.mask=function(options){




$j.each(this,function(i,el){

if(!$j(el).data('mask')){



if($j.browser.msie&&$j.browser.version.substring(0,1)==='6'){
el.find("select").addClass("masked-hidden");
}

var mask=$j('<div />')
.css({'position':'absolute',
'top':'0px',
'left':'0px',
'width':el.offsetWidth+'px',
'height':el.offsetHeight+'px',
'z-index':100})
.click(function(e){e.stopPropagation();});

$j(el).css({'position':'relative'})
.fadeTo('fast',0.5)
.append(mask)
.data('mask',mask);









}

});

return this;

};

jQuery.fn.unmask=function(options){

$j.each(this,function(i,el){
if($j(el).data('mask')){
var mask=$j(el).data('mask');
$j(el).removeData('mask');
mask.remove();
$j(el).fadeTo('fast',1.0);
}
});


return this;
};











jQuery.fn.maskSafeHide=function(options){
$j.each(this.find(':enabled'),function(i,input){
$j(input).data('wasEnabled',true)
.attr('disabled','disabled');
});
return this.css({'height':'0px','overflow':'hidden'});
};



jQuery.fn.maskSafeShow=function(options){
$j.each(this.find(':disabled'),function(i,input){
if($j(input).data('wasEnabled')){
$j(input).removeAttr('disabled')
.removeData('wasEnabled');
}
});
return this.css({'height':'auto','overflow':'visible'});
};

$j.validator.setDefaults({
debug:true,
errorClass:'mwe-validator-error'
});

})(jQuery);






mw.UploadWizardPage=function(){

var apiUrl=false;
if(typeof wgServer!='undefined'&&typeof wgScriptPath!='undefined'){
apiUrl=wgServer+wgScriptPath+'/api.php';
}

var config={
debug:wgUploadWizardDebug,
userName:wgUserName,
userLanguage:wgUserLanguage,
fileExtensions:wgFileExtensions,
apiUrl:apiUrl,

thumbnailWidth:120,
thumbnailMaxHeight:200,
smallThumbnailWidth:60,
smallThumbnailMaxHeight:100,
iconThumbnailWidth:32,
iconThumbnailMaxHeight:32,
maxAuthorLength:50,
minAuthorLength:2,
maxSourceLength:200,
minSourceLength:5,
maxTitleLength:200,
minTitleLength:5,
maxDescriptionLength:4096,
minDescriptionLength:5,
maxOtherInformationLength:4096,
maxSimultaneousConnections:2,
maxUploads:10,






languageTemplateFixups:{tl:'tgl'},



licenses:[
{template:'Cc-by-sa-3.0',messageKey:'mwe-upwiz-license-cc-by-sa-3.0','default':true},
{template:'Cc-by-3.0',messageKey:'mwe-upwiz-license-cc-by-3.0','default':false},
{template:'Cc-zero',messageKey:'mwe-upwiz-license-cc-zero','default':false},

{template:'PD-US',messageKey:'mwe-upwiz-license-pd-us','default':false},
{template:'GFDL',messageKey:'mwe-upwiz-license-gfdl','default':false}
]













};

if(!config.debug){
mw.log.level=mw.log.NONE;
}

var uploadWizard=new mw.UploadWizard(config);
uploadWizard.createInterface('#upload-wizard');

}

jQuery(document).ready(function(){

mw.Language.magicSetup();


mw.UploadWizardPage();
});
